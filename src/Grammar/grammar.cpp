/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 3 "./src/Grammar/grammar.y"

#include <iostream>
#include "../../include/Grammar/tokens.h"
#include "../../include/Grammar/grammar.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
/*#include "lexglobal.h"*/
#include <assert.h>
#include <math.h>
#define BUFS 1024
#include <stdio.h>
#include <string.h>
#include "core/operators.h"
#include "../../include/Grammar/parsingutilities.h"
#include "../../include/core/types.h"
#include "../../include/Grammar/parse.h"
#include "../../include/core/errors.h"
#include "../../include/core/heap.h"
#include "include/core/stack.h"
#include "core/Memory.h"

#undef STRING
#undef NUM
#undef BOOL
#undef panopticon::ARRAY

/*using namespace panopticon;*/

    void token_destructor(Token t)
    {
        std::cout << "token_destructor()" << std::endl;
        mem_free(t);
    }
#line 45 "./src/Grammar/grammar.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 91
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy181;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 236
#define YYNRULE 109
#define YYERRORSYMBOL 55
#define YYERRSYMDT yy181
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2189)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    57,   61,   21,  166,  156,  117,  224,  234,   67,  233,
 /*    10 */    54,   53,   56,   38,   39,   34,   35,   45,   44,   42,
 /*    20 */    40,   43,   41,   37,   36,   51,   50,   49,   48,   47,
 /*    30 */    46,   30,   31,   64,   52,   16,  149,    3,  138,   51,
 /*    40 */    50,   49,   48,   47,   46,  222,   55,  209,   52,  163,
 /*    50 */   210,  208,  226,  178,   49,   48,   47,   46,  145,  182,
 /*    60 */    67,   52,   54,   53,    7,   38,   39,   34,   35,   45,
 /*    70 */    44,   42,   40,   43,   41,   37,   36,   51,   50,   49,
 /*    80 */    48,   47,   46,   32,  172,  177,   52,  346,    1,    5,
 /*    90 */    33,   27,   67,   76,   54,   53,  226,   38,   39,   34,
 /*   100 */    35,   45,   44,   42,   40,   43,   41,   37,   36,   51,
 /*   110 */    50,   49,   48,   47,   46,   46,  192,  161,   52,   52,
 /*   120 */   224,   67,  149,   54,   53,   75,   38,   39,   34,   35,
 /*   130 */    45,   44,   42,   40,   43,   41,   37,   36,   51,   50,
 /*   140 */    49,   48,   47,   46,  140,  182,  150,   52,   27,  205,
 /*   150 */    67,  204,   54,   53,  225,   38,   39,   34,   35,   45,
 /*   160 */    44,   42,   40,   43,   41,   37,   36,   51,   50,   49,
 /*   170 */    48,   47,   46,  124,  123,   63,   52,  224,  224,   67,
 /*   180 */   220,   54,   53,  200,   38,   39,   34,   35,   45,   44,
 /*   190 */    42,   40,   43,   41,   37,   36,   51,   50,   49,   48,
 /*   200 */    47,   46,  198,   62,  196,   52,   67,  212,   54,   53,
 /*   210 */   195,   38,   39,   34,   35,   45,   44,   42,   40,   43,
 /*   220 */    41,   37,   36,   51,   50,   49,   48,   47,   46,  152,
 /*   230 */   194,  193,   52,   67,  211,   54,   53,  226,   38,   39,
 /*   240 */    34,   35,   45,   44,   42,   40,   43,   41,   37,   36,
 /*   250 */    51,   50,   49,   48,   47,   46,  190,   26,   60,   52,
 /*   260 */    67,  207,   54,   53,  183,   38,   39,   34,   35,   45,
 /*   270 */    44,   42,   40,   43,   41,   37,   36,   51,   50,   49,
 /*   280 */    48,   47,   46,  122,   28,   23,   52,  224,  143,   67,
 /*   290 */   226,   54,   53,  203,   38,   39,   34,   35,   45,   44,
 /*   300 */    42,   40,   43,   41,   37,   36,   51,   50,   49,   48,
 /*   310 */    47,   46,  121,  191,  199,   52,  224,  224,   67,  189,
 /*   320 */    54,   53,  141,   38,   39,   34,   35,   45,   44,   42,
 /*   330 */    40,   43,   41,   37,   36,   51,   50,   49,   48,   47,
 /*   340 */    46,   25,  184,  142,   52,  181,  224,   22,  187,  173,
 /*   350 */    67,  179,   54,   53,  158,   38,   39,   34,   35,   45,
 /*   360 */    44,   42,   40,   43,   41,   37,   36,   51,   50,   49,
 /*   370 */    48,   47,   46,   19,  176,   67,   52,   54,   53,  125,
 /*   380 */    38,   39,   34,   35,   45,   44,   42,   40,   43,   41,
 /*   390 */    37,   36,   51,   50,   49,   48,   47,   46,   20,  224,
 /*   400 */    61,   52,  139,  156,  147,  224,  147,   67,  185,   54,
 /*   410 */    53,  137,   38,   39,   34,   35,   45,   44,   42,   40,
 /*   420 */    43,   41,   37,   36,   51,   50,   49,   48,   47,   46,
 /*   430 */   129,  116,   67,   52,   54,   53,  171,   38,   39,   34,
 /*   440 */    35,   45,   44,   42,   40,   43,   41,   37,   36,   51,
 /*   450 */    50,   49,   48,   47,   46,  347,  347,  347,   52,  347,
 /*   460 */   347,  347,  347,  347,   67,  347,   54,   53,  174,   38,
 /*   470 */    39,   34,   35,   45,   44,   42,   40,   43,   41,   37,
 /*   480 */    36,   51,   50,   49,   48,   47,   46,  347,   54,   53,
 /*   490 */    52,   38,   39,   34,   35,   45,   44,   42,   40,   43,
 /*   500 */    41,   37,   36,   51,   50,   49,   48,   47,   46,   96,
 /*   510 */   347,  347,   52,  170,  169,  232,  231,  230,  229,   66,
 /*   520 */   167,    8,  135,  180,  118,  175,  347,  347,  347,  347,
 /*   530 */   347,  223,  128,  347,  165,  218,  216,  347,  215,  214,
 /*   540 */   213,   38,   39,   34,   35,   45,   44,   42,   40,   43,
 /*   550 */    41,   37,   36,   51,   50,   49,   48,   47,   46,  347,
 /*   560 */   347,  347,   52,   39,   34,   35,   45,   44,   42,   40,
 /*   570 */    43,   41,   37,   36,   51,   50,   49,   48,   47,   46,
 /*   580 */    96,  347,  168,   52,  120,  347,  347,  347,  347,  155,
 /*   590 */   134,  167,  347,  135,  119,   24,  148,  201,   74,   77,
 /*   600 */   202,  186,  223,  128,   14,  153,  218,  216,  347,  215,
 /*   610 */   214,  213,  347,  347,  347,   34,   35,   45,   44,   42,
 /*   620 */    40,   43,   41,   37,   36,   51,   50,   49,   48,   47,
 /*   630 */    46,  144,  197,  347,   52,   35,   45,   44,   42,   40,
 /*   640 */    43,   41,   37,   36,   51,   50,   49,   48,   47,   46,
 /*   650 */   347,  347,  347,   52,   45,   44,   42,   40,   43,   41,
 /*   660 */    37,   36,   51,   50,   49,   48,   47,   46,  236,  347,
 /*   670 */    59,   52,  157,  166,  347,   65,   42,   40,   43,   41,
 /*   680 */    37,   36,   51,   50,   49,   48,   47,   46,  347,  347,
 /*   690 */   347,   52,   37,   36,   51,   50,   49,   48,   47,   46,
 /*   700 */   347,   30,   31,   52,  347,   16,  347,    3,  347,  347,
 /*   710 */   347,  235,  347,   18,   96,  136,    6,  209,   17,  163,
 /*   720 */   210,  208,  347,  206,  142,  167,   13,  135,   59,  160,
 /*   730 */   347,  166,  347,  117,  347,  347,  223,  128,  347,  347,
 /*   740 */   218,  216,  151,  215,  214,  213,  347,  247,  162,    6,
 /*   750 */   347,   17,  347,  247,  347,  247,  247,  347,  347,   30,
 /*   760 */    31,  247,  160,   16,  347,    3,  164,  347,   59,  347,
 /*   770 */   347,  166,  347,  117,  347,  209,  347,  163,  210,  208,
 /*   780 */   134,  347,  347,    6,  347,   17,  347,  201,   69,   77,
 /*   790 */   202,    4,  347,   17,   29,  347,  160,  347,  347,   30,
 /*   800 */    31,   96,  347,   16,  160,    3,   59,  347,  347,  166,
 /*   810 */   206,  117,  167,   10,  135,  209,  347,  163,  210,  208,
 /*   820 */   347,  347,  347,  223,  128,  347,  134,  218,  216,  347,
 /*   830 */   215,  214,  213,  201,   73,   77,  202,   30,   31,  347,
 /*   840 */   347,   16,  228,    3,   59,  347,  347,  166,  347,  117,
 /*   850 */   347,  347,  134,  209,  347,  163,  210,  208,  134,  201,
 /*   860 */    74,   77,  202,  146,  347,  201,   71,   77,  202,  347,
 /*   870 */   347,  347,  347,  347,  347,   30,   31,  347,  347,   16,
 /*   880 */   227,    3,   59,  347,  347,  166,  347,  117,  347,  347,
 /*   890 */   134,  209,  347,  163,  210,  208,  347,  201,   70,   77,
 /*   900 */   202,  134,  347,  347,  347,  347,  347,  347,  201,   68,
 /*   910 */    77,  202,  347,   30,   31,  347,  347,   16,  221,    3,
 /*   920 */    59,  347,  347,  166,  347,  117,  347,  134,  347,  209,
 /*   930 */   347,  163,  210,  208,  201,   74,   77,  202,  347,  347,
 /*   940 */   347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
 /*   950 */    96,   30,   31,  347,  347,   16,  219,    3,  347,  206,
 /*   960 */   347,  167,    9,  135,  347,  347,  347,  209,  347,  163,
 /*   970 */   210,  208,  223,  128,  347,   96,  218,  216,  347,  215,
 /*   980 */   214,  213,  347,  347,  206,  347,  167,   12,  135,   59,
 /*   990 */   347,  347,  166,  347,  117,  347,  347,  223,  128,  347,
 /*  1000 */   134,  218,  216,  347,  215,  214,  213,  201,   72,   77,
 /*  1010 */   202,  347,  347,  347,  347,  347,  347,  347,  347,   96,
 /*  1020 */    30,   31,  347,  347,   16,  188,    3,  347,  206,  347,
 /*  1030 */   167,   11,  135,  347,  347,  347,  209,  347,  163,  210,
 /*  1040 */   208,  223,  128,  347,   96,  218,  216,  347,  215,  214,
 /*  1050 */   213,   59,  347,  154,  166,  167,  117,  135,  347,   59,
 /*  1060 */   347,  347,  166,  347,  115,  347,  223,  128,  347,  347,
 /*  1070 */   218,  216,  347,  215,  214,  213,  347,  347,  347,  347,
 /*  1080 */   347,  347,   30,   31,  347,  347,   16,  190,    3,  347,
 /*  1090 */    30,   31,  347,  347,   16,  188,    3,  347,  209,  347,
 /*  1100 */   163,  210,  208,  347,  347,  347,  209,   84,  163,  210,
 /*  1110 */   208,   59,  347,  347,  166,  347,  117,  347,  167,  347,
 /*  1120 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1130 */   128,  347,  347,  218,  216,  347,  215,  214,  213,  347,
 /*  1140 */   347,  347,   30,   31,   96,  347,   16,    2,    3,  347,
 /*  1150 */   166,  347,  117,  217,  347,  167,  347,  135,  209,  347,
 /*  1160 */   163,  210,  208,  347,  347,  347,  223,  128,  347,  347,
 /*  1170 */   218,  216,  347,  215,  214,  213,  347,  347,   30,   31,
 /*  1180 */   347,  347,   16,  347,    3,   58,  347,  347,  159,  347,
 /*  1190 */   112,  347,  347,  347,  209,  347,  163,  210,  208,  347,
 /*  1200 */   347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
 /*  1210 */   347,  347,  347,  347,  347,   91,   30,   31,  347,  347,
 /*  1220 */    16,  347,    3,  347,  347,  347,  167,  347,  135,  347,
 /*  1230 */   347,  347,  209,  347,  163,  210,  208,  223,  128,  347,
 /*  1240 */   347,  218,  216,  347,  215,  214,  213,   97,  347,  347,
 /*  1250 */   347,  347,  347,  347,  347,  347,  347,  347,  167,  347,
 /*  1260 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1270 */   128,  347,   99,  218,  216,  347,  215,  214,  213,  347,
 /*  1280 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1290 */   347,  347,  347,   98,  223,  128,  347,  347,  218,  216,
 /*  1300 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1310 */   347,  347,  347,  347,  347,  223,  128,  114,  347,  218,
 /*  1320 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1330 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1340 */   128,  347,  113,  218,  216,  347,  215,  214,  213,  347,
 /*  1350 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1360 */   347,  347,  347,  133,  223,  128,  347,  347,  218,  216,
 /*  1370 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1380 */   347,  347,  347,  347,  347,  223,  128,  132,  347,  218,
 /*  1390 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1400 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1410 */   128,  347,  131,  218,  216,  347,  215,  214,  213,  347,
 /*  1420 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1430 */   347,  347,  347,  130,  223,  128,  347,  347,  218,  216,
 /*  1440 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1450 */   347,  347,  347,  347,  347,  223,  128,  105,  347,  218,
 /*  1460 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1470 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1480 */   128,  347,  104,  218,  216,  347,  215,  214,  213,  347,
 /*  1490 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1500 */   347,  347,  347,  109,  223,  128,  347,  347,  218,  216,
 /*  1510 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1520 */   347,  347,  347,  347,  347,  223,  128,  108,  347,  218,
 /*  1530 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1540 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1550 */   128,  347,  107,  218,  216,  347,  215,  214,  213,  347,
 /*  1560 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1570 */   347,  347,  347,  106,  223,  128,  347,  347,  218,  216,
 /*  1580 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1590 */   347,  347,  347,  347,  347,  223,  128,  101,  347,  218,
 /*  1600 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1610 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1620 */   128,  347,  100,  218,  216,  347,  215,  214,  213,  347,
 /*  1630 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1640 */   347,  347,  347,  111,  223,  128,  347,  347,  218,  216,
 /*  1650 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1660 */   347,  347,  347,  347,  347,  223,  128,  110,  347,  218,
 /*  1670 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1680 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1690 */   128,  347,  103,  218,  216,  347,  215,  214,  213,  347,
 /*  1700 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1710 */   347,  347,  347,  102,  223,  128,  347,  347,  218,  216,
 /*  1720 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1730 */   347,  347,  347,  347,  347,  223,  128,   95,  347,  218,
 /*  1740 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1750 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1760 */   128,  347,   89,  218,  216,  347,  215,  214,  213,  347,
 /*  1770 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1780 */   347,  347,  347,  127,  223,  128,  347,  347,  218,  216,
 /*  1790 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1800 */   347,  347,  347,  347,  347,  223,  128,  126,  347,  218,
 /*  1810 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1820 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1830 */   128,  347,   87,  218,  216,  347,  215,  214,  213,  347,
 /*  1840 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1850 */   347,  347,  347,   86,  223,  128,  347,  347,  218,  216,
 /*  1860 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1870 */   347,  347,  347,  347,  347,  223,  128,   85,  347,  218,
 /*  1880 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1890 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1900 */   128,  347,   83,  218,  216,  347,  215,  214,  213,  347,
 /*  1910 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1920 */   347,  347,  347,   82,  223,  128,  347,  347,  218,  216,
 /*  1930 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  1940 */   347,  347,  347,  347,  347,  223,  128,   15,  347,  218,
 /*  1950 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  1960 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  1970 */   128,  347,   93,  218,  216,  347,  215,  214,  213,  347,
 /*  1980 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  1990 */   347,  347,  347,   92,  223,  128,  347,  347,  218,  216,
 /*  2000 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  2010 */   347,  347,  347,  347,  347,  223,  128,   81,  347,  218,
 /*  2020 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  2030 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  2040 */   128,  347,   79,  218,  216,  347,  215,  214,  213,  347,
 /*  2050 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  2060 */   347,  347,  347,   78,  223,  128,  347,  347,  218,  216,
 /*  2070 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  2080 */   347,  347,  347,  347,  347,  223,  128,   80,  347,  218,
 /*  2090 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  2100 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  2110 */   128,  347,   90,  218,  216,  347,  215,  214,  213,  347,
 /*  2120 */   347,  347,  347,  167,  347,  135,  347,  347,  347,  347,
 /*  2130 */   347,  347,  347,   88,  223,  128,  347,  347,  218,  216,
 /*  2140 */   347,  215,  214,  213,  167,  347,  135,  347,  347,  347,
 /*  2150 */   347,  347,  347,  347,  347,  223,  128,   94,  347,  218,
 /*  2160 */   216,  347,  215,  214,  213,  347,  347,  347,  167,  347,
 /*  2170 */   135,  347,  347,  347,  347,  347,  347,  347,  347,  223,
 /*  2180 */   128,  347,  347,  218,  216,  347,  215,  214,  213,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     2,    2,    8,    5,    5,    7,    7,   43,   10,   43,
 /*    10 */    12,   13,   39,   15,   16,   17,   18,   19,   20,   21,
 /*    20 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*    30 */    32,   33,   34,    2,   36,   37,   66,   39,   44,   27,
 /*    40 */    28,   29,   30,   31,   32,    7,    1,   49,   36,   51,
 /*    50 */    52,   53,    7,    3,   29,   30,   31,   32,   88,   89,
 /*    60 */    10,   36,   12,   13,   37,   15,   16,   17,   18,   19,
 /*    70 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*    80 */    30,   31,   32,   37,   55,    3,   36,   58,   59,   37,
 /*    90 */     1,   39,   10,   43,   12,   13,    7,   15,   16,   17,
 /*   100 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   110 */    28,   29,   30,   31,   32,   32,    3,   49,   36,   36,
 /*   120 */     7,   10,   66,   12,   13,   43,   15,   16,   17,   18,
 /*   130 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   140 */    29,   30,   31,   32,   88,   89,   37,   36,   39,    3,
 /*   150 */    10,    7,   12,   13,   43,   15,   16,   17,   18,   19,
 /*   160 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   170 */    30,   31,   32,    3,    3,    2,   36,    7,    7,   10,
 /*   180 */    40,   12,   13,    3,   15,   16,   17,   18,   19,   20,
 /*   190 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   200 */    31,   32,    3,    2,   43,   36,   10,   38,   12,   13,
 /*   210 */    43,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   220 */    24,   25,   26,   27,   28,   29,   30,   31,   32,    3,
 /*   230 */    40,   40,   36,   10,   38,   12,   13,    7,   15,   16,
 /*   240 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   250 */    27,   28,   29,   30,   31,   32,   38,    8,    2,   36,
 /*   260 */    10,   38,   12,   13,    3,   15,   16,   17,   18,   19,
 /*   270 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   280 */    30,   31,   32,    3,    1,    1,   36,    7,    7,   10,
 /*   290 */     7,   12,   13,   43,   15,   16,   17,   18,   19,   20,
 /*   300 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   310 */    31,   32,    3,    3,    3,   36,    7,    7,   10,   40,
 /*   320 */    12,   13,    7,   15,   16,   17,   18,   19,   20,   21,
 /*   330 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   340 */    32,    1,    3,   12,   36,   38,    7,    1,   40,   48,
 /*   350 */    10,    3,   12,   13,   43,   15,   16,   17,   18,   19,
 /*   360 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   370 */    30,   31,   32,    1,    3,   10,   36,   12,   13,   66,
 /*   380 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*   390 */    25,   26,   27,   28,   29,   30,   31,   32,    1,    7,
 /*   400 */     2,   36,   77,    5,    6,    7,    6,   10,   43,   12,
 /*   410 */    13,   77,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   420 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   430 */    66,    7,   10,   36,   12,   13,   54,   15,   16,   17,
 /*   440 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   450 */    28,   29,   30,   31,   32,   90,   90,   90,   36,   90,
 /*   460 */    90,   90,   90,   90,   10,   90,   12,   13,   46,   15,
 /*   470 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   480 */    26,   27,   28,   29,   30,   31,   32,   90,   12,   13,
 /*   490 */    36,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   500 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   56,
 /*   510 */    90,   90,   36,   60,   61,   62,   63,   64,   65,   66,
 /*   520 */    67,   37,   69,   70,   71,   72,   90,   90,   90,   90,
 /*   530 */    90,   78,   79,   90,   50,   82,   83,   90,   85,   86,
 /*   540 */    87,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   550 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   90,
 /*   560 */    90,   90,   36,   16,   17,   18,   19,   20,   21,   22,
 /*   570 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   580 */    56,   90,   67,   36,   69,   90,   90,   90,   90,   65,
 /*   590 */    66,   67,   90,   69,   79,    1,    2,   73,   74,   75,
 /*   600 */    76,    7,   78,   79,   80,   81,   82,   83,   90,   85,
 /*   610 */    86,   87,   90,   90,   90,   17,   18,   19,   20,   21,
 /*   620 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   630 */    32,   37,    3,   90,   36,   18,   19,   20,   21,   22,
 /*   640 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   650 */    90,   90,   90,   36,   19,   20,   21,   22,   23,   24,
 /*   660 */    25,   26,   27,   28,   29,   30,   31,   32,    0,   90,
 /*   670 */     2,   36,   43,    5,   90,    7,   21,   22,   23,   24,
 /*   680 */    25,   26,   27,   28,   29,   30,   31,   32,   90,   90,
 /*   690 */    90,   36,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   700 */    90,   33,   34,   36,   90,   37,   90,   39,   90,   90,
 /*   710 */    90,   43,   90,   45,   56,   47,   37,   49,   39,   51,
 /*   720 */    52,   53,   90,   65,   12,   67,   68,   69,    2,   50,
 /*   730 */    90,    5,   90,    7,   90,   90,   78,   79,   90,   90,
 /*   740 */    82,   83,   84,   85,   86,   87,   90,    1,    2,   37,
 /*   750 */    90,   39,   90,    7,   90,    1,    2,   90,   90,   33,
 /*   760 */    34,    7,   50,   37,   90,   39,   40,   90,    2,   90,
 /*   770 */    90,    5,   90,    7,   90,   49,   90,   51,   52,   53,
 /*   780 */    66,   90,   90,   37,   90,   39,   90,   73,   74,   75,
 /*   790 */    76,   37,   90,   39,   28,   90,   50,   90,   90,   33,
 /*   800 */    34,   56,   90,   37,   50,   39,    2,   90,   90,    5,
 /*   810 */    65,    7,   67,   68,   69,   49,   90,   51,   52,   53,
 /*   820 */    90,   90,   90,   78,   79,   90,   66,   82,   83,   90,
 /*   830 */    85,   86,   87,   73,   74,   75,   76,   33,   34,   90,
 /*   840 */    90,   37,   38,   39,    2,   90,   90,    5,   90,    7,
 /*   850 */    90,   90,   66,   49,   90,   51,   52,   53,   66,   73,
 /*   860 */    74,   75,   76,   77,   90,   73,   74,   75,   76,   90,
 /*   870 */    90,   90,   90,   90,   90,   33,   34,   90,   90,   37,
 /*   880 */    38,   39,    2,   90,   90,    5,   90,    7,   90,   90,
 /*   890 */    66,   49,   90,   51,   52,   53,   90,   73,   74,   75,
 /*   900 */    76,   66,   90,   90,   90,   90,   90,   90,   73,   74,
 /*   910 */    75,   76,   90,   33,   34,   90,   90,   37,   38,   39,
 /*   920 */     2,   90,   90,    5,   90,    7,   90,   66,   90,   49,
 /*   930 */    90,   51,   52,   53,   73,   74,   75,   76,   90,   90,
 /*   940 */    90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
 /*   950 */    56,   33,   34,   90,   90,   37,   38,   39,   90,   65,
 /*   960 */    90,   67,   68,   69,   90,   90,   90,   49,   90,   51,
 /*   970 */    52,   53,   78,   79,   90,   56,   82,   83,   90,   85,
 /*   980 */    86,   87,   90,   90,   65,   90,   67,   68,   69,    2,
 /*   990 */    90,   90,    5,   90,    7,   90,   90,   78,   79,   90,
 /*  1000 */    66,   82,   83,   90,   85,   86,   87,   73,   74,   75,
 /*  1010 */    76,   90,   90,   90,   90,   90,   90,   90,   90,   56,
 /*  1020 */    33,   34,   90,   90,   37,   38,   39,   90,   65,   90,
 /*  1030 */    67,   68,   69,   90,   90,   90,   49,   90,   51,   52,
 /*  1040 */    53,   78,   79,   90,   56,   82,   83,   90,   85,   86,
 /*  1050 */    87,    2,   90,   65,    5,   67,    7,   69,   90,    2,
 /*  1060 */    90,   90,    5,   90,    7,   90,   78,   79,   90,   90,
 /*  1070 */    82,   83,   90,   85,   86,   87,   90,   90,   90,   90,
 /*  1080 */    90,   90,   33,   34,   90,   90,   37,   38,   39,   90,
 /*  1090 */    33,   34,   90,   90,   37,   38,   39,   90,   49,   90,
 /*  1100 */    51,   52,   53,   90,   90,   90,   49,   56,   51,   52,
 /*  1110 */    53,    2,   90,   90,    5,   90,    7,   90,   67,   90,
 /*  1120 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1130 */    79,   90,   90,   82,   83,   90,   85,   86,   87,   90,
 /*  1140 */    90,   90,   33,   34,   56,   90,   37,    2,   39,   90,
 /*  1150 */     5,   90,    7,   65,   90,   67,   90,   69,   49,   90,
 /*  1160 */    51,   52,   53,   90,   90,   90,   78,   79,   90,   90,
 /*  1170 */    82,   83,   90,   85,   86,   87,   90,   90,   33,   34,
 /*  1180 */    90,   90,   37,   90,   39,    2,   90,   90,    5,   90,
 /*  1190 */     7,   90,   90,   90,   49,   90,   51,   52,   53,   90,
 /*  1200 */    90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
 /*  1210 */    90,   90,   90,   90,   90,   56,   33,   34,   90,   90,
 /*  1220 */    37,   90,   39,   90,   90,   90,   67,   90,   69,   90,
 /*  1230 */    90,   90,   49,   90,   51,   52,   53,   78,   79,   90,
 /*  1240 */    90,   82,   83,   90,   85,   86,   87,   56,   90,   90,
 /*  1250 */    90,   90,   90,   90,   90,   90,   90,   90,   67,   90,
 /*  1260 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1270 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1280 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1290 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1300 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1310 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1320 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1330 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1340 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1350 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1360 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1370 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1380 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1390 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1400 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1410 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1420 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1430 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1440 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1450 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1460 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1470 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1480 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1490 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1500 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1510 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1520 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1530 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1540 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1550 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1560 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1570 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1580 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1590 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1600 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1610 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1620 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1630 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1640 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1650 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1660 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1670 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1680 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1690 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1700 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1710 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1720 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1730 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1740 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1750 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1760 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1770 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1780 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1790 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1800 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1810 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1820 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1830 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1840 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1850 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1860 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1870 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1880 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1890 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1900 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1910 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1920 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  1930 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  1940 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  1950 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  1960 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  1970 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  1980 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  1990 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  2000 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  2010 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  2020 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  2030 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  2040 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  2050 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  2060 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  2070 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  2080 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  2090 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  2100 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  2110 */    79,   90,   56,   82,   83,   90,   85,   86,   87,   90,
 /*  2120 */    90,   90,   90,   67,   90,   69,   90,   90,   90,   90,
 /*  2130 */    90,   90,   90,   56,   78,   79,   90,   90,   82,   83,
 /*  2140 */    90,   85,   86,   87,   67,   90,   69,   90,   90,   90,
 /*  2150 */    90,   90,   90,   90,   90,   78,   79,   56,   90,   82,
 /*  2160 */    83,   90,   85,   86,   87,   90,   90,   90,   67,   90,
 /*  2170 */    69,   90,   90,   90,   90,   90,   90,   90,   90,   78,
 /*  2180 */    79,   90,   90,   82,   83,   90,   85,   86,   87,
};
#define YY_SHIFT_USE_DFLT (-37)
#define YY_SHIFT_COUNT (170)
#define YY_SHIFT_MIN   (-36)
#define YY_SHIFT_MAX   (1183)
static const short yy_shift_ofst[] = {
 /*     0 */   382,  668, 1183, 1145, 1057, 1049,  987, 1109, 1109,  918,
 /*    10 */   880,  842,  804, 1109, 1109,   -2,  766,  726, 1109, 1109,
 /*    20 */  1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
 /*    30 */  1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
 /*    40 */  1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
 /*    50 */  1109, 1109, 1109, 1109, 1109, 1109, 1109,  398,   -1,   -1,
 /*    60 */   392,  392,  392,  392,  392,  754,  594,  424,  339,  310,
 /*    70 */   309,  280,  171,  170,  113,  400,  400,  392,   82,   50,
 /*    80 */   422,  397,  365,  340,  308,  279,  250,  223,  196,  169,
 /*    90 */   140,  111,  454,  454,  454,  454,  454,  476,  526,  526,
 /*   100 */   547,  598,  617,  635,  655,  655,  667,  667,  667,  667,
 /*   110 */    12,   12,  746,   25,   25,  712,  679,  679,   -6,  484,
 /*   120 */   109,  629,  311,  629,  311,  283,   83,   83,  484,   89,
 /*   130 */    83,   83,   83,   83,   45,   52,  301,  371,  372,  348,
 /*   140 */   346,  307,  315,  331,  281,  284,  261,  256,  249,  230,
 /*   150 */   218,  191,  190,  226,  167,  161,  201,  199,  180,  173,
 /*   160 */   144,  146,   68,   46,   27,   38,   31,  -27,  -27,  -34,
 /*   170 */   -36,
};
#define YY_REDUCE_USE_DFLT (-31)
#define YY_REDUCE_COUNT (77)
#define YY_REDUCE_MIN   (-30)
#define YY_REDUCE_MAX   (2101)
static const short yy_reduce_ofst[] = {
 /*     0 */    29,  453,  524,  658,  919,  963,  919,  894,  745, 1088,
 /*    10 */  1088, 1088, 1088, 1088,  988, 2101, 2077, 2056, 2031, 2007,
 /*    20 */  1986, 1961, 1937, 1916, 1891, 1867, 1846, 1821, 1797, 1776,
 /*    30 */  1751, 1727, 1706, 1681, 1657, 1636, 1611, 1587, 1566, 1541,
 /*    40 */  1517, 1496, 1471, 1447, 1426, 1401, 1377, 1356, 1331, 1307,
 /*    50 */  1286, 1261, 1237, 1216, 1191, 1159, 1051,  786,  934,  861,
 /*    60 */   835,  824,  792,  760,  714,   56,  -30,  515,  364,  364,
 /*    70 */   364,  364,  364,  364,  364,  334,  325,  313,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   237,  345,  345,  300,  345,  345,  345,  345,  345,  345,
 /*    10 */   345,  345,  345,  301,  345,  263,  345,  345,  345,  345,
 /*    20 */   345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
 /*    30 */   345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
 /*    40 */   345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
 /*    50 */   345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
 /*    60 */   345,  345,  345,  345,  345,  248,  345,  345,  345,  345,
 /*    70 */   345,  345,  345,  345,  345,  345,  259,  269,  345,  345,
 /*    80 */   345,  345,  345,  345,  345,  345,  268,  345,  345,  345,
 /*    90 */   345,  264,  313,  312,  273,  265,  245,  315,  317,  316,
 /*   100 */   331,  330,  338,  337,  325,  324,  329,  328,  327,  326,
 /*   110 */   336,  335,  248,  319,  318,  248,  250,  248,  345,  345,
 /*   120 */   345,  345,  345,  282,  279,  345,  334,  332,  290,  345,
 /*   130 */   323,  322,  321,  320,  345,  342,  345,  345,  345,  345,
 /*   140 */   345,  345,  345,  345,  345,  345,  345,  345,  345,  310,
 /*   150 */   345,  345,  345,  345,  293,  345,  345,  345,  345,  345,
 /*   160 */   345,  345,  345,  345,  345,  345,  345,  256,  249,  345,
 /*   170 */   345,  344,  343,  278,  277,  262,  276,  261,  260,  275,
 /*   180 */   257,  314,  311,  274,  272,  258,  246,  339,  254,  341,
 /*   190 */   255,  279,  282,  299,  294,  292,  291,  284,  283,  281,
 /*   200 */   280,  271,  270,  267,  287,  286,  296,  333,  309,  308,
 /*   210 */   307,  306,  305,  304,  303,  302,  298,  297,  295,  252,
 /*   220 */   340,  289,  288,  285,  247,  266,  246,  253,  251,  244,
 /*   230 */   243,  242,  241,  240,  239,  238,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSIGN",        "LCURL",         "RCURL",       
  "COLON",         "DICT",          "WHERE",         "NAME",        
  "BITOR",         "FUNCTION_DEC",  "COMPOSITION",   "FUNCTION_CALL",
  "PREPEND",       "APPEND",        "INDEX",         "OR",          
  "AND",           "BITXOR",        "BITAND",        "EQUALTO",     
  "NOTEQUALTO",    "GREATERTHAN",   "GORE",          "LESSTHAN",    
  "LORE",          "SHIFTL",        "SHIFTR",        "PLUS",        
  "MINUS",         "DIVIDE",        "TIMES",         "MODULO",      
  "POW",           "NOT",           "BITNOT",        "UMINUS",      
  "PLUSPLUS",      "LPAREN",        "RPAREN",        "LBRAC",       
  "RBRAC",         "COMMA",         "COLLECTARRAY",  "DELIMITER",   
  "WILDCARD",      "CASE",          "OF",            "LET",         
  "IN",            "STRING",        "COLONCOLON",    "PRINT",       
  "NUM",           "BOOLEAN",       "OPENQUOTEERROR",  "error",       
  "expr",          "id",            "main",          "in",          
  "start",         "test",          "spec",          "assignment",  
  "top_stmt",      "stmt",          "name_chain",    "function_call",
  "stmt_list",     "array_index",   "case_statement",  "guard_statement",
  "final_guard_statement",  "horizontal_assignment_list",  "assignment_list",  "vertical_assignment_list",
  "final_vertical_assignment_list",  "where",         "dict",          "name_space",  
  "vert_stmt_list",  "final_vert_stmt_list",  "vertical_array",  "array",       
  "maybe_empty_stmt_list",  "num",           "string",        "bool",        
  "maybe_empty_name_chain",  "pattern",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "main ::= in",
 /*   1 */ "in ::=",
 /*   2 */ "in ::= in DELIMITER",
 /*   3 */ "in ::= in start DELIMITER",
 /*   4 */ "in ::= in test DELIMITER",
 /*   5 */ "start ::= spec",
 /*   6 */ "spec ::= assignment",
 /*   7 */ "spec ::= top_stmt",
 /*   8 */ "top_stmt ::= stmt",
 /*   9 */ "stmt ::= expr",
 /*  10 */ "name_chain ::= name_chain NAME",
 /*  11 */ "name_chain ::= NAME",
 /*  12 */ "expr ::= NAME",
 /*  13 */ "expr ::= expr COMPOSITION function_call",
 /*  14 */ "expr ::= expr COMPOSITION NAME",
 /*  15 */ "function_call ::= NAME LPAREN stmt_list RPAREN",
 /*  16 */ "function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  17 */ "expr ::= array_index LPAREN stmt_list RPAREN",
 /*  18 */ "function_call ::= NAME LPAREN RPAREN",
 /*  19 */ "function_call ::= array_index LPAREN RPAREN",
 /*  20 */ "expr ::= function_call",
 /*  21 */ "test ::= case_statement",
 /*  22 */ "guard_statement ::= name_chain LCURL BITOR expr ASSIGN expr DELIMITER",
 /*  23 */ "guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER",
 /*  24 */ "final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCURL",
 /*  25 */ "final_guard_statement ::= guard_statement WILDCARD ASSIGN expr RCURL",
 /*  26 */ "assignment ::= final_guard_statement",
 /*  27 */ "assignment ::= name_chain ASSIGN expr",
 /*  28 */ "horizontal_assignment_list ::= name_chain ASSIGN expr",
 /*  29 */ "horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr",
 /*  30 */ "vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER",
 /*  31 */ "vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER",
 /*  32 */ "final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr",
 /*  33 */ "assignment_list ::= vertical_assignment_list",
 /*  34 */ "assignment_list ::= final_vertical_assignment_list",
 /*  35 */ "assignment_list ::= horizontal_assignment_list",
 /*  36 */ "where ::= WHERE LCURL assignment_list RCURL",
 /*  37 */ "assignment ::= name_chain ASSIGN expr expr",
 /*  38 */ "assignment ::= name_chain ASSIGN expr LCURL where RCURL",
 /*  39 */ "assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCURL",
 /*  40 */ "assignment ::= guard_statement WILDCARD ASSIGN expr DELIMITER where RCURL",
 /*  41 */ "case_statement ::= CASE expr OF",
 /*  42 */ "test ::= LET IN",
 /*  43 */ "dict ::= DICT LCURL assignment_list RCURL",
 /*  44 */ "dict ::= LCURL DICT LCURL assignment_list RCURL DELIMITER RCURL",
 /*  45 */ "dict ::= LCURL DICT LCURL assignment_list RCURL RCURL",
 /*  46 */ "dict ::= LCURL assignment_list RCURL",
 /*  47 */ "dict ::= LCURL LCURL assignment_list RCURL DELIMITER RCURL",
 /*  48 */ "dict ::= LCURL LCURL assignment_list RCURL RCURL",
 /*  49 */ "expr ::= dict",
 /*  50 */ "expr ::= NAME LCURL STRING RCURL",
 /*  51 */ "name_space ::= NAME COLONCOLON NAME",
 /*  52 */ "name_space ::= name_space COLONCOLON NAME",
 /*  53 */ "function_call ::= name_space LPAREN stmt_list RPAREN",
 /*  54 */ "expr ::= name_space",
 /*  55 */ "vert_stmt_list ::= stmt DELIMITER",
 /*  56 */ "vert_stmt_list ::= vert_stmt_list stmt DELIMITER",
 /*  57 */ "final_vert_stmt_list ::= vert_stmt_list stmt",
 /*  58 */ "vertical_array ::= LBRAC LCURL final_vert_stmt_list RCURL RBRAC",
 /*  59 */ "array ::= vertical_array",
 /*  60 */ "stmt_list ::= stmt",
 /*  61 */ "stmt_list ::= stmt_list stmt",
 /*  62 */ "expr ::= array",
 /*  63 */ "array ::= LBRAC maybe_empty_stmt_list RBRAC",
 /*  64 */ "maybe_empty_stmt_list ::=",
 /*  65 */ "maybe_empty_stmt_list ::= stmt_list",
 /*  66 */ "expr ::= num",
 /*  67 */ "expr ::= string",
 /*  68 */ "expr ::= bool",
 /*  69 */ "expr ::= PRINT LPAREN expr RPAREN",
 /*  70 */ "expr ::= LPAREN expr RPAREN",
 /*  71 */ "num ::= NUM",
 /*  72 */ "string ::= STRING",
 /*  73 */ "bool ::= BOOLEAN",
 /*  74 */ "maybe_empty_name_chain ::= name_chain",
 /*  75 */ "maybe_empty_name_chain ::= pattern",
 /*  76 */ "assignment ::= name_chain maybe_empty_name_chain ASSIGN expr",
 /*  77 */ "assignment ::= NAME maybe_empty_name_chain ASSIGN expr",
 /*  78 */ "pattern ::= LPAREN NAME PREPEND NAME RPAREN",
 /*  79 */ "expr ::= expr PREPEND expr",
 /*  80 */ "expr ::= expr APPEND expr",
 /*  81 */ "expr ::= expr PLUSPLUS expr",
 /*  82 */ "expr ::= expr PLUS expr",
 /*  83 */ "expr ::= expr MINUS expr",
 /*  84 */ "expr ::= expr DIVIDE expr",
 /*  85 */ "expr ::= expr TIMES expr",
 /*  86 */ "expr ::= expr MODULO expr",
 /*  87 */ "expr ::= expr POW expr",
 /*  88 */ "expr ::= expr EQUALTO expr",
 /*  89 */ "expr ::= expr NOTEQUALTO expr",
 /*  90 */ "expr ::= expr LESSTHAN expr",
 /*  91 */ "expr ::= expr GREATERTHAN expr",
 /*  92 */ "expr ::= expr LORE expr",
 /*  93 */ "expr ::= expr GORE expr",
 /*  94 */ "expr ::= expr AND expr",
 /*  95 */ "expr ::= expr OR expr",
 /*  96 */ "expr ::= BITNOT expr",
 /*  97 */ "expr ::= LPAREN MINUS expr RPAREN",
 /*  98 */ "expr ::= NOT expr",
 /*  99 */ "expr ::= expr SHIFTL expr",
 /* 100 */ "expr ::= expr SHIFTR expr",
 /* 101 */ "expr ::= expr BITAND expr",
 /* 102 */ "expr ::= expr BITXOR expr",
 /* 103 */ "array_index ::= function_call LBRAC expr RBRAC",
 /* 104 */ "array_index ::= NAME LBRAC expr RBRAC",
 /* 105 */ "array_index ::= array_index LBRAC expr RBRAC",
 /* 106 */ "expr ::= array_index",
 /* 107 */ "in ::= error",
 /* 108 */ "error ::= OPENQUOTEERROR",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* ASSIGN */
    case 2: /* LCURL */
    case 3: /* RCURL */
    case 4: /* COLON */
    case 5: /* DICT */
    case 6: /* WHERE */
    case 7: /* NAME */
    case 8: /* BITOR */
    case 9: /* FUNCTION_DEC */
    case 10: /* COMPOSITION */
    case 11: /* FUNCTION_CALL */
    case 12: /* PREPEND */
    case 13: /* APPEND */
    case 14: /* INDEX */
    case 15: /* OR */
    case 16: /* AND */
    case 17: /* BITXOR */
    case 18: /* BITAND */
    case 19: /* EQUALTO */
    case 20: /* NOTEQUALTO */
    case 21: /* GREATERTHAN */
    case 22: /* GORE */
    case 23: /* LESSTHAN */
    case 24: /* LORE */
    case 25: /* SHIFTL */
    case 26: /* SHIFTR */
    case 27: /* PLUS */
    case 28: /* MINUS */
    case 29: /* DIVIDE */
    case 30: /* TIMES */
    case 31: /* MODULO */
    case 32: /* POW */
    case 33: /* NOT */
    case 34: /* BITNOT */
    case 35: /* UMINUS */
    case 36: /* PLUSPLUS */
    case 37: /* LPAREN */
    case 38: /* RPAREN */
    case 39: /* LBRAC */
    case 40: /* RBRAC */
    case 41: /* COMMA */
    case 42: /* COLLECTARRAY */
    case 43: /* DELIMITER */
    case 44: /* WILDCARD */
    case 45: /* CASE */
    case 46: /* OF */
    case 47: /* LET */
    case 48: /* IN */
    case 49: /* STRING */
    case 50: /* COLONCOLON */
    case 51: /* PRINT */
    case 52: /* NUM */
    case 53: /* BOOLEAN */
    case 54: /* OPENQUOTEERROR */
{
#line 44 "./src/Grammar/grammar.y"
 token_destructor((yypminor->yy0)); 
#line 1056 "./src/Grammar/grammar.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 58, 1 },
  { 59, 0 },
  { 59, 2 },
  { 59, 3 },
  { 59, 3 },
  { 60, 1 },
  { 62, 1 },
  { 62, 1 },
  { 64, 1 },
  { 65, 1 },
  { 66, 2 },
  { 66, 1 },
  { 56, 1 },
  { 56, 3 },
  { 56, 3 },
  { 67, 4 },
  { 67, 6 },
  { 56, 4 },
  { 67, 3 },
  { 67, 3 },
  { 56, 1 },
  { 61, 1 },
  { 71, 7 },
  { 71, 6 },
  { 72, 6 },
  { 72, 5 },
  { 63, 1 },
  { 63, 3 },
  { 73, 3 },
  { 73, 4 },
  { 75, 4 },
  { 75, 5 },
  { 76, 4 },
  { 74, 1 },
  { 74, 1 },
  { 74, 1 },
  { 77, 4 },
  { 63, 4 },
  { 63, 6 },
  { 63, 8 },
  { 63, 7 },
  { 70, 3 },
  { 61, 2 },
  { 78, 4 },
  { 78, 7 },
  { 78, 6 },
  { 78, 3 },
  { 78, 6 },
  { 78, 5 },
  { 56, 1 },
  { 56, 4 },
  { 79, 3 },
  { 79, 3 },
  { 67, 4 },
  { 56, 1 },
  { 80, 2 },
  { 80, 3 },
  { 81, 2 },
  { 82, 5 },
  { 83, 1 },
  { 68, 1 },
  { 68, 2 },
  { 56, 1 },
  { 83, 3 },
  { 84, 0 },
  { 84, 1 },
  { 56, 1 },
  { 56, 1 },
  { 56, 1 },
  { 56, 4 },
  { 56, 3 },
  { 85, 1 },
  { 86, 1 },
  { 87, 1 },
  { 88, 1 },
  { 88, 1 },
  { 63, 4 },
  { 63, 4 },
  { 89, 5 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 2 },
  { 56, 4 },
  { 56, 2 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 69, 4 },
  { 69, 4 },
  { 69, 4 },
  { 56, 1 },
  { 59, 1 },
  { 55, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 2: /* in ::= in DELIMITER */
      case 3: /* in ::= in start DELIMITER */ yytestcase(yyruleno==3);
      case 4: /* in ::= in test DELIMITER */ yytestcase(yyruleno==4);
#line 92 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 1464 "./src/Grammar/grammar.c"
        break;
      case 5: /* start ::= spec */
#line 98 "./src/Grammar/grammar.y"
{
    optic::resolve_stack_from_parser(yymsp[0].minor.yy0, true);
}
#line 1471 "./src/Grammar/grammar.c"
        break;
      case 6: /* spec ::= assignment */
      case 21: /* test ::= case_statement */ yytestcase(yyruleno==21);
#line 103 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;
}
#line 1479 "./src/Grammar/grammar.c"
        break;
      case 7: /* spec ::= top_stmt */
      case 8: /* top_stmt ::= stmt */ yytestcase(yyruleno==8);
#line 108 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;

}
#line 1488 "./src/Grammar/grammar.c"
        break;
      case 9: /* stmt ::= expr */
#line 120 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;

}
#line 1496 "./src/Grammar/grammar.c"
        break;
      case 10: /* name_chain ::= name_chain NAME */
#line 126 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type!=optic::ARRAY)
    {
        yygotominor.yy0.type = optic::ARRAY;
        yygotominor.yy0.data.array = new optic::Array();

        optic::object newObject1,newObject2;
        newObject1.type = optic::STRING;
        newObject2.type = optic::STRING;
        newObject1.data.string = new panopticon::String(yymsp[-1].minor.yy0.data.string->c_str());
        newObject2.data.string = new panopticon::String(yymsp[0].minor.yy0.data.string->c_str());
        yygotominor.yy0.data.array->push_back(newObject1);
        yygotominor.yy0.data.array->push_back(newObject2);
    }
    else
    {
        yygotominor.yy0.type = optic::ARRAY;
        yygotominor.yy0.data.array = new optic::Array();
        for(int i=0;i<yymsp[-1].minor.yy0.data.array->size();++i)
        {
            optic::object newObject;
            newObject.type = optic::STRING;
            newObject.data.string = new optic::String(*yymsp[-1].minor.yy0.data.array->at(i).data.string);
            yygotominor.yy0.data.array->push_back(newObject);
        }
        optic::object newObject2;
        newObject2.type = optic::STRING;
        newObject2.data.string = new panopticon::String(yymsp[0].minor.yy0.data.string->c_str());
        yygotominor.yy0.data.array->push_back(newObject2);
    }

    // delete_object(yymsp[-1].minor.yy0);
    // delete_object(yymsp[0].minor.yy0);
}
#line 1534 "./src/Grammar/grammar.c"
        break;
      case 11: /* name_chain ::= NAME */
#line 162 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.data.string = new panopticon::String(yymsp[0].minor.yy0.data.string->c_str());
    delete yymsp[0].minor.yy0.data.string;
    yygotominor.yy0.type = panopticon::STRING;
}
#line 1543 "./src/Grammar/grammar.c"
        break;
      case 12: /* expr ::= NAME */
#line 169 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::UNDECLARED_VARIABLE;
    yygotominor.yy0.data.string = new optic::String(yymsp[0].minor.yy0.data.string->c_str());
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 1556 "./src/Grammar/grammar.c"
        break;
      case 13: /* expr ::= expr COMPOSITION function_call */
#line 180 "./src/Grammar/grammar.y"
{
    if(yymsp[0].minor.yy0.type==optic::OPERATION_TREE)
    {
        yymsp[0].minor.yy0.data.array->at(2).data.array->push_front(yymsp[-2].minor.yy0);
        yygotominor.yy0 = yymsp[0].minor.yy0;
    }
    else
    {
        optic::object function_body;
        function_body.type = optic::FUNCTION_ARG_VALUES;
        function_body.data.array = new optic::Array();
        function_body.data.array->push_back(yymsp[-2].minor.yy0);
        yymsp[0].minor.yy0.type = optic::STRING;
        optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
    }
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 1577 "./src/Grammar/grammar.c"
        break;
      case 14: /* expr ::= expr COMPOSITION NAME */
#line 198 "./src/Grammar/grammar.y"
{
    optic::object function_body;
    function_body.type = optic::FUNCTION_ARG_VALUES;
    function_body.data.array = new optic::Array();
    function_body.data.array->push_back(yymsp[-2].minor.yy0);
    yymsp[0].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 1590 "./src/Grammar/grammar.c"
        break;
      case 15: /* function_call ::= NAME LPAREN stmt_list RPAREN */
#line 208 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
        yymsp[-1].minor.yy0.data.array = new optic::Array();
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::object b;
    b.type = optic::STRING;

    b.data.string = new optic::String(yymsp[-3].minor.yy0.data.string->c_str());
    optic::store_operations(yygotominor.yy0,b,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 1619 "./src/Grammar/grammar.c"
        break;
      case 16: /* function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 233 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
        yymsp[-1].minor.yy0.data.array = new optic::Array();
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }

    yymsp[-5].minor.yy0.type = optic::VARIABLE;
    optic::parse_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,39,&yymsp[-4].minor);
  yy_destructor(yypParser,40,&yymsp[-3].minor);
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 1648 "./src/Grammar/grammar.c"
        break;
      case 17: /* expr ::= array_index LPAREN stmt_list RPAREN */
      case 53: /* function_call ::= name_space LPAREN stmt_list RPAREN */ yytestcase(yyruleno==53);
#line 256 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
        yymsp[-1].minor.yy0.data.array = new optic::Array();
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::parse_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 1674 "./src/Grammar/grammar.c"
        break;
      case 18: /* function_call ::= NAME LPAREN RPAREN */
#line 278 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-1].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 1689 "./src/Grammar/grammar.c"
        break;
      case 19: /* function_call ::= array_index LPAREN RPAREN */
#line 289 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-1].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 1703 "./src/Grammar/grammar.c"
        break;
      case 20: /* expr ::= function_call */
      case 33: /* assignment_list ::= vertical_assignment_list */ yytestcase(yyruleno==33);
      case 34: /* assignment_list ::= final_vertical_assignment_list */ yytestcase(yyruleno==34);
      case 35: /* assignment_list ::= horizontal_assignment_list */ yytestcase(yyruleno==35);
      case 54: /* expr ::= name_space */ yytestcase(yyruleno==54);
      case 59: /* array ::= vertical_array */ yytestcase(yyruleno==59);
      case 60: /* stmt_list ::= stmt */ yytestcase(yyruleno==60);
      case 62: /* expr ::= array */ yytestcase(yyruleno==62);
      case 106: /* expr ::= array_index */ yytestcase(yyruleno==106);
#line 299 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 1718 "./src/Grammar/grammar.c"
        break;
      case 22: /* guard_statement ::= name_chain LCURL BITOR expr ASSIGN expr DELIMITER */
#line 311 "./src/Grammar/grammar.y"
{
    optic::object tree = create_condition_tree(yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0 = create_guard(yymsp[-6].minor.yy0,tree);
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 1730 "./src/Grammar/grammar.c"
        break;
      case 23: /* guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER */
#line 317 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 1741 "./src/Grammar/grammar.c"
        break;
      case 24: /* final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCURL */
#line 323 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1752 "./src/Grammar/grammar.c"
        break;
      case 25: /* final_guard_statement ::= guard_statement WILDCARD ASSIGN expr RCURL */
#line 329 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-4].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-4].minor.yy0;
  yy_destructor(yypParser,44,&yymsp[-3].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1763 "./src/Grammar/grammar.c"
        break;
      case 26: /* assignment ::= final_guard_statement */
#line 335 "./src/Grammar/grammar.y"
{
    panopticon::object& b = yymsp[0].minor.yy0.data.array->at(0);
    panopticon::object& c = yymsp[0].minor.yy0.data.array->at(1);

    panopticon::object resolve;
    panopticon::store_operations(resolve, c, &panopticon::resolve_guard,false);

    resolve.type = panopticon::FUNCTION_BODY;
    b.type = optic::FUNCTION_ARG_NAMES;
    panopticon::parse_operations(yygotominor.yy0, b, resolve, &panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 1783 "./src/Grammar/grammar.c"
        break;
      case 27: /* assignment ::= name_chain ASSIGN expr */
#line 353 "./src/Grammar/grammar.y"
{
    insure_ready_for_assignment(yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yymsp[-2].minor.yy0.type = optic::FUNCTION_ARG_NAMES;
    panopticon::parse_operations(yygotominor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 1798 "./src/Grammar/grammar.c"
        break;
      case 28: /* horizontal_assignment_list ::= name_chain ASSIGN expr */
#line 369 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 1809 "./src/Grammar/grammar.c"
        break;
      case 29: /* horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr */
      case 32: /* final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr */ yytestcase(yyruleno==32);
#line 377 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 1820 "./src/Grammar/grammar.c"
        break;
      case 30: /* vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER */
#line 384 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 1832 "./src/Grammar/grammar.c"
        break;
      case 31: /* vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER */
#line 392 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-4].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 1843 "./src/Grammar/grammar.c"
        break;
      case 36: /* where ::= WHERE LCURL assignment_list RCURL */
#line 421 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    optic::object serial_result;
    optic::object result;
    optic::object previous_result;
    for(int i=0;i<yymsp[-1].minor.yy0.data.array->size(); i+=2)
    {
        insure_ready_for_assignment(
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1)
        );
        panopticon::store_operations(
            result,
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1),
            panopticon::assign_variable,
            false
        );
        optic::store_operations(serial_result,previous_result,result);
        previous_result = serial_result;
    }
    yygotominor.yy0 = serial_result;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,6,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1878 "./src/Grammar/grammar.c"
        break;
      case 37: /* assignment ::= name_chain ASSIGN expr expr */
#line 451 "./src/Grammar/grammar.y"
{
    optic::out() << "Error: Cannot declare two statements in a single assignment." << std::endl;
    optic::correct_parsing = false;
    while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
    ParseARG_STORE;
  yy_destructor(yypParser,1,&yymsp[-2].minor);
}
#line 1889 "./src/Grammar/grammar.c"
        break;
      case 38: /* assignment ::= name_chain ASSIGN expr LCURL where RCURL */
#line 459 "./src/Grammar/grammar.y"
{
    panopticon::object body;
    panopticon::store_operations(body,yymsp[-1].minor.yy0,yymsp[-3].minor.yy0,false);
    insure_ready_for_assignment(yymsp[-5].minor.yy0,body);
    panopticon::parse_operations(yygotominor.yy0, yymsp[-5].minor.yy0, body, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1907 "./src/Grammar/grammar.c"
        break;
      case 39: /* assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCURL */
#line 472 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-7].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    panopticon::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(yymsp[-7].minor.yy0,combined);
    panopticon::store_operations(yygotominor.yy0, yymsp[-7].minor.yy0, combined, panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1933 "./src/Grammar/grammar.c"
        break;
      case 40: /* assignment ::= guard_statement WILDCARD ASSIGN expr DELIMITER where RCURL */
#line 492 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-6].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-6].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-6].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    optic::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(b,combined);
    panopticon::parse_operations(yygotominor.yy0, b, combined, &panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,44,&yymsp[-5].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1959 "./src/Grammar/grammar.c"
        break;
      case 41: /* case_statement ::= CASE expr OF */
#line 516 "./src/Grammar/grammar.y"
{
/*    yygotominor.yy0=B;*/
    yygotominor.yy0.type = optic::GUARD;
  yy_destructor(yypParser,45,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 1969 "./src/Grammar/grammar.c"
        break;
      case 42: /* test ::= LET IN */
#line 521 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,47,&yymsp[-1].minor);
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 1977 "./src/Grammar/grammar.c"
        break;
      case 43: /* dict ::= DICT LCURL assignment_list RCURL */
#line 534 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,5,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1987 "./src/Grammar/grammar.c"
        break;
      case 44: /* dict ::= LCURL DICT LCURL assignment_list RCURL DELIMITER RCURL */
#line 539 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-6].minor);
  yy_destructor(yypParser,5,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,43,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2000 "./src/Grammar/grammar.c"
        break;
      case 45: /* dict ::= LCURL DICT LCURL assignment_list RCURL RCURL */
#line 544 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,5,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2012 "./src/Grammar/grammar.c"
        break;
      case 46: /* dict ::= LCURL assignment_list RCURL */
#line 549 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2021 "./src/Grammar/grammar.c"
        break;
      case 47: /* dict ::= LCURL LCURL assignment_list RCURL DELIMITER RCURL */
#line 554 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,43,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2033 "./src/Grammar/grammar.c"
        break;
      case 48: /* dict ::= LCURL LCURL assignment_list RCURL RCURL */
#line 559 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2044 "./src/Grammar/grammar.c"
        break;
      case 49: /* expr ::= dict */
#line 564 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::DICTIONARY;
    yygotominor.yy0.data.dictionary = new optic::Dictionary();
    for(int i=0;i<yymsp[0].minor.yy0.data.array->size()-1;i+=2)
    {
        if(
            yymsp[0].minor.yy0.data.array->at(i).type != optic::ARRAY
        )
        {
            yygotominor.yy0.data.dictionary->insert(
                std::make_pair(
                    *yymsp[0].minor.yy0.data.array->at(i).data.string,
                    yymsp[0].minor.yy0.data.array->at(i+1)
                    )
            );
        }
        else
        {
            insure_ready_for_assignment(yymsp[0].minor.yy0.data.array->at(i),yymsp[0].minor.yy0.data.array->at(i+1));

            optic::object result;
            panopticon::parse_operations(
                result,
                yymsp[0].minor.yy0.data.array->at(i),
                yymsp[0].minor.yy0.data.array->at(i+1),
                panopticon::assign_variable
            );

            yygotominor.yy0.data.dictionary->insert(
                std::make_pair(
                    *yymsp[0].minor.yy0.data.array->at(i).data.array->at(0).data.string,
                    yymsp[0].minor.yy0.data.array->at(i+1)
                    )
            );
        }
    }

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2091 "./src/Grammar/grammar.c"
        break;
      case 50: /* expr ::= NAME LCURL STRING RCURL */
#line 610 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yymsp[-1].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2107 "./src/Grammar/grammar.c"
        break;
      case 51: /* name_space ::= NAME COLONCOLON NAME */
#line 622 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,50,&yymsp[-1].minor);
}
#line 2122 "./src/Grammar/grammar.c"
        break;
      case 52: /* name_space ::= name_space COLONCOLON NAME */
#line 634 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,50,&yymsp[-1].minor);
}
#line 2136 "./src/Grammar/grammar.c"
        break;
      case 55: /* vert_stmt_list ::= stmt DELIMITER */
#line 674 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 2144 "./src/Grammar/grammar.c"
        break;
      case 56: /* vert_stmt_list ::= vert_stmt_list stmt DELIMITER */
#line 679 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-2].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = mem_alloc(optic::ARRAY);
        yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-2].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
  yy_destructor(yypParser,43,&yymsp[0].minor);
}
#line 2163 "./src/Grammar/grammar.c"
        break;
      case 57: /* final_vert_stmt_list ::= vert_stmt_list stmt */
      case 61: /* stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==61);
#line 695 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-1].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-1].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 2182 "./src/Grammar/grammar.c"
        break;
      case 58: /* vertical_array ::= LBRAC LCURL final_vert_stmt_list RCURL RBRAC */
#line 713 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,39,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,40,&yymsp[0].minor);
}
#line 2194 "./src/Grammar/grammar.c"
        break;
      case 63: /* array ::= LBRAC maybe_empty_stmt_list RBRAC */
#line 750 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,39,&yymsp[-2].minor);
  yy_destructor(yypParser,40,&yymsp[0].minor);
}
#line 2204 "./src/Grammar/grammar.c"
        break;
      case 64: /* maybe_empty_stmt_list ::= */
#line 756 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = mem_alloc(optic::STATEMENT_LIST);
}
#line 2211 "./src/Grammar/grammar.c"
        break;
      case 65: /* maybe_empty_stmt_list ::= stmt_list */
#line 761 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[0].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[0].minor.yy0.data.array;
    }
}
#line 2227 "./src/Grammar/grammar.c"
        break;
      case 66: /* expr ::= num */
      case 68: /* expr ::= bool */ yytestcase(yyruleno==68);
#line 779 "./src/Grammar/grammar.y"
{
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2235 "./src/Grammar/grammar.c"
        break;
      case 67: /* expr ::= string */
#line 784 "./src/Grammar/grammar.y"
{
   create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2242 "./src/Grammar/grammar.c"
        break;
      case 69: /* expr ::= PRINT LPAREN expr RPAREN */
#line 798 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&optic::unary_print_object,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,51,&yymsp[-3].minor);
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 2257 "./src/Grammar/grammar.c"
        break;
      case 70: /* expr ::= LPAREN expr RPAREN */
#line 808 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 2266 "./src/Grammar/grammar.c"
        break;
      case 71: /* num ::= NUM */
#line 813 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2274 "./src/Grammar/grammar.c"
        break;
      case 72: /* string ::= STRING */
#line 819 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::STRING;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2282 "./src/Grammar/grammar.c"
        break;
      case 73: /* bool ::= BOOLEAN */
#line 826 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::BOOL;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2290 "./src/Grammar/grammar.c"
        break;
      case 74: /* maybe_empty_name_chain ::= name_chain */
#line 837 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yymsp[0].minor.yy0.type = optic::STRING;
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2300 "./src/Grammar/grammar.c"
        break;
      case 75: /* maybe_empty_name_chain ::= pattern */
#line 844 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2309 "./src/Grammar/grammar.c"
        break;
      case 76: /* assignment ::= name_chain maybe_empty_name_chain ASSIGN expr */
      case 77: /* assignment ::= NAME maybe_empty_name_chain ASSIGN expr */ yytestcase(yyruleno==77);
#line 851 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2318 "./src/Grammar/grammar.c"
        break;
      case 78: /* pattern ::= LPAREN NAME PREPEND NAME RPAREN */
#line 861 "./src/Grammar/grammar.y"
{
/*    std::cout << "PATTERN_ARGUMENT" << std::endl;*/
    yymsp[-3].minor.yy0.type = optic::PATTERN;
    yymsp[-1].minor.yy0.type = optic::PATTERN;
    yygotominor.yy0.type = optic::PATTERN;
    yygotominor.yy0.data.string = new optic::String("PATTERN ARGUMENT!");
  yy_destructor(yypParser,37,&yymsp[-4].minor);
  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 2332 "./src/Grammar/grammar.c"
        break;
      case 79: /* expr ::= expr PREPEND expr */
#line 870 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::prepend,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,12,&yymsp[-1].minor);
}
#line 2345 "./src/Grammar/grammar.c"
        break;
      case 80: /* expr ::= expr APPEND expr */
#line 880 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::append,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2358 "./src/Grammar/grammar.c"
        break;
      case 81: /* expr ::= expr PLUSPLUS expr */
#line 890 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::concat,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
#line 2371 "./src/Grammar/grammar.c"
        break;
      case 82: /* expr ::= expr PLUS expr */
#line 900 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::plus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2384 "./src/Grammar/grammar.c"
        break;
      case 83: /* expr ::= expr MINUS expr */
#line 910 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,28,&yymsp[-1].minor);
}
#line 2397 "./src/Grammar/grammar.c"
        break;
      case 84: /* expr ::= expr DIVIDE expr */
#line 920 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::divide);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
#line 2410 "./src/Grammar/grammar.c"
        break;
      case 85: /* expr ::= expr TIMES expr */
#line 930 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::multiply);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,30,&yymsp[-1].minor);
}
#line 2423 "./src/Grammar/grammar.c"
        break;
      case 86: /* expr ::= expr MODULO expr */
#line 940 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::modulo);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,31,&yymsp[-1].minor);
}
#line 2436 "./src/Grammar/grammar.c"
        break;
      case 87: /* expr ::= expr POW expr */
#line 950 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_pow);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
#line 2449 "./src/Grammar/grammar.c"
        break;
      case 88: /* expr ::= expr EQUALTO expr */
#line 960 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 2462 "./src/Grammar/grammar.c"
        break;
      case 89: /* expr ::= expr NOTEQUALTO expr */
#line 970 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::not_equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 2475 "./src/Grammar/grammar.c"
        break;
      case 90: /* expr ::= expr LESSTHAN expr */
#line 980 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::less_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,23,&yymsp[-1].minor);
}
#line 2488 "./src/Grammar/grammar.c"
        break;
      case 91: /* expr ::= expr GREATERTHAN expr */
#line 990 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::greater_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,21,&yymsp[-1].minor);
}
#line 2501 "./src/Grammar/grammar.c"
        break;
      case 92: /* expr ::= expr LORE expr */
#line 1000 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::lore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,24,&yymsp[-1].minor);
}
#line 2514 "./src/Grammar/grammar.c"
        break;
      case 93: /* expr ::= expr GORE expr */
#line 1010 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::gore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,22,&yymsp[-1].minor);
}
#line 2527 "./src/Grammar/grammar.c"
        break;
      case 94: /* expr ::= expr AND expr */
#line 1020 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2540 "./src/Grammar/grammar.c"
        break;
      case 95: /* expr ::= expr OR expr */
#line 1030 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_or);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2553 "./src/Grammar/grammar.c"
        break;
      case 96: /* expr ::= BITNOT expr */
#line 1040 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&optic::bit_not);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
#line 2566 "./src/Grammar/grammar.c"
        break;
      case 97: /* expr ::= LPAREN MINUS expr RPAREN */
#line 1050 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&panopticon::u_minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-3].minor);
  yy_destructor(yypParser,28,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
#line 2581 "./src/Grammar/grammar.c"
        break;
      case 98: /* expr ::= NOT expr */
#line 1060 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&panopticon::not_value);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
#line 2594 "./src/Grammar/grammar.c"
        break;
      case 99: /* expr ::= expr SHIFTL expr */
#line 1070 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_left);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,25,&yymsp[-1].minor);
}
#line 2607 "./src/Grammar/grammar.c"
        break;
      case 100: /* expr ::= expr SHIFTR expr */
#line 1080 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_right);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 2620 "./src/Grammar/grammar.c"
        break;
      case 101: /* expr ::= expr BITAND expr */
#line 1090 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2633 "./src/Grammar/grammar.c"
        break;
      case 102: /* expr ::= expr BITXOR expr */
#line 1100 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_xor);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2646 "./src/Grammar/grammar.c"
        break;
      case 103: /* array_index ::= function_call LBRAC expr RBRAC */
      case 105: /* array_index ::= array_index LBRAC expr RBRAC */ yytestcase(yyruleno==105);
#line 1110 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,39,&yymsp[-2].minor);
  yy_destructor(yypParser,40,&yymsp[0].minor);
}
#line 2661 "./src/Grammar/grammar.c"
        break;
      case 104: /* array_index ::= NAME LBRAC expr RBRAC */
#line 1120 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,39,&yymsp[-2].minor);
  yy_destructor(yypParser,40,&yymsp[0].minor);
}
#line 2676 "./src/Grammar/grammar.c"
        break;
      case 107: /* in ::= error */
#line 1150 "./src/Grammar/grammar.y"
{
    switch(yymsp[0].minor.yy181)
    {
    case panopticon::OpenQuoteError:
/*        panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;*/
        break;
    default:
/*        panopticon::out() << "ERROR p0000: UnknownError" << std::endl;*/
        break;
    }
}
#line 2691 "./src/Grammar/grammar.c"
        break;
      case 108: /* error ::= OPENQUOTEERROR */
#line 1163 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy181 = panopticon::OpenQuoteError;
    panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;
}
#line 2700 "./src/Grammar/grammar.c"
        break;
      default:
      /* (0) main ::= in */ yytestcase(yyruleno==0);
      /* (1) in ::= */ yytestcase(yyruleno==1);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 86 "./src/Grammar/grammar.y"

panopticon::out() << "Syntax error!" << std::endl;
#line 2767 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 81 "./src/Grammar/grammar.y"

printf("parsing complete!\n\n\n");
#line 2789 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
