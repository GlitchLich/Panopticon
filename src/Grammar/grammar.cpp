/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 3 "./src/Grammar/grammar.y"

#include <iostream>
#include "../../include/Grammar/tokens.h"
#include "../../include/Grammar/grammar.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
/*#include "lexglobal.h"*/
#include <assert.h>
#include <math.h>
#define BUFS 1024
#include <stdio.h>
#include <string.h>
#include "core/operators.h"
#include "../../include/Grammar/parsingutilities.h"
#include "../../include/core/types.h"
#include "../../include/Grammar/parse.h"
#include "../../include/core/errors.h"
#include "../../include/core/heap.h"
#include "include/core/stack.h"
#include "core/Memory.h"

#undef STRING
#undef NUM
#undef BOOL
#undef panopticon::ARRAY

/*using namespace panopticon;*/

    void token_destructor(Token t)
    {
/*        std::cout << "token_destructor()" << std::endl;*/
        //TO DO: Do we need to free the tokens or not? I don't think so...
/*        mem_free(t);*/
    }
#line 46 "./src/Grammar/grammar.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 94
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy187;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 396
#define YYNRULE 171
#define YYERRORSYMBOL 58
#define YYERRSYMDT yy187
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (4619)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   119,  339,  103,  229,    6,  265,   18,  190,  394,  264,
 /*    10 */     9,  110,   19,  101,  100,  388,   85,   86,   81,   82,
 /*    20 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*    30 */    96,   95,   94,   93,   76,   77,  202,   99,    5,   51,
 /*    40 */    23,    2,  248,  341,  113,  120,  342,  205,  337,  191,
 /*    50 */   263,  371,  370,  369,   98,   97,   96,   95,   94,   93,
 /*    60 */   187,   74,  266,   99,  110,   25,  101,  100,  231,   85,
 /*    70 */    86,   81,   82,   92,   91,   89,   87,   90,   88,   84,
 /*    80 */    83,   98,   97,   96,   95,   94,   93,  168,  393,  247,
 /*    90 */    99,  268,  267,  392,  391,  390,  389,  109,  203,  107,
 /*   100 */   204,  278,  210,  273,   57,  219,  221,   79,   23,  382,
 /*   110 */   375,  189,  284,  370,  378,  377,  270,  376,  374,  568,
 /*   120 */     1,  110,  381,   24,  100,   78,   85,   86,   81,   82,
 /*   130 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*   140 */    96,   95,   94,   93,  215,   93,  344,   99,   72,   99,
 /*   150 */   383,  110,  354,   22,  100,  366,   85,   86,   81,   82,
 /*   160 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*   170 */    96,   95,   94,   93,  193,  336,  365,   99,   68,  383,
 /*   180 */   383,  110,  328,   21,  100,  259,   85,   86,   81,   82,
 /*   190 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*   200 */    96,   95,   94,   93,  192,  364,  363,   99,   65,  360,
 /*   210 */   383,  110,  312,   20,  100,  213,   85,   86,   81,   82,
 /*   220 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*   230 */    96,   95,   94,   93,  276,  358,  355,   99,   62,  353,
 /*   240 */   229,    6,  293,   18,  110,    8,  101,  100,  106,   85,
 /*   250 */    86,   81,   82,   92,   91,   89,   87,   90,   88,   84,
 /*   260 */    83,   98,   97,   96,   95,   94,   93,  102,  275,  105,
 /*   270 */    99,   80,  350,  348,  249,  385,  383,  118,  110,  385,
 /*   280 */   101,  100,  346,   85,   86,   81,   82,   92,   91,   89,
 /*   290 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   300 */    93,  340,  338,  334,   99,  332,  329,  110,  220,  101,
 /*   310 */   100,  117,   85,   86,   81,   82,   92,   91,   89,   87,
 /*   320 */    90,   88,   84,   83,   98,   97,   96,   95,   94,   93,
 /*   330 */   216,  280,  327,   99,  325,  323,  110,  321,  101,  100,
 /*   340 */   384,   85,   86,   81,   82,   92,   91,   89,   87,   90,
 /*   350 */    88,   84,   83,   98,   97,   96,   95,   94,   93,  318,
 /*   360 */   316,  313,   99,  110,  220,  101,  100,  379,   85,   86,
 /*   370 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*   380 */    98,   97,   96,   95,   94,   93,  211,  280,  110,   99,
 /*   390 */   101,  100,  373,   85,   86,   81,   82,   92,   91,   89,
 /*   400 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   410 */    93,  311,    7,  110,   99,  101,  100,  372,   85,   86,
 /*   420 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*   430 */    98,   97,   96,   95,   94,   93,  308,  306,  110,   99,
 /*   440 */   101,  100,  368,   85,   86,   81,   82,   92,   91,   89,
 /*   450 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   460 */    93,  304,  300,  302,   99,   81,   82,   92,   91,   89,
 /*   470 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   480 */    93,   73,  301,  299,   99,   84,   83,   98,   97,   96,
 /*   490 */    95,   94,   93,  282,  297,  110,   99,  101,  100,  383,
 /*   500 */    85,   86,   81,   82,   92,   91,   89,   87,   90,   88,
 /*   510 */    84,   83,   98,   97,   96,   95,   94,   93,  294,  292,
 /*   520 */   290,   99,  110,  288,   48,  100,  367,   85,   86,   81,
 /*   530 */    82,   92,   91,   89,   87,   90,   88,   84,   83,   98,
 /*   540 */    97,   96,   95,   94,   93,  286,  335,  385,   99,  110,
 /*   550 */    59,   47,  100,  352,   85,   86,   81,   82,   92,   91,
 /*   560 */    89,   87,   90,   88,   84,   83,   98,   97,   96,   95,
 /*   570 */    94,   93,  104,   56,  281,   99,  110,  214,   45,  100,
 /*   580 */   347,   85,   86,   81,   82,   92,   91,   89,   87,   90,
 /*   590 */    88,   84,   83,   98,   97,   96,   95,   94,   93,  213,
 /*   600 */   212,  279,   99,  110,   55,  101,  100,  345,   85,   86,
 /*   610 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*   620 */    98,   97,   96,   95,   94,   93,   26,  277,   53,   99,
 /*   630 */   271,  274,  110,  194,   42,  100,  343,   85,   86,   81,
 /*   640 */    82,   92,   91,   89,   87,   90,   88,   84,   83,   98,
 /*   650 */    97,   96,   95,   94,   93,  217,  383,  218,   99,  110,
 /*   660 */   209,   41,  100,  326,   85,   86,   81,   82,   92,   91,
 /*   670 */    89,   87,   90,   88,   84,   83,   98,   97,   96,   95,
 /*   680 */    94,   93,  207,  197,  188,   99,  110,  230,   39,  100,
 /*   690 */   322,   85,   86,   81,   82,   92,   91,   89,   87,   90,
 /*   700 */    88,   84,   83,   98,   97,   96,   95,   94,   93,  269,
 /*   710 */   569,  569,   99,  110,  569,   36,  100,  320,   85,   86,
 /*   720 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*   730 */    98,   97,   96,   95,   94,   93,  569,  569,  569,   99,
 /*   740 */   110,  569,   35,  100,  310,   85,   86,   81,   82,   92,
 /*   750 */    91,   89,   87,   90,   88,   84,   83,   98,   97,   96,
 /*   760 */    95,   94,   93,  569,  569,  569,   99,  110,  569,   33,
 /*   770 */   100,  305,   85,   86,   81,   82,   92,   91,   89,   87,
 /*   780 */    90,   88,   84,   83,   98,   97,   96,   95,   94,   93,
 /*   790 */   569,  569,  569,   99,  110,  569,   30,  100,  303,   85,
 /*   800 */    86,   81,   82,   92,   91,   89,   87,   90,   88,   84,
 /*   810 */    83,   98,   97,   96,   95,   94,   93,  569,  569,  569,
 /*   820 */    99,  110,  569,   29,  100,  291,   85,   86,   81,   82,
 /*   830 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*   840 */    96,   95,   94,   93,  569,  569,  569,   99,  110,  569,
 /*   850 */    27,  100,  287,   85,   86,   81,   82,   92,   91,   89,
 /*   860 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   870 */    93,   58,   69,  569,   99,   96,   95,   94,   93,  285,
 /*   880 */   385,  569,   99,  110,  569,  101,  100,  569,   85,   86,
 /*   890 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*   900 */    98,   97,   96,   95,   94,   93,  569,  569,  110,   99,
 /*   910 */   101,  100,  569,   85,   86,   81,   82,   92,   91,   89,
 /*   920 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   930 */    93,   54,  569,  569,   99,  569,  569,  569,  569,  569,
 /*   940 */   569,  283,  569,  110,  569,  101,  100,  569,   85,   86,
 /*   950 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*   960 */    98,   97,   96,   95,   94,   93,  569,  569,  110,   99,
 /*   970 */   101,  100,  569,   85,   86,   81,   82,   92,   91,   89,
 /*   980 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*   990 */    93,  569,  569,  569,   99,  569,  569,  569,  569,  569,
 /*  1000 */   110,  569,  101,  100,  272,   85,   86,   81,   82,   92,
 /*  1010 */    91,   89,   87,   90,   88,   84,   83,   98,   97,   96,
 /*  1020 */    95,   94,   93,  569,   50,  100,   99,   85,   86,   81,
 /*  1030 */    82,   92,   91,   89,   87,   90,   88,   84,   83,   98,
 /*  1040 */    97,   96,   95,   94,   93,  569,  569,  569,   99,  569,
 /*  1050 */   569,   49,  100,  357,   85,   86,   81,   82,   92,   91,
 /*  1060 */    89,   87,   90,   88,   84,   83,   98,   97,   96,   95,
 /*  1070 */    94,   93,  569,  569,  569,   99,  569,  569,   46,  100,
 /*  1080 */   359,   85,   86,   81,   82,   92,   91,   89,   87,   90,
 /*  1090 */    88,   84,   83,   98,   97,   96,   95,   94,   93,  569,
 /*  1100 */   569,  569,   99,  569,  569,   44,  100,  349,   85,   86,
 /*  1110 */    81,   82,   92,   91,   89,   87,   90,   88,   84,   83,
 /*  1120 */    98,   97,   96,   95,   94,   93,  569,  569,  569,   99,
 /*  1130 */   569,  569,   43,  100,  331,   85,   86,   81,   82,   92,
 /*  1140 */    91,   89,   87,   90,   88,   84,   83,   98,   97,   96,
 /*  1150 */    95,   94,   93,  569,  569,  569,   99,  569,  569,   40,
 /*  1160 */   100,  333,   85,   86,   81,   82,   92,   91,   89,   87,
 /*  1170 */    90,   88,   84,   83,   98,   97,   96,   95,   94,   93,
 /*  1180 */   569,  569,  569,   99,  569,  569,   38,  100,  324,   85,
 /*  1190 */    86,   81,   82,   92,   91,   89,   87,   90,   88,   84,
 /*  1200 */    83,   98,   97,   96,   95,   94,   93,  569,  569,  569,
 /*  1210 */    99,  569,  569,   37,  100,  315,   85,   86,   81,   82,
 /*  1220 */    92,   91,   89,   87,   90,   88,   84,   83,   98,   97,
 /*  1230 */    96,   95,   94,   93,  569,  569,  569,   99,  569,  569,
 /*  1240 */    34,  100,  317,   85,   86,   81,   82,   92,   91,   89,
 /*  1250 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*  1260 */    93,  569,  569,  569,   99,  569,  569,   32,  100,  307,
 /*  1270 */    85,   86,   81,   82,   92,   91,   89,   87,   90,   88,
 /*  1280 */    84,   83,   98,   97,   96,   95,   94,   93,  569,  569,
 /*  1290 */   569,   99,  569,  569,   31,  100,  296,   85,   86,   81,
 /*  1300 */    82,   92,   91,   89,   87,   90,   88,   84,   83,   98,
 /*  1310 */    97,   96,   95,   94,   93,  569,  569,  569,   99,  569,
 /*  1320 */   569,   28,  100,  298,   85,   86,   81,   82,   92,   91,
 /*  1330 */    89,   87,   90,   88,   84,   83,   98,   97,   96,   95,
 /*  1340 */    94,   93,  569,  569,  569,   99,  569,  569,  101,  100,
 /*  1350 */   289,   85,   86,   81,   82,   92,   91,   89,   87,   90,
 /*  1360 */    88,   84,   83,   98,   97,   96,   95,   94,   93,  569,
 /*  1370 */   569,  569,   99,   85,   86,   81,   82,   92,   91,   89,
 /*  1380 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*  1390 */    93,  569,  569,  569,   99,   86,   81,   82,   92,   91,
 /*  1400 */    89,   87,   90,   88,   84,   83,   98,   97,   96,   95,
 /*  1410 */    94,   93,  569,  569,  569,   99,   82,   92,   91,   89,
 /*  1420 */    87,   90,   88,   84,   83,   98,   97,   96,   95,   94,
 /*  1430 */    93,  569,  569,  569,   99,  569,  569,  569,   92,   91,
 /*  1440 */    89,   87,   90,   88,   84,   83,   98,   97,   96,   95,
 /*  1450 */    94,   93,  396,  569,  569,   99,  103,  569,  569,  265,
 /*  1460 */   569,  108,  569,   89,   87,   90,   88,   84,   83,   98,
 /*  1470 */    97,   96,   95,   94,   93,  569,  407,  407,   99,  112,
 /*  1480 */   569,  569,  569,  569,  407,  569,  569,  569,   76,   77,
 /*  1490 */   569,  569,  569,   51,  569,    2,  569,  569,  395,  569,
 /*  1500 */    52,  569,  206,  569,  263,  371,  370,  369,  168,  103,
 /*  1510 */   569,  569,  265,  569,  190,  229,    4,  262,   18,  203,
 /*  1520 */    71,  204,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  1530 */   382,  375,  189,   16,  260,  378,  377,  569,  376,  374,
 /*  1540 */   569,   76,   77,  569,  569,   70,   51,  569,    2,  253,
 /*  1550 */   103,  569,  569,  265,  569,  190,  569,  263,  371,  370,
 /*  1560 */   369,   64,  569,  202,  569,  569,  569,  569,  202,  569,
 /*  1570 */   341,  115,  120,  342,  569,  341,  114,  120,  342,  569,
 /*  1580 */   569,  569,   76,   77,  569,  569,   63,   51,  569,    2,
 /*  1590 */   235,  103,  569,  569,  265,  569,  190,  569,  263,  371,
 /*  1600 */   370,  369,   61,  202,  569,  569,  569,  569,  202,  569,
 /*  1610 */   341,  111,  120,  342,  569,  341,  116,  120,  342,  569,
 /*  1620 */   569,  569,  569,   76,   77,  569,  569,   60,   51,  103,
 /*  1630 */     2,  569,  265,  569,  190,  569,  569,  569,  569,  263,
 /*  1640 */   371,  370,  369,  569,  569,  569,  569,  569,  569,  569,
 /*  1650 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  255,
 /*  1660 */   569,   76,   77,  569,  569,  569,   51,  569,    2,  356,
 /*  1670 */   569,  103,  569,  569,  265,  569,  190,  263,  371,  370,
 /*  1680 */   369,  569,   67,  569,  569,  569,  569,  569,  569,  569,
 /*  1690 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  1700 */   569,  569,  168,   76,   77,  569,  569,   66,   51,  103,
 /*  1710 */     2,  261,  265,  203,  190,  204,  569,  569,  569,  263,
 /*  1720 */   371,  370,  369,  569,  382,  375,  189,  569,  569,  378,
 /*  1730 */   377,  569,  376,  374,  569,  569,  569,  569,  569,  244,
 /*  1740 */   151,   76,   77,  569,  569,  569,   51,  103,    2,  330,
 /*  1750 */   265,  203,  190,  204,  569,  569,  569,  263,  371,  370,
 /*  1760 */   369,  569,  382,  375,  189,  569,  569,  378,  377,  569,
 /*  1770 */   376,  374,  569,  569,  569,  569,  569,  237,  569,   76,
 /*  1780 */    77,  169,  569,  569,   51,  103,    2,  314,  265,  569,
 /*  1790 */   190,  569,  203,  569,  204,  263,  371,  370,  369,  569,
 /*  1800 */   569,  569,  569,  382,  375,  189,  569,  569,  378,  377,
 /*  1810 */   569,  376,  374,  569,  569,  226,  569,   76,   77,  127,
 /*  1820 */   569,  569,   51,  569,    2,  295,  569,  569,  362,  569,
 /*  1830 */   203,   15,  204,  263,  371,  370,  369,  569,  569,  569,
 /*  1840 */   569,  382,  375,  189,  168,  569,  378,  377,  258,  376,
 /*  1850 */   374,  103,  569,  361,  265,  203,  190,  204,  569,  103,
 /*  1860 */   569,  569,  265,  569,  190,  569,  382,  375,  189,  569,
 /*  1870 */   569,  378,  377,  569,  376,  374,  569,  569,   75,  569,
 /*  1880 */   569,  569,  569,   76,   77,  569,  569,  569,   51,  256,
 /*  1890 */     2,   76,   77,  569,  569,  569,   51,  569,    2,  263,
 /*  1900 */   371,  370,  369,  569,  569,  569,  569,  263,  371,  370,
 /*  1910 */   369,  569,  103,  569,  569,  265,  569,  190,  569,  569,
 /*  1920 */   103,  569,  569,  265,  569,  190,  569,  569,  569,  569,
 /*  1930 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  1940 */   569,  569,  257,  569,   76,   77,  569,  569,  569,   51,
 /*  1950 */   254,    2,   76,   77,  569,  569,  569,   51,  569,    2,
 /*  1960 */   263,  371,  370,  369,  569,  569,  569,  569,  263,  371,
 /*  1970 */   370,  369,  569,  103,  569,  569,  265,  569,  190,  569,
 /*  1980 */   569,  103,  569,  569,  265,  569,  190,  569,  569,  569,
 /*  1990 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2000 */   569,  569,  569,  251,  569,   76,   77,  569,  569,  569,
 /*  2010 */    51,  252,    2,   76,   77,  569,  569,  569,   51,  569,
 /*  2020 */     2,  263,  371,  370,  369,  569,  569,  569,  569,  263,
 /*  2030 */   371,  370,  369,  569,  103,  569,  569,  265,  569,  190,
 /*  2040 */   569,  569,  103,  569,  569,  265,  569,  190,  569,  569,
 /*  2050 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2060 */   569,  569,  569,  569,  250,  569,   76,   77,  569,  569,
 /*  2070 */   569,   51,  245,    2,   76,   77,  569,  569,  569,   51,
 /*  2080 */   569,    2,  263,  371,  370,  369,  569,  569,  569,  569,
 /*  2090 */   263,  371,  370,  369,  569,  103,  569,  569,  265,  569,
 /*  2100 */   190,  569,  569,  103,  569,  569,  265,  569,  190,  569,
 /*  2110 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2120 */   569,  569,  569,  569,  569,  246,  569,   76,   77,  569,
 /*  2130 */   569,  569,   51,  243,    2,   76,   77,  569,  569,  569,
 /*  2140 */    51,  569,    2,  263,  371,  370,  369,  569,  569,  569,
 /*  2150 */   569,  263,  371,  370,  369,  569,  103,  569,  569,  265,
 /*  2160 */   569,  190,  569,  569,  103,  569,  569,  265,  569,  190,
 /*  2170 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2180 */   569,  569,  569,  569,  569,  569,  241,  569,   76,   77,
 /*  2190 */   569,  569,  569,   51,  242,    2,   76,   77,  569,  569,
 /*  2200 */   569,   51,  569,    2,  263,  371,  370,  369,  569,  569,
 /*  2210 */   569,  569,  263,  371,  370,  369,  569,  103,  569,  569,
 /*  2220 */   265,  569,  190,  569,  569,  103,  569,  569,  265,  569,
 /*  2230 */   190,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2240 */   569,  569,  569,  569,  569,  569,  569,  240,  569,   76,
 /*  2250 */    77,  569,  569,  569,   51,  238,    2,   76,   77,  569,
 /*  2260 */   569,  569,   51,  569,    2,  263,  371,  370,  369,  569,
 /*  2270 */   569,  569,  569,  263,  371,  370,  369,  569,  103,  569,
 /*  2280 */   569,  265,  569,  190,  569,  569,  103,  569,  569,  265,
 /*  2290 */   569,  190,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2300 */   569,  569,  569,  569,  569,  569,  569,  569,  239,  569,
 /*  2310 */    76,   77,  569,  569,  569,   51,  236,    2,   76,   77,
 /*  2320 */   569,  569,  569,   51,  569,    2,  263,  371,  370,  369,
 /*  2330 */   569,  569,  569,  569,  263,  371,  370,  369,  569,  103,
 /*  2340 */   569,  569,  265,  569,  190,  569,  569,  103,  569,  569,
 /*  2350 */   265,  569,  190,  569,  569,  569,  569,  569,  569,  569,
 /*  2360 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  233,
 /*  2370 */   569,   76,   77,  569,  569,  569,   51,  234,    2,   76,
 /*  2380 */    77,  569,  569,  569,   51,  569,    2,  263,  371,  370,
 /*  2390 */   369,  569,  569,  569,  569,  263,  371,  370,  369,  569,
 /*  2400 */   103,  569,  569,  265,  569,  190,  569,  569,  103,  569,
 /*  2410 */   569,  265,  569,  190,  569,  569,  569,  569,  569,  569,
 /*  2420 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2430 */   232,  569,   76,   77,  569,  569,  569,   51,  227,    2,
 /*  2440 */    76,   77,  569,  569,  569,   51,  569,    2,  263,  371,
 /*  2450 */   370,  369,  569,  569,  569,  569,  263,  371,  370,  369,
 /*  2460 */   569,  103,  569,  569,  265,  569,  190,  569,  569,  103,
 /*  2470 */   569,  569,  265,  569,  190,  569,  569,  569,  569,  569,
 /*  2480 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2490 */   569,  228,  569,   76,   77,  569,  569,  569,   51,  225,
 /*  2500 */     2,   76,   77,  569,  569,  569,   51,  569,    2,  263,
 /*  2510 */   371,  370,  369,  569,  569,  569,  569,  263,  371,  370,
 /*  2520 */   369,  569,  103,  569,  569,  265,  569,  190,  569,  569,
 /*  2530 */   103,  569,  569,  265,  569,  190,  569,  569,  569,  569,
 /*  2540 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2550 */   569,  569,  223,  569,   76,   77,  569,  569,  569,   51,
 /*  2560 */   224,    2,   76,   77,  569,  569,  569,   51,  569,    2,
 /*  2570 */   263,  371,  370,  369,  569,  569,  569,  569,  263,  371,
 /*  2580 */   370,  369,  569,  103,  569,  569,  265,  569,  190,  569,
 /*  2590 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2600 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2610 */   569,  569,  569,  222,  569,   76,   77,  569,  103,  569,
 /*  2620 */    51,  265,    2,  190,  569,  569,  569,  569,  569,  569,
 /*  2630 */   569,  263,  371,  370,  369,  569,  569,  569,  103,  569,
 /*  2640 */   569,  265,  569,  190,  569,  569,  569,  569,  569,  569,
 /*  2650 */    76,   77,  569,  569,  569,   51,  569,    2,  569,  569,
 /*  2660 */   103,  208,  569,  265,  569,  190,  263,  371,  370,  369,
 /*  2670 */    76,   77,  569,  569,  569,   51,  387,    2,  569,  569,
 /*  2680 */   103,  569,  569,  265,  569,  190,  263,  371,  370,  369,
 /*  2690 */   569,  569,   76,   77,  569,  569,  569,   51,  386,    2,
 /*  2700 */   569,  569,  103,  569,  569,  265,  569,  190,  263,  371,
 /*  2710 */   370,  369,   76,   77,  569,  569,  569,   51,  380,    2,
 /*  2720 */   569,  569,  103,  569,  569,  265,  569,  190,  263,  371,
 /*  2730 */   370,  369,  569,  569,   76,   77,  569,  569,  569,   51,
 /*  2740 */   351,    2,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  2750 */   263,  371,  370,  369,   76,   77,  569,  569,  569,   51,
 /*  2760 */   309,    2,  569,  569,  569,  168,  569,  569,  569,  569,
 /*  2770 */   263,  371,  370,  369,  362,  569,  203,   12,  204,  569,
 /*  2780 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  2790 */   168,  569,  378,  377,  569,  376,  374,  569,  569,  362,
 /*  2800 */   569,  203,   11,  204,  569,  569,  569,  569,  569,  569,
 /*  2810 */   569,  569,  382,  375,  189,  168,  569,  378,  377,  569,
 /*  2820 */   376,  374,  569,  569,  362,  569,  203,   10,  204,  569,
 /*  2830 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  2840 */   569,  569,  378,  377,  569,  376,  374,  168,  103,  569,
 /*  2850 */   569,  265,  569,  190,  569,  569,  362,  569,  203,   14,
 /*  2860 */   204,  569,  569,  569,  569,  569,  569,  569,  569,  382,
 /*  2870 */   375,  189,  569,  569,  378,  377,  569,  376,  374,  569,
 /*  2880 */    76,   77,  569,  569,  569,   51,  319,    2,  569,  569,
 /*  2890 */   569,  569,  569,  569,  569,  569,  263,  371,  370,  369,
 /*  2900 */   569,  569,  168,  103,  569,  569,  265,  569,  190,  569,
 /*  2910 */   569,  362,  569,  203,   13,  204,  569,  569,  569,  569,
 /*  2920 */   569,  569,  569,  569,  382,  375,  189,  569,  569,  378,
 /*  2930 */   377,  569,  376,  374,  103,   76,   77,  265,  569,  186,
 /*  2940 */    51,  335,    2,  569,  569,  569,  569,  569,  569,  569,
 /*  2950 */   569,  263,  371,  370,  369,    3,  569,  103,  569,  569,
 /*  2960 */   265,  569,  190,  569,  569,  103,   76,   77,  265,  569,
 /*  2970 */   190,   51,  319,    2,  569,  569,  569,  569,  569,  569,
 /*  2980 */   569,  569,  263,  371,  370,  369,  569,  569,  569,   76,
 /*  2990 */    77,  569,  569,  569,   51,  569,    2,   76,   77,  171,
 /*  3000 */   569,  569,   51,  569,    2,  263,  371,  370,  369,  569,
 /*  3010 */   203,  569,  204,  263,  371,  370,  369,  569,  569,  569,
 /*  3020 */   569,  382,  375,  189,  569,  170,  378,  377,  569,  376,
 /*  3030 */   374,  569,  569,  569,  569,  569,  203,  569,  204,  569,
 /*  3040 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  3050 */   185,  569,  378,  377,  569,  376,  374,  569,  569,  569,
 /*  3060 */   569,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  3070 */   569,  569,  382,  375,  189,  184,  569,  378,  377,  569,
 /*  3080 */   376,  374,  569,  569,  569,  569,  203,  569,  204,  569,
 /*  3090 */   569,  569,  569,  569,  569,  569,  201,  382,  375,  189,
 /*  3100 */   569,  569,  378,  377,  569,  376,  374,  203,  569,  204,
 /*  3110 */   569,  569,  569,  569,  569,  569,  569,  569,  382,  375,
 /*  3120 */   189,  200,  569,  378,  377,  569,  376,  374,  569,  569,
 /*  3130 */   569,  569,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  3140 */   569,  569,  569,  382,  375,  189,  199,  569,  378,  377,
 /*  3150 */   569,  376,  374,  569,  569,  569,  569,  203,  569,  204,
 /*  3160 */   569,  569,  569,  569,  569,  569,  569,  198,  382,  375,
 /*  3170 */   189,  569,  569,  378,  377,  569,  376,  374,  203,  569,
 /*  3180 */   204,  569,  569,  569,  569,  569,  569,  569,  569,  382,
 /*  3190 */   375,  189,  177,  569,  378,  377,  569,  376,  374,  569,
 /*  3200 */   569,  569,  569,  203,  569,  204,  569,  569,  569,  569,
 /*  3210 */   569,  569,  569,  569,  382,  375,  189,  176,  569,  378,
 /*  3220 */   377,  569,  376,  374,  569,  569,  569,  569,  203,  569,
 /*  3230 */   204,  569,  569,  569,  569,  569,  569,  569,  181,  382,
 /*  3240 */   375,  189,  569,  569,  378,  377,  569,  376,  374,  203,
 /*  3250 */   569,  204,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  3260 */   382,  375,  189,  180,  569,  378,  377,  569,  376,  374,
 /*  3270 */   569,  569,  569,  569,  203,  569,  204,  569,  569,  569,
 /*  3280 */   569,  569,  569,  569,  569,  382,  375,  189,  179,  569,
 /*  3290 */   378,  377,  569,  376,  374,  569,  569,  569,  569,  203,
 /*  3300 */   569,  204,  569,  569,  569,  569,  569,  569,  569,  178,
 /*  3310 */   382,  375,  189,  569,  569,  378,  377,  569,  376,  374,
 /*  3320 */   203,  569,  204,  569,  569,  569,  569,  569,  569,  569,
 /*  3330 */   569,  382,  375,  189,  173,  569,  378,  377,  569,  376,
 /*  3340 */   374,  569,  569,  569,  569,  203,  569,  204,  569,  569,
 /*  3350 */   569,  569,  569,  569,  569,  569,  382,  375,  189,  172,
 /*  3360 */   569,  378,  377,  569,  376,  374,  569,  569,  569,  569,
 /*  3370 */   203,  569,  204,  569,  569,  569,  569,  569,  569,  569,
 /*  3380 */   183,  382,  375,  189,  569,  569,  378,  377,  569,  376,
 /*  3390 */   374,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  3400 */   569,  569,  382,  375,  189,  182,  569,  378,  377,  569,
 /*  3410 */   376,  374,  569,  569,  569,  569,  203,  569,  204,  569,
 /*  3420 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  3430 */   175,  569,  378,  377,  569,  376,  374,  569,  569,  569,
 /*  3440 */   569,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  3450 */   569,  174,  382,  375,  189,  569,  569,  378,  377,  569,
 /*  3460 */   376,  374,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  3470 */   569,  569,  569,  382,  375,  189,  167,  569,  378,  377,
 /*  3480 */   569,  376,  374,  569,  569,  569,  569,  203,  569,  204,
 /*  3490 */   569,  569,  569,  569,  569,  569,  569,  569,  382,  375,
 /*  3500 */   189,  150,  569,  378,  377,  569,  376,  374,  569,  569,
 /*  3510 */   569,  569,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  3520 */   569,  569,  149,  382,  375,  189,  569,  569,  378,  377,
 /*  3530 */   569,  376,  374,  203,  569,  204,  569,  569,  569,  569,
 /*  3540 */   569,  569,  569,  569,  382,  375,  189,  196,  569,  378,
 /*  3550 */   377,  569,  376,  374,  569,  569,  569,  569,  203,  569,
 /*  3560 */   204,  569,  569,  569,  569,  569,  569,  569,  569,  382,
 /*  3570 */   375,  189,  195,  569,  378,  377,  569,  376,  374,  569,
 /*  3580 */   569,  569,  569,  203,  569,  204,  569,  569,  569,  569,
 /*  3590 */   569,  569,  569,  147,  382,  375,  189,  569,  569,  378,
 /*  3600 */   377,  569,  376,  374,  203,  569,  204,  569,  569,  569,
 /*  3610 */   569,  569,  569,  569,  569,  382,  375,  189,  146,  569,
 /*  3620 */   378,  377,  569,  376,  374,  569,  569,  569,  569,  203,
 /*  3630 */   569,  204,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  3640 */   382,  375,  189,  145,  569,  378,  377,  569,  376,  374,
 /*  3650 */   569,  569,  569,  569,  203,  569,  204,  569,  569,  569,
 /*  3660 */   569,  569,  569,  569,  144,  382,  375,  189,  569,  569,
 /*  3670 */   378,  377,  569,  376,  374,  203,  569,  204,  569,  569,
 /*  3680 */   569,  569,  569,  569,  569,  569,  382,  375,  189,  143,
 /*  3690 */   569,  378,  377,  569,  376,  374,  569,  569,  569,  569,
 /*  3700 */   203,  569,  204,  569,  569,  569,  569,  569,  569,  569,
 /*  3710 */   569,  382,  375,  189,  142,  569,  378,  377,  569,  376,
 /*  3720 */   374,  569,  569,  569,  569,  203,  569,  204,  569,  569,
 /*  3730 */   569,  569,  569,  569,  569,  141,  382,  375,  189,  569,
 /*  3740 */   569,  378,  377,  569,  376,  374,  203,  569,  204,  569,
 /*  3750 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  3760 */   140,  569,  378,  377,  569,  376,  374,  569,  569,  569,
 /*  3770 */   569,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  3780 */   569,  569,  382,  375,  189,  139,  569,  378,  377,  569,
 /*  3790 */   376,  374,  569,  569,  569,  569,  203,  569,  204,  569,
 /*  3800 */   569,  569,  569,  569,  569,  569,  138,  382,  375,  189,
 /*  3810 */   569,  569,  378,  377,  569,  376,  374,  203,  569,  204,
 /*  3820 */   569,  569,  569,  569,  569,  569,  569,  569,  382,  375,
 /*  3830 */   189,  137,  569,  378,  377,  569,  376,  374,  569,  569,
 /*  3840 */   569,  569,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  3850 */   569,  569,  569,  382,  375,  189,  136,  569,  378,  377,
 /*  3860 */   569,  376,  374,  569,  569,  569,  569,  203,  569,  204,
 /*  3870 */   569,  569,  569,  569,  569,  569,  569,  135,  382,  375,
 /*  3880 */   189,  569,  569,  378,  377,  569,  376,  374,  203,  569,
 /*  3890 */   204,  569,  569,  569,  569,  569,  569,  569,  569,  382,
 /*  3900 */   375,  189,  134,  569,  378,  377,  569,  376,  374,  569,
 /*  3910 */   569,  569,  569,  203,  569,  204,  569,  569,  569,  569,
 /*  3920 */   569,  569,  569,  569,  382,  375,  189,  133,  569,  378,
 /*  3930 */   377,  569,  376,  374,  569,  569,  569,  569,  203,  569,
 /*  3940 */   204,  569,  569,  569,  569,  569,  569,  569,  132,  382,
 /*  3950 */   375,  189,  569,  569,  378,  377,  569,  376,  374,  203,
 /*  3960 */   569,  204,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  3970 */   382,  375,  189,  131,  569,  378,  377,  569,  376,  374,
 /*  3980 */   569,  569,  569,  569,  203,  569,  204,  569,  569,  569,
 /*  3990 */   569,  569,  569,  569,  569,  382,  375,  189,  130,  569,
 /*  4000 */   378,  377,  569,  376,  374,  569,  569,  569,  569,  203,
 /*  4010 */   569,  204,  569,  569,  569,  569,  569,  569,  569,   17,
 /*  4020 */   382,  375,  189,  569,  569,  378,  377,  569,  376,  374,
 /*  4030 */   203,  569,  204,  569,  569,  569,  569,  569,  569,  569,
 /*  4040 */   569,  382,  375,  189,  153,  569,  378,  377,  569,  376,
 /*  4050 */   374,  569,  569,  569,  569,  203,  569,  204,  569,  569,
 /*  4060 */   569,  569,  569,  569,  569,  569,  382,  375,  189,  152,
 /*  4070 */   569,  378,  377,  569,  376,  374,  569,  569,  569,  569,
 /*  4080 */   203,  569,  204,  569,  569,  569,  569,  569,  569,  569,
 /*  4090 */   122,  382,  375,  189,  569,  569,  378,  377,  569,  376,
 /*  4100 */   374,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  4110 */   569,  569,  382,  375,  189,  121,  569,  378,  377,  569,
 /*  4120 */   376,  374,  569,  569,  569,  569,  203,  569,  204,  569,
 /*  4130 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  4140 */   128,  569,  378,  377,  569,  376,  374,  569,  569,  569,
 /*  4150 */   569,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  4160 */   569,  148,  382,  375,  189,  569,  569,  378,  377,  569,
 /*  4170 */   376,  374,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  4180 */   569,  569,  569,  382,  375,  189,  165,  569,  378,  377,
 /*  4190 */   569,  376,  374,  569,  569,  569,  569,  203,  569,  204,
 /*  4200 */   569,  569,  569,  569,  569,  569,  569,  569,  382,  375,
 /*  4210 */   189,  164,  569,  378,  377,  569,  376,  374,  569,  569,
 /*  4220 */   569,  569,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  4230 */   569,  569,  162,  382,  375,  189,  569,  569,  378,  377,
 /*  4240 */   569,  376,  374,  203,  569,  204,  569,  569,  569,  569,
 /*  4250 */   569,  569,  569,  569,  382,  375,  189,  161,  569,  378,
 /*  4260 */   377,  569,  376,  374,  569,  569,  569,  569,  203,  569,
 /*  4270 */   204,  569,  569,  569,  569,  569,  569,  569,  569,  382,
 /*  4280 */   375,  189,  159,  569,  378,  377,  569,  376,  374,  569,
 /*  4290 */   569,  569,  569,  203,  569,  204,  569,  569,  569,  569,
 /*  4300 */   569,  569,  569,  158,  382,  375,  189,  569,  569,  378,
 /*  4310 */   377,  569,  376,  374,  203,  569,  204,  569,  569,  569,
 /*  4320 */   569,  569,  569,  569,  569,  382,  375,  189,  156,  569,
 /*  4330 */   378,  377,  569,  376,  374,  569,  569,  569,  569,  203,
 /*  4340 */   569,  204,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  4350 */   382,  375,  189,  155,  569,  378,  377,  569,  376,  374,
 /*  4360 */   569,  569,  569,  569,  203,  569,  204,  569,  569,  569,
 /*  4370 */   569,  569,  569,  569,  129,  382,  375,  189,  569,  569,
 /*  4380 */   378,  377,  569,  376,  374,  203,  569,  204,  569,  569,
 /*  4390 */   569,  569,  569,  569,  569,  569,  382,  375,  189,  123,
 /*  4400 */   569,  378,  377,  569,  376,  374,  569,  569,  569,  569,
 /*  4410 */   203,  569,  204,  569,  569,  569,  569,  569,  569,  569,
 /*  4420 */   569,  382,  375,  189,  166,  569,  378,  377,  569,  376,
 /*  4430 */   374,  569,  569,  569,  569,  203,  569,  204,  569,  569,
 /*  4440 */   569,  569,  569,  569,  569,  125,  382,  375,  189,  569,
 /*  4450 */   569,  378,  377,  569,  376,  374,  203,  569,  204,  569,
 /*  4460 */   569,  569,  569,  569,  569,  569,  569,  382,  375,  189,
 /*  4470 */   163,  569,  378,  377,  569,  376,  374,  569,  569,  569,
 /*  4480 */   569,  203,  569,  204,  569,  569,  569,  569,  569,  569,
 /*  4490 */   569,  569,  382,  375,  189,  160,  569,  378,  377,  569,
 /*  4500 */   376,  374,  569,  569,  569,  569,  203,  569,  204,  569,
 /*  4510 */   569,  569,  569,  569,  569,  569,  157,  382,  375,  189,
 /*  4520 */   569,  569,  378,  377,  569,  376,  374,  203,  569,  204,
 /*  4530 */   569,  569,  569,  569,  569,  569,  569,  569,  382,  375,
 /*  4540 */   189,  126,  569,  378,  377,  569,  376,  374,  569,  569,
 /*  4550 */   569,  569,  203,  569,  204,  569,  569,  569,  569,  569,
 /*  4560 */   569,  569,  569,  382,  375,  189,  124,  569,  378,  377,
 /*  4570 */   569,  376,  374,  569,  569,  569,  569,  203,  569,  204,
 /*  4580 */   569,  569,  569,  569,  569,  569,  569,  154,  382,  375,
 /*  4590 */   189,  569,  569,  378,  377,  569,  376,  374,  203,  569,
 /*  4600 */   204,  569,  569,  569,  569,  569,  569,  569,  569,  382,
 /*  4610 */   375,  189,  569,  569,  378,  377,  569,  376,  374,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     2,    5,    4,   40,   41,    7,   43,    9,   46,   40,
 /*    10 */    41,   13,   43,   15,   16,    9,   18,   19,   20,   21,
 /*    20 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*    30 */    32,   33,   34,   35,   36,   37,   69,   39,   41,   41,
 /*    40 */    43,   43,   46,   76,   77,   78,   79,   70,    5,   72,
 /*    50 */    52,   53,   54,   55,   30,   31,   32,   33,   34,   35,
 /*    60 */    83,   10,   40,   39,   13,   43,   15,   16,    9,   18,
 /*    70 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*    80 */    29,   30,   31,   32,   33,   34,   35,   59,   46,   46,
 /*    90 */    39,   63,   64,   65,   66,   67,   68,   69,   70,    4,
 /*   100 */    72,   73,   74,   75,    1,    2,   41,   56,   43,   81,
 /*   110 */    82,   83,    9,   54,   86,   87,   58,   89,   90,   61,
 /*   120 */    62,   13,    9,   15,   16,   41,   18,   19,   20,   21,
 /*   130 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   140 */    32,   33,   34,   35,   41,   35,    5,   39,   40,   39,
 /*   150 */     9,   13,   44,   15,   16,   46,   18,   19,   20,   21,
 /*   160 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   170 */    32,   33,   34,   35,    3,    5,   46,   39,   40,    9,
 /*   180 */     9,   13,   44,   15,   16,    3,   18,   19,   20,   21,
 /*   190 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   200 */    32,   33,   34,   35,    3,   44,   44,   39,   40,   44,
 /*   210 */     9,   13,   44,   15,   16,   15,   18,   19,   20,   21,
 /*   220 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   230 */    32,   33,   34,   35,    3,   44,   44,   39,   40,   44,
 /*   240 */    40,   41,   44,   43,   13,   41,   15,   16,    2,   18,
 /*   250 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   260 */    29,   30,   31,   32,   33,   34,   35,    1,    3,    2,
 /*   270 */    39,    1,   44,   44,    7,    9,    9,   46,   13,    9,
 /*   280 */    15,   16,   44,   18,   19,   20,   21,   22,   23,   24,
 /*   290 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   300 */    35,    5,    5,   44,   39,   44,   44,   13,   69,   15,
 /*   310 */    16,   46,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   320 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   330 */    91,   92,   44,   39,   44,   44,   13,   44,   15,   16,
 /*   340 */    46,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   350 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   44,
 /*   360 */    44,   44,   39,   13,   69,   15,   16,   44,   18,   19,
 /*   370 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   380 */    30,   31,   32,   33,   34,   35,   91,   92,   13,   39,
 /*   390 */    15,   16,   42,   18,   19,   20,   21,   22,   23,   24,
 /*   400 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   410 */    35,   44,   41,   13,   39,   15,   16,   42,   18,   19,
 /*   420 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   430 */    30,   31,   32,   33,   34,   35,   44,   44,   13,   39,
 /*   440 */    15,   16,   42,   18,   19,   20,   21,   22,   23,   24,
 /*   450 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   460 */    35,   44,    9,    5,   39,   20,   21,   22,   23,   24,
 /*   470 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   480 */    35,   56,    5,   44,   39,   28,   29,   30,   31,   32,
 /*   490 */    33,   34,   35,    3,   44,   13,   39,   15,   16,    9,
 /*   500 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   510 */    28,   29,   30,   31,   32,   33,   34,   35,   44,   44,
 /*   520 */    44,   39,   13,   44,   15,   16,   44,   18,   19,   20,
 /*   530 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   540 */    31,   32,   33,   34,   35,   44,   42,    9,   39,   13,
 /*   550 */    11,   15,   16,   44,   18,   19,   20,   21,   22,   23,
 /*   560 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   570 */    34,   35,    2,    1,    3,   39,   13,    9,   15,   16,
 /*   580 */    44,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   590 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   15,
 /*   600 */     9,   42,   39,   13,    1,   15,   16,   44,   18,   19,
 /*   610 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   620 */    30,   31,   32,   33,   34,   35,   11,    3,    1,   39,
 /*   630 */    51,    3,   13,   69,   15,   16,   46,   18,   19,   20,
 /*   640 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   650 */    31,   32,   33,   34,   35,   80,    9,    8,   39,   13,
 /*   660 */    80,   15,   16,   44,   18,   19,   20,   21,   22,   23,
 /*   670 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   680 */    34,   35,   80,   69,    9,   39,   13,   82,   15,   16,
 /*   690 */    44,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   700 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   57,
 /*   710 */    93,   93,   39,   13,   93,   15,   16,   44,   18,   19,
 /*   720 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   730 */    30,   31,   32,   33,   34,   35,   93,   93,   93,   39,
 /*   740 */    13,   93,   15,   16,   44,   18,   19,   20,   21,   22,
 /*   750 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   760 */    33,   34,   35,   93,   93,   93,   39,   13,   93,   15,
 /*   770 */    16,   44,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   780 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   790 */    93,   93,   93,   39,   13,   93,   15,   16,   44,   18,
 /*   800 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   810 */    29,   30,   31,   32,   33,   34,   35,   93,   93,   93,
 /*   820 */    39,   13,   93,   15,   16,   44,   18,   19,   20,   21,
 /*   830 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   840 */    32,   33,   34,   35,   93,   93,   93,   39,   13,   93,
 /*   850 */    15,   16,   44,   18,   19,   20,   21,   22,   23,   24,
 /*   860 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   870 */    35,    1,    1,   93,   39,   32,   33,   34,   35,   44,
 /*   880 */     9,   93,   39,   13,   93,   15,   16,   93,   18,   19,
 /*   890 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   900 */    30,   31,   32,   33,   34,   35,   93,   93,   13,   39,
 /*   910 */    15,   16,   93,   18,   19,   20,   21,   22,   23,   24,
 /*   920 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   930 */    35,    1,   93,   93,   39,   93,   93,   93,   93,   93,
 /*   940 */    93,   46,   93,   13,   93,   15,   16,   93,   18,   19,
 /*   950 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   960 */    30,   31,   32,   33,   34,   35,   93,   93,   13,   39,
 /*   970 */    15,   16,   93,   18,   19,   20,   21,   22,   23,   24,
 /*   980 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   990 */    35,   93,   93,   93,   39,   93,   93,   93,   93,   93,
 /*  1000 */    13,   93,   15,   16,   49,   18,   19,   20,   21,   22,
 /*  1010 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1020 */    33,   34,   35,   93,   15,   16,   39,   18,   19,   20,
 /*  1030 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1040 */    31,   32,   33,   34,   35,   93,   93,   93,   39,   93,
 /*  1050 */    93,   15,   16,   44,   18,   19,   20,   21,   22,   23,
 /*  1060 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1070 */    34,   35,   93,   93,   93,   39,   93,   93,   15,   16,
 /*  1080 */    44,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  1090 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   93,
 /*  1100 */    93,   93,   39,   93,   93,   15,   16,   44,   18,   19,
 /*  1110 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1120 */    30,   31,   32,   33,   34,   35,   93,   93,   93,   39,
 /*  1130 */    93,   93,   15,   16,   44,   18,   19,   20,   21,   22,
 /*  1140 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1150 */    33,   34,   35,   93,   93,   93,   39,   93,   93,   15,
 /*  1160 */    16,   44,   18,   19,   20,   21,   22,   23,   24,   25,
 /*  1170 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1180 */    93,   93,   93,   39,   93,   93,   15,   16,   44,   18,
 /*  1190 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1200 */    29,   30,   31,   32,   33,   34,   35,   93,   93,   93,
 /*  1210 */    39,   93,   93,   15,   16,   44,   18,   19,   20,   21,
 /*  1220 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1230 */    32,   33,   34,   35,   93,   93,   93,   39,   93,   93,
 /*  1240 */    15,   16,   44,   18,   19,   20,   21,   22,   23,   24,
 /*  1250 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1260 */    35,   93,   93,   93,   39,   93,   93,   15,   16,   44,
 /*  1270 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1280 */    28,   29,   30,   31,   32,   33,   34,   35,   93,   93,
 /*  1290 */    93,   39,   93,   93,   15,   16,   44,   18,   19,   20,
 /*  1300 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1310 */    31,   32,   33,   34,   35,   93,   93,   93,   39,   93,
 /*  1320 */    93,   15,   16,   44,   18,   19,   20,   21,   22,   23,
 /*  1330 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1340 */    34,   35,   93,   93,   93,   39,   93,   93,   15,   16,
 /*  1350 */    44,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  1360 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   93,
 /*  1370 */    93,   93,   39,   18,   19,   20,   21,   22,   23,   24,
 /*  1380 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1390 */    35,   93,   93,   93,   39,   19,   20,   21,   22,   23,
 /*  1400 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1410 */    34,   35,   93,   93,   93,   39,   21,   22,   23,   24,
 /*  1420 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1430 */    35,   93,   93,   93,   39,   93,   93,   93,   22,   23,
 /*  1440 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1450 */    34,   35,    0,   93,   93,   39,    4,   93,   93,    7,
 /*  1460 */    93,    9,   93,   24,   25,   26,   27,   28,   29,   30,
 /*  1470 */    31,   32,   33,   34,   35,   93,    1,    2,   39,    4,
 /*  1480 */    93,   93,   93,   93,    9,   93,   93,   93,   36,   37,
 /*  1490 */    93,   93,   93,   41,   93,   43,   93,   93,   46,   93,
 /*  1500 */    48,   93,   50,   93,   52,   53,   54,   55,   59,    4,
 /*  1510 */    93,   93,    7,   93,    9,   40,   41,   68,   43,   70,
 /*  1520 */    15,   72,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  1530 */    81,   82,   83,   84,   85,   86,   87,   93,   89,   90,
 /*  1540 */    93,   36,   37,   93,   93,   40,   41,   93,   43,   44,
 /*  1550 */     4,   93,   93,    7,   93,    9,   93,   52,   53,   54,
 /*  1560 */    55,   15,   93,   69,   93,   93,   93,   93,   69,   93,
 /*  1570 */    76,   77,   78,   79,   93,   76,   77,   78,   79,   93,
 /*  1580 */    93,   93,   36,   37,   93,   93,   40,   41,   93,   43,
 /*  1590 */    44,    4,   93,   93,    7,   93,    9,   93,   52,   53,
 /*  1600 */    54,   55,   15,   69,   93,   93,   93,   93,   69,   93,
 /*  1610 */    76,   77,   78,   79,   93,   76,   77,   78,   79,   93,
 /*  1620 */    93,   93,   93,   36,   37,   93,   93,   40,   41,    4,
 /*  1630 */    43,   93,    7,   93,    9,   93,   93,   93,   93,   52,
 /*  1640 */    53,   54,   55,   93,   93,   93,   93,   93,   93,   93,
 /*  1650 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   34,
 /*  1660 */    93,   36,   37,   93,   93,   93,   41,   93,   43,   44,
 /*  1670 */    93,    4,   93,   93,    7,   93,    9,   52,   53,   54,
 /*  1680 */    55,   93,   15,   93,   93,   93,   93,   93,   93,   93,
 /*  1690 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  1700 */    93,   93,   59,   36,   37,   93,   93,   40,   41,    4,
 /*  1710 */    43,   68,    7,   70,    9,   72,   93,   93,   93,   52,
 /*  1720 */    53,   54,   55,   93,   81,   82,   83,   93,   93,   86,
 /*  1730 */    87,   93,   89,   90,   93,   93,   93,   93,   93,   34,
 /*  1740 */    59,   36,   37,   93,   93,   93,   41,    4,   43,   44,
 /*  1750 */     7,   70,    9,   72,   93,   93,   93,   52,   53,   54,
 /*  1760 */    55,   93,   81,   82,   83,   93,   93,   86,   87,   93,
 /*  1770 */    89,   90,   93,   93,   93,   93,   93,   34,   93,   36,
 /*  1780 */    37,   59,   93,   93,   41,    4,   43,   44,    7,   93,
 /*  1790 */     9,   93,   70,   93,   72,   52,   53,   54,   55,   93,
 /*  1800 */    93,   93,   93,   81,   82,   83,   93,   93,   86,   87,
 /*  1810 */    93,   89,   90,   93,   93,   34,   93,   36,   37,   59,
 /*  1820 */    93,   93,   41,   93,   43,   44,   93,   93,   68,   93,
 /*  1830 */    70,   71,   72,   52,   53,   54,   55,   93,   93,   93,
 /*  1840 */    93,   81,   82,   83,   59,   93,   86,   87,   88,   89,
 /*  1850 */    90,    4,   93,   68,    7,   70,    9,   72,   93,    4,
 /*  1860 */    93,   93,    7,   93,    9,   93,   81,   82,   83,   93,
 /*  1870 */    93,   86,   87,   93,   89,   90,   93,   93,   31,   93,
 /*  1880 */    93,   93,   93,   36,   37,   93,   93,   93,   41,   34,
 /*  1890 */    43,   36,   37,   93,   93,   93,   41,   93,   43,   52,
 /*  1900 */    53,   54,   55,   93,   93,   93,   93,   52,   53,   54,
 /*  1910 */    55,   93,    4,   93,   93,    7,   93,    9,   93,   93,
 /*  1920 */     4,   93,   93,    7,   93,    9,   93,   93,   93,   93,
 /*  1930 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  1940 */    93,   93,   34,   93,   36,   37,   93,   93,   93,   41,
 /*  1950 */    34,   43,   36,   37,   93,   93,   93,   41,   93,   43,
 /*  1960 */    52,   53,   54,   55,   93,   93,   93,   93,   52,   53,
 /*  1970 */    54,   55,   93,    4,   93,   93,    7,   93,    9,   93,
 /*  1980 */    93,    4,   93,   93,    7,   93,    9,   93,   93,   93,
 /*  1990 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2000 */    93,   93,   93,   34,   93,   36,   37,   93,   93,   93,
 /*  2010 */    41,   34,   43,   36,   37,   93,   93,   93,   41,   93,
 /*  2020 */    43,   52,   53,   54,   55,   93,   93,   93,   93,   52,
 /*  2030 */    53,   54,   55,   93,    4,   93,   93,    7,   93,    9,
 /*  2040 */    93,   93,    4,   93,   93,    7,   93,    9,   93,   93,
 /*  2050 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2060 */    93,   93,   93,   93,   34,   93,   36,   37,   93,   93,
 /*  2070 */    93,   41,   34,   43,   36,   37,   93,   93,   93,   41,
 /*  2080 */    93,   43,   52,   53,   54,   55,   93,   93,   93,   93,
 /*  2090 */    52,   53,   54,   55,   93,    4,   93,   93,    7,   93,
 /*  2100 */     9,   93,   93,    4,   93,   93,    7,   93,    9,   93,
 /*  2110 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2120 */    93,   93,   93,   93,   93,   34,   93,   36,   37,   93,
 /*  2130 */    93,   93,   41,   34,   43,   36,   37,   93,   93,   93,
 /*  2140 */    41,   93,   43,   52,   53,   54,   55,   93,   93,   93,
 /*  2150 */    93,   52,   53,   54,   55,   93,    4,   93,   93,    7,
 /*  2160 */    93,    9,   93,   93,    4,   93,   93,    7,   93,    9,
 /*  2170 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2180 */    93,   93,   93,   93,   93,   93,   34,   93,   36,   37,
 /*  2190 */    93,   93,   93,   41,   34,   43,   36,   37,   93,   93,
 /*  2200 */    93,   41,   93,   43,   52,   53,   54,   55,   93,   93,
 /*  2210 */    93,   93,   52,   53,   54,   55,   93,    4,   93,   93,
 /*  2220 */     7,   93,    9,   93,   93,    4,   93,   93,    7,   93,
 /*  2230 */     9,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2240 */    93,   93,   93,   93,   93,   93,   93,   34,   93,   36,
 /*  2250 */    37,   93,   93,   93,   41,   34,   43,   36,   37,   93,
 /*  2260 */    93,   93,   41,   93,   43,   52,   53,   54,   55,   93,
 /*  2270 */    93,   93,   93,   52,   53,   54,   55,   93,    4,   93,
 /*  2280 */    93,    7,   93,    9,   93,   93,    4,   93,   93,    7,
 /*  2290 */    93,    9,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2300 */    93,   93,   93,   93,   93,   93,   93,   93,   34,   93,
 /*  2310 */    36,   37,   93,   93,   93,   41,   34,   43,   36,   37,
 /*  2320 */    93,   93,   93,   41,   93,   43,   52,   53,   54,   55,
 /*  2330 */    93,   93,   93,   93,   52,   53,   54,   55,   93,    4,
 /*  2340 */    93,   93,    7,   93,    9,   93,   93,    4,   93,   93,
 /*  2350 */     7,   93,    9,   93,   93,   93,   93,   93,   93,   93,
 /*  2360 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   34,
 /*  2370 */    93,   36,   37,   93,   93,   93,   41,   34,   43,   36,
 /*  2380 */    37,   93,   93,   93,   41,   93,   43,   52,   53,   54,
 /*  2390 */    55,   93,   93,   93,   93,   52,   53,   54,   55,   93,
 /*  2400 */     4,   93,   93,    7,   93,    9,   93,   93,    4,   93,
 /*  2410 */    93,    7,   93,    9,   93,   93,   93,   93,   93,   93,
 /*  2420 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2430 */    34,   93,   36,   37,   93,   93,   93,   41,   34,   43,
 /*  2440 */    36,   37,   93,   93,   93,   41,   93,   43,   52,   53,
 /*  2450 */    54,   55,   93,   93,   93,   93,   52,   53,   54,   55,
 /*  2460 */    93,    4,   93,   93,    7,   93,    9,   93,   93,    4,
 /*  2470 */    93,   93,    7,   93,    9,   93,   93,   93,   93,   93,
 /*  2480 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2490 */    93,   34,   93,   36,   37,   93,   93,   93,   41,   34,
 /*  2500 */    43,   36,   37,   93,   93,   93,   41,   93,   43,   52,
 /*  2510 */    53,   54,   55,   93,   93,   93,   93,   52,   53,   54,
 /*  2520 */    55,   93,    4,   93,   93,    7,   93,    9,   93,   93,
 /*  2530 */     4,   93,   93,    7,   93,    9,   93,   93,   93,   93,
 /*  2540 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2550 */    93,   93,   34,   93,   36,   37,   93,   93,   93,   41,
 /*  2560 */    34,   43,   36,   37,   93,   93,   93,   41,   93,   43,
 /*  2570 */    52,   53,   54,   55,   93,   93,   93,   93,   52,   53,
 /*  2580 */    54,   55,   93,    4,   93,   93,    7,   93,    9,   93,
 /*  2590 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2600 */    93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2610 */    93,   93,   93,   34,   93,   36,   37,   93,    4,   93,
 /*  2620 */    41,    7,   43,    9,   93,   93,   93,   93,   93,   93,
 /*  2630 */    93,   52,   53,   54,   55,   93,   93,   93,    4,   93,
 /*  2640 */    93,    7,   93,    9,   93,   93,   93,   93,   93,   93,
 /*  2650 */    36,   37,   93,   93,   93,   41,   93,   43,   93,   93,
 /*  2660 */     4,   47,   93,    7,   93,    9,   52,   53,   54,   55,
 /*  2670 */    36,   37,   93,   93,   93,   41,   42,   43,   93,   93,
 /*  2680 */     4,   93,   93,    7,   93,    9,   52,   53,   54,   55,
 /*  2690 */    93,   93,   36,   37,   93,   93,   93,   41,   42,   43,
 /*  2700 */    93,   93,    4,   93,   93,    7,   93,    9,   52,   53,
 /*  2710 */    54,   55,   36,   37,   93,   93,   93,   41,   42,   43,
 /*  2720 */    93,   93,    4,   93,   93,    7,   93,    9,   52,   53,
 /*  2730 */    54,   55,   93,   93,   36,   37,   93,   93,   93,   41,
 /*  2740 */    42,   43,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  2750 */    52,   53,   54,   55,   36,   37,   93,   93,   93,   41,
 /*  2760 */    42,   43,   93,   93,   93,   59,   93,   93,   93,   93,
 /*  2770 */    52,   53,   54,   55,   68,   93,   70,   71,   72,   93,
 /*  2780 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  2790 */    59,   93,   86,   87,   93,   89,   90,   93,   93,   68,
 /*  2800 */    93,   70,   71,   72,   93,   93,   93,   93,   93,   93,
 /*  2810 */    93,   93,   81,   82,   83,   59,   93,   86,   87,   93,
 /*  2820 */    89,   90,   93,   93,   68,   93,   70,   71,   72,   93,
 /*  2830 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  2840 */    93,   93,   86,   87,   93,   89,   90,   59,    4,   93,
 /*  2850 */    93,    7,   93,    9,   93,   93,   68,   93,   70,   71,
 /*  2860 */    72,   93,   93,   93,   93,   93,   93,   93,   93,   81,
 /*  2870 */    82,   83,   93,   93,   86,   87,   93,   89,   90,   93,
 /*  2880 */    36,   37,   93,   93,   93,   41,   42,   43,   93,   93,
 /*  2890 */    93,   93,   93,   93,   93,   93,   52,   53,   54,   55,
 /*  2900 */    93,   93,   59,    4,   93,   93,    7,   93,    9,   93,
 /*  2910 */    93,   68,   93,   70,   71,   72,   93,   93,   93,   93,
 /*  2920 */    93,   93,   93,   93,   81,   82,   83,   93,   93,   86,
 /*  2930 */    87,   93,   89,   90,    4,   36,   37,    7,   93,    9,
 /*  2940 */    41,   42,   43,   93,   93,   93,   93,   93,   93,   93,
 /*  2950 */    93,   52,   53,   54,   55,    2,   93,    4,   93,   93,
 /*  2960 */     7,   93,    9,   93,   93,    4,   36,   37,    7,   93,
 /*  2970 */     9,   41,   42,   43,   93,   93,   93,   93,   93,   93,
 /*  2980 */    93,   93,   52,   53,   54,   55,   93,   93,   93,   36,
 /*  2990 */    37,   93,   93,   93,   41,   93,   43,   36,   37,   59,
 /*  3000 */    93,   93,   41,   93,   43,   52,   53,   54,   55,   93,
 /*  3010 */    70,   93,   72,   52,   53,   54,   55,   93,   93,   93,
 /*  3020 */    93,   81,   82,   83,   93,   59,   86,   87,   93,   89,
 /*  3030 */    90,   93,   93,   93,   93,   93,   70,   93,   72,   93,
 /*  3040 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  3050 */    59,   93,   86,   87,   93,   89,   90,   93,   93,   93,
 /*  3060 */    93,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  3070 */    93,   93,   81,   82,   83,   59,   93,   86,   87,   93,
 /*  3080 */    89,   90,   93,   93,   93,   93,   70,   93,   72,   93,
 /*  3090 */    93,   93,   93,   93,   93,   93,   59,   81,   82,   83,
 /*  3100 */    93,   93,   86,   87,   93,   89,   90,   70,   93,   72,
 /*  3110 */    93,   93,   93,   93,   93,   93,   93,   93,   81,   82,
 /*  3120 */    83,   59,   93,   86,   87,   93,   89,   90,   93,   93,
 /*  3130 */    93,   93,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  3140 */    93,   93,   93,   81,   82,   83,   59,   93,   86,   87,
 /*  3150 */    93,   89,   90,   93,   93,   93,   93,   70,   93,   72,
 /*  3160 */    93,   93,   93,   93,   93,   93,   93,   59,   81,   82,
 /*  3170 */    83,   93,   93,   86,   87,   93,   89,   90,   70,   93,
 /*  3180 */    72,   93,   93,   93,   93,   93,   93,   93,   93,   81,
 /*  3190 */    82,   83,   59,   93,   86,   87,   93,   89,   90,   93,
 /*  3200 */    93,   93,   93,   70,   93,   72,   93,   93,   93,   93,
 /*  3210 */    93,   93,   93,   93,   81,   82,   83,   59,   93,   86,
 /*  3220 */    87,   93,   89,   90,   93,   93,   93,   93,   70,   93,
 /*  3230 */    72,   93,   93,   93,   93,   93,   93,   93,   59,   81,
 /*  3240 */    82,   83,   93,   93,   86,   87,   93,   89,   90,   70,
 /*  3250 */    93,   72,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  3260 */    81,   82,   83,   59,   93,   86,   87,   93,   89,   90,
 /*  3270 */    93,   93,   93,   93,   70,   93,   72,   93,   93,   93,
 /*  3280 */    93,   93,   93,   93,   93,   81,   82,   83,   59,   93,
 /*  3290 */    86,   87,   93,   89,   90,   93,   93,   93,   93,   70,
 /*  3300 */    93,   72,   93,   93,   93,   93,   93,   93,   93,   59,
 /*  3310 */    81,   82,   83,   93,   93,   86,   87,   93,   89,   90,
 /*  3320 */    70,   93,   72,   93,   93,   93,   93,   93,   93,   93,
 /*  3330 */    93,   81,   82,   83,   59,   93,   86,   87,   93,   89,
 /*  3340 */    90,   93,   93,   93,   93,   70,   93,   72,   93,   93,
 /*  3350 */    93,   93,   93,   93,   93,   93,   81,   82,   83,   59,
 /*  3360 */    93,   86,   87,   93,   89,   90,   93,   93,   93,   93,
 /*  3370 */    70,   93,   72,   93,   93,   93,   93,   93,   93,   93,
 /*  3380 */    59,   81,   82,   83,   93,   93,   86,   87,   93,   89,
 /*  3390 */    90,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  3400 */    93,   93,   81,   82,   83,   59,   93,   86,   87,   93,
 /*  3410 */    89,   90,   93,   93,   93,   93,   70,   93,   72,   93,
 /*  3420 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  3430 */    59,   93,   86,   87,   93,   89,   90,   93,   93,   93,
 /*  3440 */    93,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  3450 */    93,   59,   81,   82,   83,   93,   93,   86,   87,   93,
 /*  3460 */    89,   90,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  3470 */    93,   93,   93,   81,   82,   83,   59,   93,   86,   87,
 /*  3480 */    93,   89,   90,   93,   93,   93,   93,   70,   93,   72,
 /*  3490 */    93,   93,   93,   93,   93,   93,   93,   93,   81,   82,
 /*  3500 */    83,   59,   93,   86,   87,   93,   89,   90,   93,   93,
 /*  3510 */    93,   93,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  3520 */    93,   93,   59,   81,   82,   83,   93,   93,   86,   87,
 /*  3530 */    93,   89,   90,   70,   93,   72,   93,   93,   93,   93,
 /*  3540 */    93,   93,   93,   93,   81,   82,   83,   59,   93,   86,
 /*  3550 */    87,   93,   89,   90,   93,   93,   93,   93,   70,   93,
 /*  3560 */    72,   93,   93,   93,   93,   93,   93,   93,   93,   81,
 /*  3570 */    82,   83,   59,   93,   86,   87,   93,   89,   90,   93,
 /*  3580 */    93,   93,   93,   70,   93,   72,   93,   93,   93,   93,
 /*  3590 */    93,   93,   93,   59,   81,   82,   83,   93,   93,   86,
 /*  3600 */    87,   93,   89,   90,   70,   93,   72,   93,   93,   93,
 /*  3610 */    93,   93,   93,   93,   93,   81,   82,   83,   59,   93,
 /*  3620 */    86,   87,   93,   89,   90,   93,   93,   93,   93,   70,
 /*  3630 */    93,   72,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  3640 */    81,   82,   83,   59,   93,   86,   87,   93,   89,   90,
 /*  3650 */    93,   93,   93,   93,   70,   93,   72,   93,   93,   93,
 /*  3660 */    93,   93,   93,   93,   59,   81,   82,   83,   93,   93,
 /*  3670 */    86,   87,   93,   89,   90,   70,   93,   72,   93,   93,
 /*  3680 */    93,   93,   93,   93,   93,   93,   81,   82,   83,   59,
 /*  3690 */    93,   86,   87,   93,   89,   90,   93,   93,   93,   93,
 /*  3700 */    70,   93,   72,   93,   93,   93,   93,   93,   93,   93,
 /*  3710 */    93,   81,   82,   83,   59,   93,   86,   87,   93,   89,
 /*  3720 */    90,   93,   93,   93,   93,   70,   93,   72,   93,   93,
 /*  3730 */    93,   93,   93,   93,   93,   59,   81,   82,   83,   93,
 /*  3740 */    93,   86,   87,   93,   89,   90,   70,   93,   72,   93,
 /*  3750 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  3760 */    59,   93,   86,   87,   93,   89,   90,   93,   93,   93,
 /*  3770 */    93,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  3780 */    93,   93,   81,   82,   83,   59,   93,   86,   87,   93,
 /*  3790 */    89,   90,   93,   93,   93,   93,   70,   93,   72,   93,
 /*  3800 */    93,   93,   93,   93,   93,   93,   59,   81,   82,   83,
 /*  3810 */    93,   93,   86,   87,   93,   89,   90,   70,   93,   72,
 /*  3820 */    93,   93,   93,   93,   93,   93,   93,   93,   81,   82,
 /*  3830 */    83,   59,   93,   86,   87,   93,   89,   90,   93,   93,
 /*  3840 */    93,   93,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  3850 */    93,   93,   93,   81,   82,   83,   59,   93,   86,   87,
 /*  3860 */    93,   89,   90,   93,   93,   93,   93,   70,   93,   72,
 /*  3870 */    93,   93,   93,   93,   93,   93,   93,   59,   81,   82,
 /*  3880 */    83,   93,   93,   86,   87,   93,   89,   90,   70,   93,
 /*  3890 */    72,   93,   93,   93,   93,   93,   93,   93,   93,   81,
 /*  3900 */    82,   83,   59,   93,   86,   87,   93,   89,   90,   93,
 /*  3910 */    93,   93,   93,   70,   93,   72,   93,   93,   93,   93,
 /*  3920 */    93,   93,   93,   93,   81,   82,   83,   59,   93,   86,
 /*  3930 */    87,   93,   89,   90,   93,   93,   93,   93,   70,   93,
 /*  3940 */    72,   93,   93,   93,   93,   93,   93,   93,   59,   81,
 /*  3950 */    82,   83,   93,   93,   86,   87,   93,   89,   90,   70,
 /*  3960 */    93,   72,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  3970 */    81,   82,   83,   59,   93,   86,   87,   93,   89,   90,
 /*  3980 */    93,   93,   93,   93,   70,   93,   72,   93,   93,   93,
 /*  3990 */    93,   93,   93,   93,   93,   81,   82,   83,   59,   93,
 /*  4000 */    86,   87,   93,   89,   90,   93,   93,   93,   93,   70,
 /*  4010 */    93,   72,   93,   93,   93,   93,   93,   93,   93,   59,
 /*  4020 */    81,   82,   83,   93,   93,   86,   87,   93,   89,   90,
 /*  4030 */    70,   93,   72,   93,   93,   93,   93,   93,   93,   93,
 /*  4040 */    93,   81,   82,   83,   59,   93,   86,   87,   93,   89,
 /*  4050 */    90,   93,   93,   93,   93,   70,   93,   72,   93,   93,
 /*  4060 */    93,   93,   93,   93,   93,   93,   81,   82,   83,   59,
 /*  4070 */    93,   86,   87,   93,   89,   90,   93,   93,   93,   93,
 /*  4080 */    70,   93,   72,   93,   93,   93,   93,   93,   93,   93,
 /*  4090 */    59,   81,   82,   83,   93,   93,   86,   87,   93,   89,
 /*  4100 */    90,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  4110 */    93,   93,   81,   82,   83,   59,   93,   86,   87,   93,
 /*  4120 */    89,   90,   93,   93,   93,   93,   70,   93,   72,   93,
 /*  4130 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  4140 */    59,   93,   86,   87,   93,   89,   90,   93,   93,   93,
 /*  4150 */    93,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  4160 */    93,   59,   81,   82,   83,   93,   93,   86,   87,   93,
 /*  4170 */    89,   90,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  4180 */    93,   93,   93,   81,   82,   83,   59,   93,   86,   87,
 /*  4190 */    93,   89,   90,   93,   93,   93,   93,   70,   93,   72,
 /*  4200 */    93,   93,   93,   93,   93,   93,   93,   93,   81,   82,
 /*  4210 */    83,   59,   93,   86,   87,   93,   89,   90,   93,   93,
 /*  4220 */    93,   93,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  4230 */    93,   93,   59,   81,   82,   83,   93,   93,   86,   87,
 /*  4240 */    93,   89,   90,   70,   93,   72,   93,   93,   93,   93,
 /*  4250 */    93,   93,   93,   93,   81,   82,   83,   59,   93,   86,
 /*  4260 */    87,   93,   89,   90,   93,   93,   93,   93,   70,   93,
 /*  4270 */    72,   93,   93,   93,   93,   93,   93,   93,   93,   81,
 /*  4280 */    82,   83,   59,   93,   86,   87,   93,   89,   90,   93,
 /*  4290 */    93,   93,   93,   70,   93,   72,   93,   93,   93,   93,
 /*  4300 */    93,   93,   93,   59,   81,   82,   83,   93,   93,   86,
 /*  4310 */    87,   93,   89,   90,   70,   93,   72,   93,   93,   93,
 /*  4320 */    93,   93,   93,   93,   93,   81,   82,   83,   59,   93,
 /*  4330 */    86,   87,   93,   89,   90,   93,   93,   93,   93,   70,
 /*  4340 */    93,   72,   93,   93,   93,   93,   93,   93,   93,   93,
 /*  4350 */    81,   82,   83,   59,   93,   86,   87,   93,   89,   90,
 /*  4360 */    93,   93,   93,   93,   70,   93,   72,   93,   93,   93,
 /*  4370 */    93,   93,   93,   93,   59,   81,   82,   83,   93,   93,
 /*  4380 */    86,   87,   93,   89,   90,   70,   93,   72,   93,   93,
 /*  4390 */    93,   93,   93,   93,   93,   93,   81,   82,   83,   59,
 /*  4400 */    93,   86,   87,   93,   89,   90,   93,   93,   93,   93,
 /*  4410 */    70,   93,   72,   93,   93,   93,   93,   93,   93,   93,
 /*  4420 */    93,   81,   82,   83,   59,   93,   86,   87,   93,   89,
 /*  4430 */    90,   93,   93,   93,   93,   70,   93,   72,   93,   93,
 /*  4440 */    93,   93,   93,   93,   93,   59,   81,   82,   83,   93,
 /*  4450 */    93,   86,   87,   93,   89,   90,   70,   93,   72,   93,
 /*  4460 */    93,   93,   93,   93,   93,   93,   93,   81,   82,   83,
 /*  4470 */    59,   93,   86,   87,   93,   89,   90,   93,   93,   93,
 /*  4480 */    93,   70,   93,   72,   93,   93,   93,   93,   93,   93,
 /*  4490 */    93,   93,   81,   82,   83,   59,   93,   86,   87,   93,
 /*  4500 */    89,   90,   93,   93,   93,   93,   70,   93,   72,   93,
 /*  4510 */    93,   93,   93,   93,   93,   93,   59,   81,   82,   83,
 /*  4520 */    93,   93,   86,   87,   93,   89,   90,   70,   93,   72,
 /*  4530 */    93,   93,   93,   93,   93,   93,   93,   93,   81,   82,
 /*  4540 */    83,   59,   93,   86,   87,   93,   89,   90,   93,   93,
 /*  4550 */    93,   93,   70,   93,   72,   93,   93,   93,   93,   93,
 /*  4560 */    93,   93,   93,   81,   82,   83,   59,   93,   86,   87,
 /*  4570 */    93,   89,   90,   93,   93,   93,   93,   70,   93,   72,
 /*  4580 */    93,   93,   93,   93,   93,   93,   93,   59,   81,   82,
 /*  4590 */    83,   93,   93,   86,   87,   93,   89,   90,   70,   93,
 /*  4600 */    72,   93,   93,   93,   93,   93,   93,   93,   93,   81,
 /*  4610 */    82,   83,   93,   93,   86,   87,   93,   89,   90,
};
#define YY_SHIFT_USE_DFLT (-39)
#define YY_SHIFT_COUNT (268)
#define YY_SHIFT_MIN   (-38)
#define YY_SHIFT_MAX   (2961)
static const short yy_shift_ofst[] = {
 /*     0 */   652, 1452, 2953, 2961, 2930, 2899, 2844, 2961, 2961, 2961,
 /*    10 */  2718, 2698, 2676, 2656, 2634, 2961, 2961,   -2, 1546, 1505,
 /*    20 */  1781, 1743, 1705, 1667, 1625, 1587, 2614, 2579, 2526, 2518,
 /*    30 */  2465, 2457, 2404, 2396, 2343, 2335, 2282, 2274, 2221, 2213,
 /*    40 */  2160, 2152, 2099, 2091, 2038, 2030, 1977, 1969, 1916, 1908,
 /*    50 */  1855, 1847, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961,
 /*    60 */  2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961,
 /*    70 */  2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961,
 /*    80 */  2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961,
 /*    90 */  2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961,
 /*   100 */  2961, 2961, 2961,  267,  647,  647,  647,  647, 1475,  103,
 /*   110 */   675,  490,   59,  170,  201,  171,  141,  649,  649,  649,
 /*   120 */   647,  265,  231,  198,  168,  138,  108,   51,  955,  930,
 /*   130 */   895,  870,  835,  808,  781,  754,  727,  700,  673,  646,
 /*   140 */   619,  590,  563,  536,  509,  482,  425,  400,  375,  350,
 /*   150 */   323,  294,  987,  987,  987, 1306, 1279, 1252, 1225, 1198,
 /*   160 */  1171, 1144, 1117, 1090, 1063, 1036, 1009,  987,  987, 1333,
 /*   170 */  1355, 1355, 1376,  445, 1395, 1416, 1439, 1439,  457,  457,
 /*   180 */   457,  457,   24,   24,  843,  843,  200,  -31,  -37,  -31,
 /*   190 */   -37,   65,   43,   -4,  871,  110,  110,  270,  110,  110,
 /*   200 */   110,  110,  266,   22,   -3,   22,  579,  628,  627,  624,
 /*   210 */   615,  603,  559,  591,  584,  568,  572,  571,  570,  539,
 /*   220 */   538,  504,  501,  479,  476,  475,  474,  450,  439,  453,
 /*   230 */   477,  458,  417,  393,  392,  371,  367,  317,  316,  315,
 /*   240 */   293,  291,  290,  288,  262,  261,  259,  297,  296,  246,
 /*   250 */   238,  229,  228,  204,  195,  192,  191,  165,  162,  161,
 /*   260 */   182,  130,  109,   84,  113,   95,    6,   42,  -38,
};
#define YY_REDUCE_USE_DFLT (-34)
#define YY_REDUCE_COUNT (120)
#define YY_REDUCE_MIN   (-33)
#define YY_REDUCE_MAX   (4528)
static const short yy_reduce_ofst[] = {
 /*     0 */    58,   28, 1760, 1449, 2788, 2843, 2788, 2756, 2731, 2706,
 /*    10 */  1785, 1785, 1785, 1785, 1785, 1785, 1643, 4528, 4507, 4482,
 /*    20 */  4457, 4436, 4411, 4386, 4365, 4340, 4315, 1722, 1722, 4294,
 /*    30 */  1722, 1722, 4269, 1722, 1722, 4244, 1722, 1722, 4223, 1722,
 /*    40 */  1722, 4198, 1722, 1722, 4173, 1722, 1722, 4152, 1722, 1722,
 /*    50 */  4127, 4102, 4081, 4056, 4031, 4010, 3985, 3960, 3939, 3914,
 /*    60 */  3889, 3868, 3843, 3818, 3797, 3772, 3747, 3726, 3701, 3676,
 /*    70 */  3655, 3630, 3605, 3584, 3559, 3534, 3513, 3488, 3463, 3442,
 /*    80 */  3417, 3392, 3371, 3346, 3321, 3300, 3275, 3250, 3229, 3204,
 /*    90 */  3179, 3158, 3133, 3108, 3087, 3062, 3037, 3016, 2991, 2966,
 /*   100 */  2940, 1722, 1681, 1539, 1534, 1499, 1494,  -33,  295,  239,
 /*   110 */   -23,  614,  605,  614,  614,  614,  614,  602,  580,  575,
 /*   120 */   564,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   397,  567,  463,  567,  567,  567,  567,  567,  567,  567,
 /*    10 */   567,  567,  567,  567,  567,  464,  567,  423,  567,  567,
 /*    20 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    30 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    40 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    50 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    60 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    70 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    80 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*    90 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   100 */   567,  567,  567,  567,  567,  567,  567,  567,  408,  567,
 /*   110 */   567,  567,  567,  567,  567,  567,  567,  567,  419,  567,
 /*   120 */   429,  567,  567,  567,  567,  567,  567,  405,  567,  567,
 /*   130 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   140 */   567,  428,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   150 */   567,  424,  476,  475,  433,  478,  478,  478,  478,  478,
 /*   160 */   478,  478,  478,  478,  478,  478,  478,  425,  405,  478,
 /*   170 */   480,  479,  494,  493,  501,  500,  488,  487,  492,  491,
 /*   180 */   490,  489,  499,  498,  482,  481,  408,  567,  410,  453,
 /*   190 */   408,  567,  567,  567,  567,  497,  495,  567,  486,  485,
 /*   200 */   484,  483,  567,  416,  505,  409,  567,  567,  567,  567,
 /*   210 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   220 */   473,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   230 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   240 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   250 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*   260 */   567,  456,  567,  567,  567,  567,  567,  567,  567,  566,
 /*   270 */   565,  438,  437,  422,  436,  421,  420,  435,  417,  477,
 /*   280 */   474,  434,  432,  418,  406,  538,  548,  535,  543,  540,
 /*   290 */   546,  539,  545,  502,  542,  536,  537,  544,  541,  547,
 /*   300 */   448,  447,  446,  509,  519,  506,  514,  511,  517,  412,
 /*   310 */   510,  516,  503,  513,  507,  508,  515,  512,  518,  414,
 /*   320 */   524,  534,  521,  529,  526,  532,  525,  531,  504,  528,
 /*   330 */   522,  523,  530,  527,  533,  415,  439,  444,  443,  441,
 /*   340 */   440,  431,  430,  427,  442,  552,  562,  549,  557,  554,
 /*   350 */   560,  452,  553,  559,  520,  556,  550,  551,  558,  555,
 /*   360 */   561,  461,  460,  459,  457,  455,  454,  564,  496,  472,
 /*   370 */   471,  470,  469,  468,  467,  466,  465,  462,  458,  563,
 /*   380 */   451,  450,  445,  407,  426,  406,  413,  411,  449,  404,
 /*   390 */   403,  402,  401,  400,  399,  398,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSIGN",        "LCBLOCK",       "RCBLOCK",     
  "LCURL",         "RCURL",         "COLON",         "DICT",        
  "WHERE",         "NAME",          "COMMA",         "BITOR",       
  "FUNCTION_DEC",  "COMPOSITION",   "FUNCTION_CALL",  "PREPEND",     
  "APPEND",        "INDEX",         "OR",            "AND",         
  "BITXOR",        "BITAND",        "EQUALTO",       "NOTEQUALTO",  
  "GREATERTHAN",   "GORE",          "LESSTHAN",      "LORE",        
  "SHIFTL",        "SHIFTR",        "PLUS",          "MINUS",       
  "DIVIDE",        "TIMES",         "MODULO",        "POW",         
  "NOT",           "BITNOT",        "UMINUS",        "PLUSPLUS",    
  "COLONCOLON",    "LPAREN",        "RPAREN",        "LBRAC",       
  "RBRAC",         "COLLECTARRAY",  "DELIMITER",     "WILDCARD",    
  "CASE",          "OF",            "LET",           "IN",          
  "PRINT",         "NUM",           "STRING",        "BOOLEAN",     
  "RANGE",         "OPENQUOTEERROR",  "error",         "expr",        
  "id",            "main",          "in",            "start",       
  "test",          "spec",          "assignment",    "top_stmt",    
  "stmt",          "name_chain",    "function_call",  "stmt_list",   
  "array_index",   "case_statement",  "guard_statement",  "final_guard_statement",
  "horizontal_assignment_list",  "assignment_list",  "vertical_assignment_list",  "final_vertical_assignment_list",
  "where",         "dict",          "string",        "name_space",  
  "vert_stmt_list",  "final_vert_stmt_list",  "vertical_array",  "array",       
  "maybe_empty_stmt_list",  "num",           "bool",          "maybe_empty_name_chain",
  "pattern",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "main ::= in",
 /*   1 */ "in ::=",
 /*   2 */ "in ::= in DELIMITER",
 /*   3 */ "in ::= in start DELIMITER",
 /*   4 */ "in ::= in test DELIMITER",
 /*   5 */ "start ::= spec",
 /*   6 */ "spec ::= assignment",
 /*   7 */ "spec ::= top_stmt",
 /*   8 */ "top_stmt ::= stmt",
 /*   9 */ "stmt ::= expr",
 /*  10 */ "name_chain ::= name_chain NAME",
 /*  11 */ "name_chain ::= NAME",
 /*  12 */ "expr ::= NAME",
 /*  13 */ "expr ::= expr COMPOSITION function_call",
 /*  14 */ "expr ::= expr COMPOSITION NAME",
 /*  15 */ "function_call ::= NAME LPAREN stmt_list RPAREN",
 /*  16 */ "function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  17 */ "expr ::= array_index LPAREN stmt_list RPAREN",
 /*  18 */ "function_call ::= NAME LPAREN RPAREN",
 /*  19 */ "function_call ::= array_index LPAREN RPAREN",
 /*  20 */ "expr ::= function_call",
 /*  21 */ "test ::= case_statement",
 /*  22 */ "guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER",
 /*  23 */ "guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER",
 /*  24 */ "final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK",
 /*  25 */ "final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK",
 /*  26 */ "assignment ::= final_guard_statement",
 /*  27 */ "assignment ::= name_chain ASSIGN expr",
 /*  28 */ "horizontal_assignment_list ::= name_chain ASSIGN expr",
 /*  29 */ "horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr",
 /*  30 */ "vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER",
 /*  31 */ "vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER",
 /*  32 */ "final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr",
 /*  33 */ "assignment_list ::= vertical_assignment_list",
 /*  34 */ "assignment_list ::= final_vertical_assignment_list",
 /*  35 */ "assignment_list ::= horizontal_assignment_list",
 /*  36 */ "where ::= WHERE LCBLOCK assignment_list RCBLOCK",
 /*  37 */ "assignment ::= name_chain ASSIGN expr expr",
 /*  38 */ "assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK",
 /*  39 */ "assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK",
 /*  40 */ "assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK",
 /*  41 */ "case_statement ::= CASE expr OF",
 /*  42 */ "test ::= LET IN",
 /*  43 */ "dict ::= DICT LCURL assignment_list RCURL",
 /*  44 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /*  45 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL",
 /*  46 */ "dict ::= LCURL assignment_list RCURL",
 /*  47 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /*  48 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL",
 /*  49 */ "expr ::= dict",
 /*  50 */ "expr ::= NAME LCURL NAME RCURL",
 /*  51 */ "expr ::= NAME LCURL string RCURL",
 /*  52 */ "name_space ::= NAME COLONCOLON NAME",
 /*  53 */ "name_space ::= function_call COLONCOLON NAME",
 /*  54 */ "name_space ::= name_space COLONCOLON NAME",
 /*  55 */ "function_call ::= name_space LPAREN stmt_list RPAREN",
 /*  56 */ "function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  57 */ "expr ::= name_space",
 /*  58 */ "vert_stmt_list ::= stmt DELIMITER",
 /*  59 */ "vert_stmt_list ::= vert_stmt_list stmt DELIMITER",
 /*  60 */ "final_vert_stmt_list ::= vert_stmt_list stmt",
 /*  61 */ "vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC",
 /*  62 */ "array ::= vertical_array",
 /*  63 */ "array ::= LBRAC maybe_empty_stmt_list RBRAC",
 /*  64 */ "stmt_list ::= stmt",
 /*  65 */ "stmt_list ::= stmt_list stmt",
 /*  66 */ "expr ::= array",
 /*  67 */ "maybe_empty_stmt_list ::=",
 /*  68 */ "maybe_empty_stmt_list ::= stmt_list",
 /*  69 */ "expr ::= num",
 /*  70 */ "expr ::= string",
 /*  71 */ "expr ::= bool",
 /*  72 */ "expr ::= PRINT LPAREN expr RPAREN",
 /*  73 */ "expr ::= LPAREN expr RPAREN",
 /*  74 */ "num ::= NUM",
 /*  75 */ "string ::= STRING",
 /*  76 */ "bool ::= BOOLEAN",
 /*  77 */ "maybe_empty_name_chain ::= name_chain",
 /*  78 */ "maybe_empty_name_chain ::= pattern",
 /*  79 */ "assignment ::= name_chain maybe_empty_name_chain ASSIGN expr",
 /*  80 */ "assignment ::= NAME maybe_empty_name_chain ASSIGN expr",
 /*  81 */ "pattern ::= LPAREN NAME PREPEND NAME RPAREN",
 /*  82 */ "expr ::= expr PREPEND expr",
 /*  83 */ "expr ::= expr APPEND expr",
 /*  84 */ "expr ::= expr PLUSPLUS expr",
 /*  85 */ "expr ::= expr PLUS expr",
 /*  86 */ "expr ::= expr MINUS expr",
 /*  87 */ "expr ::= expr DIVIDE expr",
 /*  88 */ "expr ::= expr TIMES expr",
 /*  89 */ "expr ::= expr MODULO expr",
 /*  90 */ "expr ::= expr POW expr",
 /*  91 */ "expr ::= expr EQUALTO expr",
 /*  92 */ "expr ::= expr NOTEQUALTO expr",
 /*  93 */ "expr ::= expr LESSTHAN expr",
 /*  94 */ "expr ::= expr GREATERTHAN expr",
 /*  95 */ "expr ::= expr LORE expr",
 /*  96 */ "expr ::= expr GORE expr",
 /*  97 */ "expr ::= expr AND expr",
 /*  98 */ "expr ::= expr OR expr",
 /*  99 */ "expr ::= BITNOT expr",
 /* 100 */ "expr ::= LPAREN MINUS expr RPAREN",
 /* 101 */ "expr ::= NOT expr",
 /* 102 */ "expr ::= expr SHIFTL expr",
 /* 103 */ "expr ::= expr SHIFTR expr",
 /* 104 */ "expr ::= expr BITAND expr",
 /* 105 */ "expr ::= expr BITXOR expr",
 /* 106 */ "array_index ::= function_call LBRAC expr RBRAC",
 /* 107 */ "array_index ::= NAME LBRAC expr RBRAC",
 /* 108 */ "array_index ::= array_index LBRAC expr RBRAC",
 /* 109 */ "expr ::= array_index",
 /* 110 */ "array_index ::= NAME LBRAC PREPEND expr RBRAC",
 /* 111 */ "array_index ::= NAME LBRAC expr PREPEND RBRAC",
 /* 112 */ "array_index ::= NAME LBRAC expr PREPEND expr RBRAC",
 /* 113 */ "array_index ::= NAME LBRAC COLONCOLON expr RBRAC",
 /* 114 */ "array_index ::= NAME LBRAC expr COLONCOLON expr RBRAC",
 /* 115 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 116 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 117 */ "array_index ::= NAME LBRAC expr PREPEND MODULO RBRAC",
 /* 118 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 119 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 120 */ "array_index ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 121 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 122 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 123 */ "array_index ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 124 */ "array_index ::= name_space LBRAC expr RBRAC",
 /* 125 */ "array_index ::= array_index LBRAC PREPEND expr RBRAC",
 /* 126 */ "array_index ::= array_index LBRAC expr PREPEND RBRAC",
 /* 127 */ "array_index ::= array_index LBRAC expr PREPEND expr RBRAC",
 /* 128 */ "array_index ::= array_index LBRAC COLONCOLON expr RBRAC",
 /* 129 */ "array_index ::= array_index LBRAC expr COLONCOLON expr RBRAC",
 /* 130 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 131 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 132 */ "array_index ::= array_index LBRAC expr PREPEND MODULO RBRAC",
 /* 133 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 134 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 135 */ "array_index ::= array_index LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 136 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 137 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 138 */ "array_index ::= array_index LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 139 */ "array_index ::= function_call LBRAC PREPEND expr RBRAC",
 /* 140 */ "array_index ::= function_call LBRAC expr PREPEND RBRAC",
 /* 141 */ "array_index ::= function_call LBRAC expr PREPEND expr RBRAC",
 /* 142 */ "array_index ::= function_call LBRAC COLONCOLON expr RBRAC",
 /* 143 */ "array_index ::= function_call LBRAC expr COLONCOLON expr RBRAC",
 /* 144 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 145 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 146 */ "array_index ::= function_call LBRAC expr PREPEND MODULO RBRAC",
 /* 147 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 148 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 149 */ "array_index ::= function_call LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 150 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 151 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 152 */ "array_index ::= function_call LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 153 */ "array_index ::= name_space LBRAC PREPEND expr RBRAC",
 /* 154 */ "array_index ::= name_space LBRAC expr PREPEND RBRAC",
 /* 155 */ "array_index ::= name_space LBRAC expr PREPEND expr RBRAC",
 /* 156 */ "array_index ::= name_space LBRAC COLONCOLON expr RBRAC",
 /* 157 */ "array_index ::= name_space LBRAC expr COLONCOLON expr RBRAC",
 /* 158 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 159 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 160 */ "array_index ::= name_space LBRAC expr PREPEND MODULO RBRAC",
 /* 161 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 162 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 163 */ "array_index ::= name_space LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 164 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 165 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 166 */ "array_index ::= name_space LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 167 */ "expr ::= LBRAC expr RANGE expr RBRAC",
 /* 168 */ "expr ::= LBRAC expr COMMA expr RANGE expr RBRAC",
 /* 169 */ "in ::= error",
 /* 170 */ "error ::= OPENQUOTEERROR",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* ASSIGN */
    case 2: /* LCBLOCK */
    case 3: /* RCBLOCK */
    case 4: /* LCURL */
    case 5: /* RCURL */
    case 6: /* COLON */
    case 7: /* DICT */
    case 8: /* WHERE */
    case 9: /* NAME */
    case 10: /* COMMA */
    case 11: /* BITOR */
    case 12: /* FUNCTION_DEC */
    case 13: /* COMPOSITION */
    case 14: /* FUNCTION_CALL */
    case 15: /* PREPEND */
    case 16: /* APPEND */
    case 17: /* INDEX */
    case 18: /* OR */
    case 19: /* AND */
    case 20: /* BITXOR */
    case 21: /* BITAND */
    case 22: /* EQUALTO */
    case 23: /* NOTEQUALTO */
    case 24: /* GREATERTHAN */
    case 25: /* GORE */
    case 26: /* LESSTHAN */
    case 27: /* LORE */
    case 28: /* SHIFTL */
    case 29: /* SHIFTR */
    case 30: /* PLUS */
    case 31: /* MINUS */
    case 32: /* DIVIDE */
    case 33: /* TIMES */
    case 34: /* MODULO */
    case 35: /* POW */
    case 36: /* NOT */
    case 37: /* BITNOT */
    case 38: /* UMINUS */
    case 39: /* PLUSPLUS */
    case 40: /* COLONCOLON */
    case 41: /* LPAREN */
    case 42: /* RPAREN */
    case 43: /* LBRAC */
    case 44: /* RBRAC */
    case 45: /* COLLECTARRAY */
    case 46: /* DELIMITER */
    case 47: /* WILDCARD */
    case 48: /* CASE */
    case 49: /* OF */
    case 50: /* LET */
    case 51: /* IN */
    case 52: /* PRINT */
    case 53: /* NUM */
    case 54: /* STRING */
    case 55: /* BOOLEAN */
    case 56: /* RANGE */
    case 57: /* OPENQUOTEERROR */
{
#line 45 "./src/Grammar/grammar.y"
 token_destructor((yypminor->yy0)); 
#line 1639 "./src/Grammar/grammar.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 61, 1 },
  { 62, 0 },
  { 62, 2 },
  { 62, 3 },
  { 62, 3 },
  { 63, 1 },
  { 65, 1 },
  { 65, 1 },
  { 67, 1 },
  { 68, 1 },
  { 69, 2 },
  { 69, 1 },
  { 59, 1 },
  { 59, 3 },
  { 59, 3 },
  { 70, 4 },
  { 70, 6 },
  { 59, 4 },
  { 70, 3 },
  { 70, 3 },
  { 59, 1 },
  { 64, 1 },
  { 74, 7 },
  { 74, 6 },
  { 75, 6 },
  { 75, 6 },
  { 66, 1 },
  { 66, 3 },
  { 76, 3 },
  { 76, 4 },
  { 78, 4 },
  { 78, 5 },
  { 79, 4 },
  { 77, 1 },
  { 77, 1 },
  { 77, 1 },
  { 80, 4 },
  { 66, 4 },
  { 66, 6 },
  { 66, 8 },
  { 66, 8 },
  { 73, 3 },
  { 64, 2 },
  { 81, 4 },
  { 81, 7 },
  { 81, 6 },
  { 81, 3 },
  { 81, 6 },
  { 81, 5 },
  { 59, 1 },
  { 59, 4 },
  { 59, 4 },
  { 83, 3 },
  { 83, 3 },
  { 83, 3 },
  { 70, 4 },
  { 70, 6 },
  { 59, 1 },
  { 84, 2 },
  { 84, 3 },
  { 85, 2 },
  { 86, 5 },
  { 87, 1 },
  { 87, 3 },
  { 71, 1 },
  { 71, 2 },
  { 59, 1 },
  { 88, 0 },
  { 88, 1 },
  { 59, 1 },
  { 59, 1 },
  { 59, 1 },
  { 59, 4 },
  { 59, 3 },
  { 89, 1 },
  { 82, 1 },
  { 90, 1 },
  { 91, 1 },
  { 91, 1 },
  { 66, 4 },
  { 66, 4 },
  { 92, 5 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 2 },
  { 59, 4 },
  { 59, 2 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 72, 4 },
  { 72, 4 },
  { 72, 4 },
  { 59, 1 },
  { 72, 5 },
  { 72, 5 },
  { 72, 6 },
  { 72, 5 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 8 },
  { 72, 9 },
  { 72, 10 },
  { 72, 7 },
  { 72, 4 },
  { 72, 5 },
  { 72, 5 },
  { 72, 6 },
  { 72, 5 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 8 },
  { 72, 9 },
  { 72, 10 },
  { 72, 7 },
  { 72, 5 },
  { 72, 5 },
  { 72, 6 },
  { 72, 5 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 8 },
  { 72, 9 },
  { 72, 10 },
  { 72, 7 },
  { 72, 5 },
  { 72, 5 },
  { 72, 6 },
  { 72, 5 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 6 },
  { 72, 7 },
  { 72, 8 },
  { 72, 8 },
  { 72, 9 },
  { 72, 10 },
  { 72, 7 },
  { 59, 5 },
  { 59, 7 },
  { 62, 1 },
  { 58, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 2: /* in ::= in DELIMITER */
      case 3: /* in ::= in start DELIMITER */ yytestcase(yyruleno==3);
      case 4: /* in ::= in test DELIMITER */ yytestcase(yyruleno==4);
#line 95 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2109 "./src/Grammar/grammar.c"
        break;
      case 5: /* start ::= spec */
#line 101 "./src/Grammar/grammar.y"
{
/*    std::cout << "Object of type: " << yymsp[0].minor.yy0.type << " hit the stack!" << std::endl;*/
/*    optic::out() << "Object at end of parser: ";*/
/*    print_object(yymsp[0].minor.yy0);*/
    if(yymsp[0].minor.yy0.type!=optic::OPERATION_TREE)
    {
        optic::object a = mem_alloc(optic::OPERATION_TREE);
        a.data.array->push_back(yymsp[0].minor.yy0);
        optic::resolve_stack_from_parser(a, true);
    }
    else
    {
        optic::resolve_stack_from_parser(yymsp[0].minor.yy0, true);
/*        optic::resolve_stack_from_parser(flatten_tree(yymsp[0].minor.yy0), true);*/
    }
}
#line 2129 "./src/Grammar/grammar.c"
        break;
      case 6: /* spec ::= assignment */
      case 21: /* test ::= case_statement */ yytestcase(yyruleno==21);
#line 119 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;
}
#line 2137 "./src/Grammar/grammar.c"
        break;
      case 7: /* spec ::= top_stmt */
      case 8: /* top_stmt ::= stmt */ yytestcase(yyruleno==8);
#line 124 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;

}
#line 2146 "./src/Grammar/grammar.c"
        break;
      case 9: /* stmt ::= expr */
#line 136 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;

}
#line 2154 "./src/Grammar/grammar.c"
        break;
      case 10: /* name_chain ::= name_chain NAME */
#line 142 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type!=optic::ARRAY)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);

        yymsp[-1].minor.yy0.type = optic::STRING;
        yymsp[0].minor.yy0.type = optic::STRING;

        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0 = yymsp[-1].minor.yy0;
        yymsp[0].minor.yy0.type = optic::STRING;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 2176 "./src/Grammar/grammar.c"
        break;
      case 11: /* name_chain ::= NAME */
#line 162 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
    yygotominor.yy0.type = optic::STRING;
}
#line 2184 "./src/Grammar/grammar.c"
        break;
      case 12: /* expr ::= NAME */
#line 168 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
    yygotominor.yy0.type = optic::UNDECLARED_VARIABLE;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2197 "./src/Grammar/grammar.c"
        break;
      case 13: /* expr ::= expr COMPOSITION function_call */
#line 179 "./src/Grammar/grammar.y"
{
    if(yymsp[0].minor.yy0.type==optic::OPERATION_TREE)
    {
        yymsp[0].minor.yy0.data.array->at(2).data.array->push_front(yymsp[-2].minor.yy0);
        yygotominor.yy0 = yymsp[0].minor.yy0;
    }
    else
    {
        optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        function_body.data.array->push_back(yymsp[-2].minor.yy0);
        yymsp[0].minor.yy0.type = optic::STRING;
        optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
    }
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2216 "./src/Grammar/grammar.c"
        break;
      case 14: /* expr ::= expr COMPOSITION NAME */
#line 195 "./src/Grammar/grammar.y"
{
    optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);;
    function_body.data.array->push_back(yymsp[-2].minor.yy0);
    yymsp[0].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2227 "./src/Grammar/grammar.c"
        break;
      case 15: /* function_call ::= NAME LPAREN stmt_list RPAREN */
#line 203 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::object b;
    b.type = optic::STRING;
    b.data.string = yymsp[-3].minor.yy0.data.string;
    optic::store_operations(yygotominor.yy0,b,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2254 "./src/Grammar/grammar.c"
        break;
      case 16: /* function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 226 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }

    yymsp[-5].minor.yy0.type = optic::VARIABLE;
    optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,44,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2282 "./src/Grammar/grammar.c"
        break;
      case 17: /* expr ::= array_index LPAREN stmt_list RPAREN */
#line 248 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2306 "./src/Grammar/grammar.c"
        break;
      case 18: /* function_call ::= NAME LPAREN RPAREN */
#line 269 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2321 "./src/Grammar/grammar.c"
        break;
      case 19: /* function_call ::= array_index LPAREN RPAREN */
#line 280 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2335 "./src/Grammar/grammar.c"
        break;
      case 20: /* expr ::= function_call */
      case 33: /* assignment_list ::= vertical_assignment_list */ yytestcase(yyruleno==33);
      case 34: /* assignment_list ::= final_vertical_assignment_list */ yytestcase(yyruleno==34);
      case 35: /* assignment_list ::= horizontal_assignment_list */ yytestcase(yyruleno==35);
      case 57: /* expr ::= name_space */ yytestcase(yyruleno==57);
      case 64: /* stmt_list ::= stmt */ yytestcase(yyruleno==64);
      case 66: /* expr ::= array */ yytestcase(yyruleno==66);
      case 109: /* expr ::= array_index */ yytestcase(yyruleno==109);
#line 290 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 2349 "./src/Grammar/grammar.c"
        break;
      case 22: /* guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER */
#line 302 "./src/Grammar/grammar.y"
{
    optic::object tree = create_condition_tree(yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0 = create_guard(yymsp[-6].minor.yy0,tree);
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2361 "./src/Grammar/grammar.c"
        break;
      case 23: /* guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER */
#line 308 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2372 "./src/Grammar/grammar.c"
        break;
      case 24: /* final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK */
#line 314 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2383 "./src/Grammar/grammar.c"
        break;
      case 25: /* final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK */
#line 320 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-5].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,47,&yymsp[-3].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2395 "./src/Grammar/grammar.c"
        break;
      case 26: /* assignment ::= final_guard_statement */
#line 326 "./src/Grammar/grammar.y"
{

    panopticon::object& b = yymsp[0].minor.yy0.data.array->at(0);
    panopticon::object& c = yymsp[0].minor.yy0.data.array->at(1);

    panopticon::object resolve;
    panopticon::store_operations(resolve, c, &panopticon::resolve_guard,false);

    resolve.type = panopticon::FUNCTION_BODY;
    b.type = optic::FUNCTION_ARG_NAMES;
    panopticon::store_operations(yygotominor.yy0, b, resolve, &panopticon::assign_variable,false);
    optic::shallow_mem_free_array(yymsp[0].minor.yy0.data.array,optic::GUARD);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2417 "./src/Grammar/grammar.c"
        break;
      case 27: /* assignment ::= name_chain ASSIGN expr */
#line 346 "./src/Grammar/grammar.y"
{
    insure_ready_for_assignment(yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    panopticon::store_operations(yygotominor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2431 "./src/Grammar/grammar.c"
        break;
      case 28: /* horizontal_assignment_list ::= name_chain ASSIGN expr */
#line 361 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2441 "./src/Grammar/grammar.c"
        break;
      case 29: /* horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr */
      case 32: /* final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr */ yytestcase(yyruleno==32);
#line 368 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2452 "./src/Grammar/grammar.c"
        break;
      case 30: /* vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER */
#line 375 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2463 "./src/Grammar/grammar.c"
        break;
      case 31: /* vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER */
#line 382 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-4].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2474 "./src/Grammar/grammar.c"
        break;
      case 36: /* where ::= WHERE LCBLOCK assignment_list RCBLOCK */
#line 411 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    optic::object serial_result;
    optic::object result;
    optic::object previous_result;
    for(int i=0;i<yymsp[-1].minor.yy0.data.array->size(); i+=2)
    {
        insure_ready_for_assignment(
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1)
        );
        panopticon::store_operations(
            result,
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1),
            panopticon::assign_variable
        );
        optic::store_operations(serial_result,previous_result,result);
        previous_result = serial_result;
    }
    optic::shallow_mem_free_array(yymsp[-1].minor.yy0.data.array,optic::ARRAY);
    yygotominor.yy0 = serial_result;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2509 "./src/Grammar/grammar.c"
        break;
      case 37: /* assignment ::= name_chain ASSIGN expr expr */
#line 441 "./src/Grammar/grammar.y"
{
    optic::out() << "Error: Cannot declare two statements in a single assignment." << std::endl;
    optic::correct_parsing = false;
    while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
    ParseARG_STORE;
  yy_destructor(yypParser,1,&yymsp[-2].minor);
}
#line 2520 "./src/Grammar/grammar.c"
        break;
      case 38: /* assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK */
#line 449 "./src/Grammar/grammar.y"
{
    panopticon::object body;
    panopticon::store_operations(body,yymsp[-1].minor.yy0,yymsp[-3].minor.yy0,false);
    insure_ready_for_assignment(yymsp[-5].minor.yy0,body);
    panopticon::store_operations(yygotominor.yy0, yymsp[-5].minor.yy0, body, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2538 "./src/Grammar/grammar.c"
        break;
      case 39: /* assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK */
#line 462 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-7].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    panopticon::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(yymsp[-7].minor.yy0,combined);
    panopticon::store_operations(yygotominor.yy0, yymsp[-7].minor.yy0, combined, panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,11,&yymsp[-6].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,46,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2564 "./src/Grammar/grammar.c"
        break;
      case 40: /* assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK */
#line 482 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-7].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    optic::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(b,combined);
    panopticon::store_operations(yygotominor.yy0, b, combined, &panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,11,&yymsp[-6].minor);
  yy_destructor(yypParser,47,&yymsp[-5].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,46,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2591 "./src/Grammar/grammar.c"
        break;
      case 41: /* case_statement ::= CASE expr OF */
#line 506 "./src/Grammar/grammar.y"
{
/*    yygotominor.yy0=B;*/
    yygotominor.yy0.type = optic::GUARD;
  yy_destructor(yypParser,48,&yymsp[-2].minor);
  yy_destructor(yypParser,49,&yymsp[0].minor);
}
#line 2601 "./src/Grammar/grammar.c"
        break;
      case 42: /* test ::= LET IN */
#line 511 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,50,&yymsp[-1].minor);
  yy_destructor(yypParser,51,&yymsp[0].minor);
}
#line 2609 "./src/Grammar/grammar.c"
        break;
      case 43: /* dict ::= DICT LCURL assignment_list RCURL */
#line 523 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2619 "./src/Grammar/grammar.c"
        break;
      case 44: /* dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL */
#line 528 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-6].minor);
  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2632 "./src/Grammar/grammar.c"
        break;
      case 45: /* dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL */
#line 533 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2644 "./src/Grammar/grammar.c"
        break;
      case 46: /* dict ::= LCURL assignment_list RCURL */
#line 538 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2653 "./src/Grammar/grammar.c"
        break;
      case 47: /* dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL */
#line 543 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2665 "./src/Grammar/grammar.c"
        break;
      case 48: /* dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL */
#line 548 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2676 "./src/Grammar/grammar.c"
        break;
      case 49: /* expr ::= dict */
#line 553 "./src/Grammar/grammar.y"
{
    optic::object dict;
    optic::store_operations(dict,yymsp[0].minor.yy0,&optic::create_dictionary,false);

    optic::optic_stack.push_back(dict);
    optic::evaluate_top();
/*    yygotominor.yy0 = optic::mem_copy(optic::optic_stack.back());*/
    yygotominor.yy0 = optic::optic_stack.back();
    optic::optic_stack.pop_back();
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2695 "./src/Grammar/grammar.c"
        break;
      case 50: /* expr ::= NAME LCURL NAME RCURL */
      case 51: /* expr ::= NAME LCURL string RCURL */ yytestcase(yyruleno==51);
#line 571 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2710 "./src/Grammar/grammar.c"
        break;
      case 52: /* name_space ::= NAME COLONCOLON NAME */
#line 591 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-1].minor);
}
#line 2725 "./src/Grammar/grammar.c"
        break;
      case 53: /* name_space ::= function_call COLONCOLON NAME */
      case 54: /* name_space ::= name_space COLONCOLON NAME */ yytestcase(yyruleno==54);
#line 603 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-1].minor);
}
#line 2740 "./src/Grammar/grammar.c"
        break;
      case 55: /* function_call ::= name_space LPAREN stmt_list RPAREN */
#line 625 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
            optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    }
    else
    {
        optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
/*        yymsp[-1].minor.yy0.data.array->push_back(temp);*/
        args.data.array->push_back(yymsp[-1].minor.yy0);
        optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,args,optic::call_function);
    }

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2766 "./src/Grammar/grammar.c"
        break;
      case 56: /* function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 648 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
            optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    }
    else
    {
        optic::object temp = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        temp.data.array->push_back(yymsp[-1].minor.yy0);
        optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,temp,optic::call_function);
    }


    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,44,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2794 "./src/Grammar/grammar.c"
        break;
      case 58: /* vert_stmt_list ::= stmt DELIMITER */
#line 678 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2802 "./src/Grammar/grammar.c"
        break;
      case 59: /* vert_stmt_list ::= vert_stmt_list stmt DELIMITER */
#line 683 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-2].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
        yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-2].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2821 "./src/Grammar/grammar.c"
        break;
      case 60: /* final_vert_stmt_list ::= vert_stmt_list stmt */
      case 65: /* stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==65);
#line 699 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-1].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-1].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 2840 "./src/Grammar/grammar.c"
        break;
      case 61: /* vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC */
#line 715 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2852 "./src/Grammar/grammar.c"
        break;
      case 62: /* array ::= vertical_array */
#line 721 "./src/Grammar/grammar.y"
{
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2859 "./src/Grammar/grammar.c"
        break;
      case 63: /* array ::= LBRAC maybe_empty_stmt_list RBRAC */
#line 726 "./src/Grammar/grammar.y"
{
    yymsp[-1].minor.yy0.type = optic::ARRAY;
    create_tree(yygotominor.yy0,yymsp[-1].minor.yy0);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2869 "./src/Grammar/grammar.c"
        break;
      case 67: /* maybe_empty_stmt_list ::= */
#line 758 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
}
#line 2876 "./src/Grammar/grammar.c"
        break;
      case 68: /* maybe_empty_stmt_list ::= stmt_list */
#line 763 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[0].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[0].minor.yy0.data.array;
    }
}
#line 2892 "./src/Grammar/grammar.c"
        break;
      case 69: /* expr ::= num */
      case 71: /* expr ::= bool */ yytestcase(yyruleno==71);
#line 781 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
/*    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);*/
}
#line 2901 "./src/Grammar/grammar.c"
        break;
      case 70: /* expr ::= string */
#line 787 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
/*   create_tree(yygotominor.yy0,yymsp[0].minor.yy0);*/
}
#line 2909 "./src/Grammar/grammar.c"
        break;
      case 72: /* expr ::= PRINT LPAREN expr RPAREN */
#line 803 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&optic::unary_print_object,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,52,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2924 "./src/Grammar/grammar.c"
        break;
      case 73: /* expr ::= LPAREN expr RPAREN */
#line 813 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2933 "./src/Grammar/grammar.c"
        break;
      case 74: /* num ::= NUM */
#line 818 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2941 "./src/Grammar/grammar.c"
        break;
      case 75: /* string ::= STRING */
#line 824 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::STRING;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2949 "./src/Grammar/grammar.c"
        break;
      case 76: /* bool ::= BOOLEAN */
#line 831 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::BOOL;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2957 "./src/Grammar/grammar.c"
        break;
      case 77: /* maybe_empty_name_chain ::= name_chain */
#line 842 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yymsp[0].minor.yy0.type = optic::STRING;
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2966 "./src/Grammar/grammar.c"
        break;
      case 78: /* maybe_empty_name_chain ::= pattern */
#line 848 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2974 "./src/Grammar/grammar.c"
        break;
      case 79: /* assignment ::= name_chain maybe_empty_name_chain ASSIGN expr */
      case 80: /* assignment ::= NAME maybe_empty_name_chain ASSIGN expr */ yytestcase(yyruleno==80);
#line 854 "./src/Grammar/grammar.y"
{
    optic::out() << "Pattern assignment" << std::endl;
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2984 "./src/Grammar/grammar.c"
        break;
      case 81: /* pattern ::= LPAREN NAME PREPEND NAME RPAREN */
#line 866 "./src/Grammar/grammar.y"
{
    std::cout << "PATTERN_ARGUMENT" << std::endl;
    yymsp[-3].minor.yy0.type = optic::PATTERN;
    yymsp[-1].minor.yy0.type = optic::PATTERN;
    yygotominor.yy0.type = optic::PATTERN;

  yy_destructor(yypParser,41,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2998 "./src/Grammar/grammar.c"
        break;
      case 82: /* expr ::= expr PREPEND expr */
#line 875 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::prepend,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3011 "./src/Grammar/grammar.c"
        break;
      case 83: /* expr ::= expr APPEND expr */
#line 885 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::append,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3024 "./src/Grammar/grammar.c"
        break;
      case 84: /* expr ::= expr PLUSPLUS expr */
#line 895 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::concat,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,39,&yymsp[-1].minor);
}
#line 3037 "./src/Grammar/grammar.c"
        break;
      case 85: /* expr ::= expr PLUS expr */
#line 905 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::plus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,30,&yymsp[-1].minor);
}
#line 3050 "./src/Grammar/grammar.c"
        break;
      case 86: /* expr ::= expr MINUS expr */
#line 915 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,31,&yymsp[-1].minor);
}
#line 3063 "./src/Grammar/grammar.c"
        break;
      case 87: /* expr ::= expr DIVIDE expr */
#line 925 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::divide);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
#line 3076 "./src/Grammar/grammar.c"
        break;
      case 88: /* expr ::= expr TIMES expr */
#line 935 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::multiply);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
#line 3089 "./src/Grammar/grammar.c"
        break;
      case 89: /* expr ::= expr MODULO expr */
#line 945 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::modulo);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
#line 3102 "./src/Grammar/grammar.c"
        break;
      case 90: /* expr ::= expr POW expr */
#line 955 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_pow);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,35,&yymsp[-1].minor);
}
#line 3115 "./src/Grammar/grammar.c"
        break;
      case 91: /* expr ::= expr EQUALTO expr */
#line 965 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,22,&yymsp[-1].minor);
}
#line 3128 "./src/Grammar/grammar.c"
        break;
      case 92: /* expr ::= expr NOTEQUALTO expr */
#line 975 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::not_equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,23,&yymsp[-1].minor);
}
#line 3141 "./src/Grammar/grammar.c"
        break;
      case 93: /* expr ::= expr LESSTHAN expr */
#line 985 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::less_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 3154 "./src/Grammar/grammar.c"
        break;
      case 94: /* expr ::= expr GREATERTHAN expr */
#line 995 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::greater_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,24,&yymsp[-1].minor);
}
#line 3167 "./src/Grammar/grammar.c"
        break;
      case 95: /* expr ::= expr LORE expr */
#line 1005 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::lore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 3180 "./src/Grammar/grammar.c"
        break;
      case 96: /* expr ::= expr GORE expr */
#line 1015 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::gore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,25,&yymsp[-1].minor);
}
#line 3193 "./src/Grammar/grammar.c"
        break;
      case 97: /* expr ::= expr AND expr */
#line 1025 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 3206 "./src/Grammar/grammar.c"
        break;
      case 98: /* expr ::= expr OR expr */
#line 1035 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_or);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3219 "./src/Grammar/grammar.c"
        break;
      case 99: /* expr ::= BITNOT expr */
#line 1045 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&optic::bit_not);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-1].minor);
}
#line 3232 "./src/Grammar/grammar.c"
        break;
      case 100: /* expr ::= LPAREN MINUS expr RPAREN */
#line 1055 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&panopticon::u_minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-3].minor);
  yy_destructor(yypParser,31,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 3247 "./src/Grammar/grammar.c"
        break;
      case 101: /* expr ::= NOT expr */
#line 1065 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&panopticon::not_value);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
#line 3260 "./src/Grammar/grammar.c"
        break;
      case 102: /* expr ::= expr SHIFTL expr */
#line 1075 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_left);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,28,&yymsp[-1].minor);
}
#line 3273 "./src/Grammar/grammar.c"
        break;
      case 103: /* expr ::= expr SHIFTR expr */
#line 1085 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_right);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
#line 3286 "./src/Grammar/grammar.c"
        break;
      case 104: /* expr ::= expr BITAND expr */
#line 1095 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,21,&yymsp[-1].minor);
}
#line 3299 "./src/Grammar/grammar.c"
        break;
      case 105: /* expr ::= expr BITXOR expr */
#line 1105 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_xor);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 3312 "./src/Grammar/grammar.c"
        break;
      case 106: /* array_index ::= function_call LBRAC expr RBRAC */
      case 108: /* array_index ::= array_index LBRAC expr RBRAC */ yytestcase(yyruleno==108);
      case 124: /* array_index ::= name_space LBRAC expr RBRAC */ yytestcase(yyruleno==124);
#line 1115 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3328 "./src/Grammar/grammar.c"
        break;
      case 107: /* array_index ::= NAME LBRAC expr RBRAC */
#line 1125 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3343 "./src/Grammar/grammar.c"
        break;
      case 110: /* array_index ::= NAME LBRAC PREPEND expr RBRAC */
      case 125: /* array_index ::= array_index LBRAC PREPEND expr RBRAC */ yytestcase(yyruleno==125);
      case 139: /* array_index ::= function_call LBRAC PREPEND expr RBRAC */ yytestcase(yyruleno==139);
      case 153: /* array_index ::= name_space LBRAC PREPEND expr RBRAC */ yytestcase(yyruleno==153);
#line 1158 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-1].minor.yy0,optic::slice_beginning_to,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3356 "./src/Grammar/grammar.c"
        break;
      case 111: /* array_index ::= NAME LBRAC expr PREPEND RBRAC */
      case 126: /* array_index ::= array_index LBRAC expr PREPEND RBRAC */ yytestcase(yyruleno==126);
      case 140: /* array_index ::= function_call LBRAC expr PREPEND RBRAC */ yytestcase(yyruleno==140);
      case 154: /* array_index ::= name_space LBRAC expr PREPEND RBRAC */ yytestcase(yyruleno==154);
#line 1164 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,optic::slice_to_end,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3369 "./src/Grammar/grammar.c"
        break;
      case 112: /* array_index ::= NAME LBRAC expr PREPEND expr RBRAC */
      case 127: /* array_index ::= array_index LBRAC expr PREPEND expr RBRAC */ yytestcase(yyruleno==127);
      case 141: /* array_index ::= function_call LBRAC expr PREPEND expr RBRAC */ yytestcase(yyruleno==141);
      case 155: /* array_index ::= name_space LBRAC expr PREPEND expr RBRAC */ yytestcase(yyruleno==155);
#line 1170 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,range,optic::slice,false);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3385 "./src/Grammar/grammar.c"
        break;
      case 113: /* array_index ::= NAME LBRAC COLONCOLON expr RBRAC */
      case 128: /* array_index ::= array_index LBRAC COLONCOLON expr RBRAC */ yytestcase(yyruleno==128);
      case 142: /* array_index ::= function_call LBRAC COLONCOLON expr RBRAC */ yytestcase(yyruleno==142);
      case 156: /* array_index ::= name_space LBRAC COLONCOLON expr RBRAC */ yytestcase(yyruleno==156);
#line 1181 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-1].minor.yy0,optic::slice_all_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3398 "./src/Grammar/grammar.c"
        break;
      case 114: /* array_index ::= NAME LBRAC expr COLONCOLON expr RBRAC */
      case 129: /* array_index ::= array_index LBRAC expr COLONCOLON expr RBRAC */ yytestcase(yyruleno==129);
      case 143: /* array_index ::= function_call LBRAC expr COLONCOLON expr RBRAC */ yytestcase(yyruleno==143);
      case 157: /* array_index ::= name_space LBRAC expr COLONCOLON expr RBRAC */ yytestcase(yyruleno==157);
#line 1187 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,range,optic::slice_beginning_to_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3414 "./src/Grammar/grammar.c"
        break;
      case 115: /* array_index ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC */
      case 130: /* array_index ::= array_index LBRAC PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==130);
      case 144: /* array_index ::= function_call LBRAC PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==144);
      case 158: /* array_index ::= name_space LBRAC PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==158);
#line 1196 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,range,optic::slice_to_end_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3431 "./src/Grammar/grammar.c"
        break;
      case 116: /* array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC */
      case 131: /* array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==131);
      case 145: /* array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==145);
      case 159: /* array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==159);
#line 1205 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3449 "./src/Grammar/grammar.c"
        break;
      case 117: /* array_index ::= NAME LBRAC expr PREPEND MODULO RBRAC */
      case 132: /* array_index ::= array_index LBRAC expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==132);
      case 146: /* array_index ::= function_call LBRAC expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==146);
      case 160: /* array_index ::= name_space LBRAC expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==160);
#line 1216 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,optic::slice_beginning_to_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3463 "./src/Grammar/grammar.c"
        break;
      case 118: /* array_index ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC */
      case 133: /* array_index ::= array_index LBRAC PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==133);
      case 147: /* array_index ::= function_call LBRAC PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==147);
      case 161: /* array_index ::= name_space LBRAC PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==161);
#line 1222 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,optic::slice_to_end_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3478 "./src/Grammar/grammar.c"
        break;
      case 119: /* array_index ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC */
      case 134: /* array_index ::= array_index LBRAC expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==134);
      case 148: /* array_index ::= function_call LBRAC expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==148);
      case 162: /* array_index ::= name_space LBRAC expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==162);
#line 1228 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_with_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3496 "./src/Grammar/grammar.c"
        break;
      case 120: /* array_index ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */
      case 135: /* array_index ::= array_index LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==135);
      case 149: /* array_index ::= function_call LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==149);
      case 163: /* array_index ::= name_space LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==163);
#line 1237 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_beginning_to_with_step_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,40,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3514 "./src/Grammar/grammar.c"
        break;
      case 121: /* array_index ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */
      case 136: /* array_index ::= array_index LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==136);
      case 150: /* array_index ::= function_call LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==150);
      case 164: /* array_index ::= name_space LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==164);
#line 1246 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-8].minor.yy0,range,optic::slice_to_end_with_step_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-7].minor);
  yy_destructor(yypParser,15,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3533 "./src/Grammar/grammar.c"
        break;
      case 122: /* array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */
      case 137: /* array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==137);
      case 151: /* array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==151);
      case 165: /* array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==165);
#line 1255 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-7].minor.yy0);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-9].minor.yy0,range,optic::slice_with_step_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-8].minor);
  yy_destructor(yypParser,15,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3553 "./src/Grammar/grammar.c"
        break;
      case 123: /* array_index ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC */
      case 138: /* array_index ::= array_index LBRAC COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==138);
      case 152: /* array_index ::= function_call LBRAC COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==152);
      case 166: /* array_index ::= name_space LBRAC COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==166);
#line 1265 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,optic::slice_all_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,40,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3568 "./src/Grammar/grammar.c"
        break;
      case 167: /* expr ::= LBRAC expr RANGE expr RBRAC */
#line 1634 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::range_from_to);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,56,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3578 "./src/Grammar/grammar.c"
        break;
      case 168: /* expr ::= LBRAC expr COMMA expr RANGE expr RBRAC */
#line 1639 "./src/Grammar/grammar.y"
{
    optic::object start_step = optic::mem_alloc(optic::ARRAY);
    start_step.data.array->push_back(yymsp[-5].minor.yy0);
    start_step.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,start_step,yymsp[-1].minor.yy0,optic::range_from_step_to,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,10,&yymsp[-4].minor);
  yy_destructor(yypParser,56,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3592 "./src/Grammar/grammar.c"
        break;
      case 169: /* in ::= error */
#line 1652 "./src/Grammar/grammar.y"
{
    switch(yymsp[0].minor.yy187)
    {
    case panopticon::OpenQuoteError:
/*        panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;*/
        break;
    default:
/*        panopticon::out() << "ERROR p0000: UnknownError" << std::endl;*/
        break;
    }
}
#line 3607 "./src/Grammar/grammar.c"
        break;
      case 170: /* error ::= OPENQUOTEERROR */
#line 1665 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy187 = panopticon::OpenQuoteError;
    panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;
}
#line 3616 "./src/Grammar/grammar.c"
        break;
      default:
      /* (0) main ::= in */ yytestcase(yyruleno==0);
      /* (1) in ::= */ yytestcase(yyruleno==1);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 89 "./src/Grammar/grammar.y"

panopticon::out() << "Syntax error!" << std::endl;
#line 3683 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 84 "./src/Grammar/grammar.y"

printf("parsing complete!\n\n\n");
#line 3705 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
