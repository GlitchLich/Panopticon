/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is include which follows the "include" declaration
** in the input file. */
#include <stdio.h>
#line 3 "./src/Grammar/grammar.y"

#include <iostream>
#include "../../include/Grammar/tokens.h"
#include "../../include/Grammar/grammar.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
/*#include "lexglobal.h"*/
#include <assert.h>
#include <math.h>
#define BUFS 1024
#include <stdio.h>
#include <string.h>
#include "core/operators.h"
#include "../../include/Grammar/parsingutilities.h"
#include "../../include/core/types.h"
#include "../../include/Grammar/parse.h"
#include "../../include/core/errors.h"
#include "../../include/core/heap.h"
#include "include/core/stack.h"
#include "include/core/Trie.h"
#include "core/Memory.h"
#include "include/Grammar/typeinference.h"
#include "include/Grammar/parse_ast.h"

#undef STRING
#undef NUM
#undef BOOL
#undef panopticon::ARRAY

/*using namespace panopticon;*/

    void token_destructor(Token t)
    {
/*        std::cout << "token_destructor()" << std::endl;*/
        //TO DO: Do we need to free the tokens or not? I don't think so...
/*        mem_free(t);*/
    }
#line 50 "./src/Grammar/grammar.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 102
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token
typedef union {
  ParseTOKENTYPE yy0;
  Token yy152;
  int yy203;
} YYMINORTYPE;
#define YYSTACKDEPTH 100
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 579
#define YYNRULE 254
#define YYERRORSYMBOL 64
#define YYERRSYMDT yy203
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   170,  157,  153,  284,  503,  299,  301,  317,  271,  472,
 /*    10 */   451,  472,  160,  834,    1,  141,  143,  461,  117,  120,
 /*    20 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*    30 */   149,  119,  145,  150,  152,   98,  133,  129,  364,   99,
 /*    40 */    98,   18,  281,    2,   99,  289,  282,  290,  172,  463,
 /*    50 */   164,  169,  467,  472,  303,  521,  515,  514,  274,  153,
 /*    60 */   318,  281,  323,  301,    6,  271,   22,   38,  463,  166,
 /*    70 */   169,  467,   37,   35,  449,   31,   29,   39,   36,   89,
 /*    80 */    91,   94,   28,   92,   96,   32,   34,   81,   30,   84,
 /*    90 */    82,   85,   87,  133,  129,    7,   33,   19,   18,  481,
 /*   100 */     2,  175,  340,  293,  402,  172,   21,  302,  299,  102,
 /*   110 */   472,  303,  521,  515,  514,  160,  298,  319,   25,  143,
 /*   120 */   388,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*   130 */   122,   97,  105,  149,  119,  145,  150,  152,   98,   21,
 /*   140 */   518,  448,   99,  110,  299,  382,  472,  492,  549,  298,
 /*   150 */   515,  160,  481,  294,  141,  143,  578,  117,  120,  103,
 /*   160 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*   170 */   119,  145,  150,  152,   98,  469,  299,  377,   99,  111,
 /*   180 */   472,  571,  155,  160,  404,  176,   26,  143,  481,  117,
 /*   190 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*   200 */   105,  149,  119,  145,  150,  152,   98,  299,  114,  565,
 /*   210 */    99,  136,  505,  561,  160,  566,  351,   23,  143,  362,
 /*   220 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*   230 */    97,  105,  149,  119,  145,  150,  152,   98,  360,  512,
 /*   240 */   299,   99,  139,  132,  138,  128,  460,  160,  481,  558,
 /*   250 */   141,  143,  481,  117,  120,  103,  104,  113,  130,  123,
 /*   260 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*   270 */    98,  441,  141,  143,   99,  117,  120,  103,  104,  113,
 /*   280 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*   290 */   150,  152,   98,  100,  357,  281,   99,  504,  147,  174,
 /*   300 */   822,  299,  463,  165,  169,  467,  367,  481,  160,  131,
 /*   310 */   358,  141,  143,  278,  117,  120,  103,  104,  113,  130,
 /*   320 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*   330 */   152,   98,  101,  299,  350,   99,   22,  324,  359,   80,
 /*   340 */   160,  481,  171,   24,  143,  520,  117,  120,  103,  104,
 /*   350 */   113,  130,  123,  121,  124,  122,   97,  105,  149,  119,
 /*   360 */   145,  150,  152,   98,  321,  322,  109,   99,  107,  320,
 /*   370 */   363,  160,  410,  411,   76,   77,  462,   69,   68,   74,
 /*   380 */    73,   60,   61,   64,   67,   62,   65,   70,   71,   40,
 /*   390 */    54,   56,   55,   57,   58,  299,  450,  417,   79,  154,
 /*   400 */   365,  395,  160,  283,  471,  141,  143,  366,  117,  120,
 /*   410 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*   420 */   149,  119,  145,  150,  152,   98,  299,  479,  368,   99,
 /*   430 */   484,  435,  554,  160,   41,  454,  141,  143,  500,  117,
 /*   440 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*   450 */   105,  149,  119,  145,  150,  152,   98,  299,  106,  381,
 /*   460 */    99,  443,  375,  545,  160,  161,    8,   59,  143,  135,
 /*   470 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*   480 */    97,  105,  149,  119,  145,  150,  152,   98,  299,  491,
 /*   490 */   173,   99,  300,  401,  516,  160,  437,  513,  141,  143,
 /*   500 */   493,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*   510 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  299,
 /*   520 */   116,  541,   99,  156,  472,  544,  160,  372,  273,  141,
 /*   530 */   143,  497,  117,  120,  103,  104,  113,  130,  123,  121,
 /*   540 */   124,  122,   97,  105,  149,  119,  145,  150,  152,   98,
 /*   550 */   299,  285,  376,   99,  499,  353,  577,  160,  370,  506,
 /*   560 */   141,  143,  361,  117,  120,  103,  104,  113,  130,  123,
 /*   570 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*   580 */    98,  299,  151,  378,   99,  275,  507,  538,  160,  508,
 /*   590 */   354,   83,  143,  279,  117,  120,  103,  104,  113,  130,
 /*   600 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*   610 */   152,   98,  299,  307,  509,   99,  341,  440,  280,  160,
 /*   620 */   389,  351,  141,  143,  442,  117,  120,  103,  104,  113,
 /*   630 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*   640 */   150,  152,   98,  355,  512,  299,   99,  145,  150,  152,
 /*   650 */    98,  444,  160,  436,   99,   66,  143,  429,  117,  120,
 /*   660 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*   670 */   149,  119,  145,  150,  152,   98,  299,  430,  452,   99,
 /*   680 */   427,  455,    9,  160,  431,  357,  141,  143,  459,  117,
 /*   690 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*   700 */   105,  149,  119,  145,  150,  152,   98,  299,  415,  465,
 /*   710 */    99,  409,  473,  385,  160,  357,  405,   90,  143,  476,
 /*   720 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*   730 */    97,  105,  149,  119,  145,  150,  152,   98,  299,  482,
 /*   740 */   357,   99,  357,  357,  357,  160,  572,  357,  141,  143,
 /*   750 */   357,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*   760 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  299,
 /*   770 */   357,  357,   99,  357,  357,  568,  160,  357,  357,  141,
 /*   780 */   143,  357,  117,  120,  103,  104,  113,  130,  123,  121,
 /*   790 */   124,  122,   97,  105,  149,  119,  145,  150,  152,   98,
 /*   800 */   299,  357,  357,   99,  357,  357,  547,  160,  357,  357,
 /*   810 */   141,  143,  357,  117,  120,  103,  104,  113,  130,  123,
 /*   820 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*   830 */    98,  299,  357,  357,   99,  357,  357,  390,  160,  357,
 /*   840 */   357,  141,  143,  357,  117,  120,  103,  104,  113,  130,
 /*   850 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*   860 */   152,   98,  299,  357,  357,   99,  357,  357,  394,  160,
 /*   870 */   357,  357,  141,  143,  357,  117,  120,  103,  104,  113,
 /*   880 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*   890 */   150,  152,   98,  299,  357,  357,   99,  357,  357,  550,
 /*   900 */   160,  357,  357,  141,  143,  357,  117,  120,  103,  104,
 /*   910 */   113,  130,  123,  121,  124,  122,   97,  105,  149,  119,
 /*   920 */   145,  150,  152,   98,  299,  357,  357,   99,  357,  357,
 /*   930 */   542,  160,  357,  357,  141,  143,  357,  117,  120,  103,
 /*   940 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*   950 */   119,  145,  150,  152,   98,  299,  357,  357,   99,  357,
 /*   960 */   357,  536,  160,  357,  357,   51,  143,  357,  117,  120,
 /*   970 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*   980 */   149,  119,  145,  150,  152,   98,  299,  357,  357,   99,
 /*   990 */   357,  357,  357,  160,  466,  357,  141,  143,  357,  117,
 /*  1000 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*  1010 */   105,  149,  119,  145,  150,  152,   98,  299,  357,  357,
 /*  1020 */    99,  357,  357,  573,  160,  357,  357,   50,  143,  357,
 /*  1030 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*  1040 */    97,  105,  149,  119,  145,  150,  152,   98,  299,  357,
 /*  1050 */   357,   99,  357,  357,  357,  160,  477,  357,  141,  143,
 /*  1060 */   357,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*  1070 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  357,
 /*  1080 */   299,  357,   99,  357,  357,  357,  357,  160,  357,  468,
 /*  1090 */    88,  143,  357,  117,  120,  103,  104,  113,  130,  123,
 /*  1100 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*  1110 */    98,  299,  357,  357,   99,  357,  357,  357,  160,  383,
 /*  1120 */   357,   49,  143,  357,  117,  120,  103,  104,  113,  130,
 /*  1130 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*  1140 */   152,   98,  299,  357,  357,   99,  357,  357,  357,  160,
 /*  1150 */   470,  357,   48,  143,  357,  117,  120,  103,  104,  113,
 /*  1160 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*  1170 */   150,  152,   98,  299,  357,  357,   99,  357,  357,  357,
 /*  1180 */   160,  483,  357,  141,  143,  357,  117,  120,  103,  104,
 /*  1190 */   113,  130,  123,  121,  124,  122,   97,  105,  149,  119,
 /*  1200 */   145,  150,  152,   98,  299,  357,  357,   99,  357,  357,
 /*  1210 */   575,  160,  357,  357,   46,  143,  357,  117,  120,  103,
 /*  1220 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*  1230 */   119,  145,  150,  152,   98,  299,  357,  357,   99,  357,
 /*  1240 */   357,  357,  160,  478,  357,  141,  143,  357,  117,  120,
 /*  1250 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*  1260 */   149,  119,  145,  150,  152,   98,  299,  357,  357,   99,
 /*  1270 */   357,  357,  357,  160,  379,  357,  141,  143,  357,  117,
 /*  1280 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*  1290 */   105,  149,  119,  145,  150,  152,   98,  299,  357,  357,
 /*  1300 */    99,  357,  357,  534,  160,  357,  357,  141,  143,  357,
 /*  1310 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*  1320 */    97,  105,  149,  119,  145,  150,  152,   98,  299,  357,
 /*  1330 */   357,   99,  357,  357,  532,  160,  357,  357,  141,  143,
 /*  1340 */   357,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*  1350 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  299,
 /*  1360 */   357,  357,   99,  357,  357,  556,  160,  357,  357,   45,
 /*  1370 */   143,  357,  117,  120,  103,  104,  113,  130,  123,  121,
 /*  1380 */   124,  122,   97,  105,  149,  119,  145,  150,  152,   98,
 /*  1390 */   108,  357,  281,   99,  357,  357,  299,  357,  487,  463,
 /*  1400 */   163,  169,  467,  160,  357,  357,  141,  143,  357,  117,
 /*  1410 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*  1420 */   105,  149,  119,  145,  150,  152,   98,  299,  357,  357,
 /*  1430 */    99,  357,  357,  357,  160,  357,  357,  141,  143,  357,
 /*  1440 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*  1450 */    97,  105,  149,  119,  145,  150,  152,   98,  299,  357,
 /*  1460 */   357,   99,  357,  357,  530,  160,  357,  357,  141,  143,
 /*  1470 */   357,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*  1480 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  357,
 /*  1490 */   299,  357,   99,  357,  357,  357,  357,  160,  357,  495,
 /*  1500 */   141,  143,  357,  117,  120,  103,  104,  113,  130,  123,
 /*  1510 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*  1520 */    98,  299,  357,  357,   99,  357,  357,  528,  160,  357,
 /*  1530 */   357,   72,  143,  357,  117,  120,  103,  104,  113,  130,
 /*  1540 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*  1550 */   152,   98,  299,  357,  357,   99,  357,  357,  357,  160,
 /*  1560 */   416,  357,  141,  143,  357,  117,  120,  103,  104,  113,
 /*  1570 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*  1580 */   150,  152,   98,  299,  357,  357,   99,  357,  357,  526,
 /*  1590 */   160,  357,  357,  141,  143,  357,  117,  120,  103,  104,
 /*  1600 */   113,  130,  123,  121,  124,  122,   97,  105,  149,  119,
 /*  1610 */   145,  150,  152,   98,  357,  148,  281,   99,   44,  352,
 /*  1620 */   524,  299,  357,  463,  162,  169,  467,  489,  160,  357,
 /*  1630 */   357,  141,  143,  357,  117,  120,  103,  104,  113,  130,
 /*  1640 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*  1650 */   152,   98,  299,  357,  357,   99,  357,  357,  357,  160,
 /*  1660 */   356,  357,  141,  143,  357,  117,  120,  103,  104,  113,
 /*  1670 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*  1680 */   150,  152,   98,  357,  299,  357,   99,  357,  357,  357,
 /*  1690 */   357,  160,  357,  511,  141,  143,  357,  117,  120,  103,
 /*  1700 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*  1710 */   119,  145,  150,  152,   98,  299,  357,  357,   99,  357,
 /*  1720 */   357,  357,  160,  510,  357,  141,  143,  357,  117,  120,
 /*  1730 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*  1740 */   149,  119,  145,  150,  152,   98,  235,  357,  357,   99,
 /*  1750 */   296,  297,  490,  426,  414,  519,  517,  159,  272,  357,
 /*  1760 */   287,  458,  369,  408,  357,  357,  357,  357,  146,  439,
 /*  1770 */   557,  274,  357,  357,  570,  564,  299,  560,  540,  115,
 /*  1780 */   357,  358,  357,  160,  357,  357,  141,  143,  357,  117,
 /*  1790 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*  1800 */   105,  149,  119,  145,  150,  152,   98,    5,  125,   20,
 /*  1810 */    99,  357,  357,  522,  299,  357,  357,  357,  357,  342,
 /*  1820 */   357,  160,  357,  357,  141,  143,  357,  117,  120,  103,
 /*  1830 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*  1840 */   119,  145,  150,  152,   98,  299,  357,  357,   99,  357,
 /*  1850 */   357,  357,  160,  357,  357,  141,  143,  357,  117,  120,
 /*  1860 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*  1870 */   149,  119,  145,  150,  152,   98,  357,  299,  357,   99,
 /*  1880 */   357,  357,  357,  357,  160,  357,  475,  141,  143,  357,
 /*  1890 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*  1900 */    97,  105,  149,  119,  145,  150,  152,   98,  299,  357,
 /*  1910 */   357,   99,  357,  357,  552,  160,  357,  357,  141,  143,
 /*  1920 */   357,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*  1930 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  357,
 /*  1940 */    53,  143,   99,  117,  120,  103,  104,  113,  130,  123,
 /*  1950 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*  1960 */    98,  357,  357,  357,   99,  357,  357,   47,  143,  456,
 /*  1970 */   117,  120,  103,  104,  113,  130,  123,  121,  124,  122,
 /*  1980 */    97,  105,  149,  119,  145,  150,  152,   98,  357,  357,
 /*  1990 */   357,   99,  357,  357,   42,  143,  480,  117,  120,  103,
 /*  2000 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*  2010 */   119,  145,  150,  152,   98,  357,  357,  357,   99,  357,
 /*  2020 */   357,   75,  143,  496,  117,  120,  103,  104,  113,  130,
 /*  2030 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*  2040 */   152,   98,  357,  357,  357,   99,  357,  357,   63,  143,
 /*  2050 */   403,  117,  120,  103,  104,  113,  130,  123,  121,  124,
 /*  2060 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  357,
 /*  2070 */   357,  357,   99,  357,  357,   78,  143,  428,  117,  120,
 /*  2080 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*  2090 */   149,  119,  145,  150,  152,   98,  357,  357,  357,   99,
 /*  2100 */   357,  357,   52,  143,  406,  117,  120,  103,  104,  113,
 /*  2110 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*  2120 */   150,  152,   98,  357,  357,  357,   99,  357,  357,   86,
 /*  2130 */   143,  453,  117,  120,  103,  104,  113,  130,  123,  121,
 /*  2140 */   124,  122,   97,  105,  149,  119,  145,  150,  152,   98,
 /*  2150 */   357,  357,  357,   99,  357,  357,   95,  143,  380,  117,
 /*  2160 */   120,  103,  104,  113,  130,  123,  121,  124,  122,   97,
 /*  2170 */   105,  149,  119,  145,  150,  152,   98,  357,  357,  357,
 /*  2180 */    99,  357,  357,   27,  143,  562,  117,  120,  103,  104,
 /*  2190 */   113,  130,  123,  121,  124,  122,   97,  105,  149,  119,
 /*  2200 */   145,  150,  152,   98,  357,  357,  357,   99,  357,  357,
 /*  2210 */   160,  357,  474,  141,  143,  357,  117,  120,  103,  104,
 /*  2220 */   113,  130,  123,  121,  124,  122,   97,  105,  149,  119,
 /*  2230 */   145,  150,  152,   98,  357,   93,  143,   99,  117,  120,
 /*  2240 */   103,  104,  113,  130,  123,  121,  124,  122,   97,  105,
 /*  2250 */   149,  119,  145,  150,  152,   98,  357,  357,  357,   99,
 /*  2260 */   357,  357,   43,  143,  559,  117,  120,  103,  104,  113,
 /*  2270 */   130,  123,  121,  124,  122,   97,  105,  149,  119,  145,
 /*  2280 */   150,  152,   98,  357,  357,  357,   99,  357,  357,  357,
 /*  2290 */   357,  498,  117,  120,  103,  104,  113,  130,  123,  121,
 /*  2300 */   124,  122,   97,  105,  149,  119,  145,  150,  152,   98,
 /*  2310 */   357,  357,  357,   99,  120,  103,  104,  113,  130,  123,
 /*  2320 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*  2330 */    98,  357,  357,  357,   99,  357,  103,  104,  113,  130,
 /*  2340 */   123,  121,  124,  122,   97,  105,  149,  119,  145,  150,
 /*  2350 */   152,   98,  153,  357,  115,   99,  301,  357,  158,  357,
 /*  2360 */   104,  113,  130,  123,  121,  124,  122,   97,  105,  149,
 /*  2370 */   119,  145,  150,  152,   98,  357,  357,  153,   99,  357,
 /*  2380 */   357,  301,    5,  271,   20,  357,  133,  129,  357,  357,
 /*  2390 */   118,   18,  357,    2,  342,  357,  464,  357,  172,  112,
 /*  2400 */   357,  373,  357,  357,  303,  521,  515,  514,  357,  357,
 /*  2410 */   374,  133,  129,  357,  357,  127,   18,  357,    2,  313,
 /*  2420 */   153,  357,  357,  172,  301,  357,  271,  357,  357,  303,
 /*  2430 */   521,  515,  514,  140,  357,  113,  130,  123,  121,  124,
 /*  2440 */   122,   97,  105,  149,  119,  145,  150,  152,   98,  357,
 /*  2450 */   357,  357,   99,  357,  133,  129,  357,  357,  142,   18,
 /*  2460 */   357,    2,  336,  153,  357,  357,  172,  301,  357,  271,
 /*  2470 */   357,  357,  303,  521,  515,  514,  357,  357,  357,  123,
 /*  2480 */   121,  124,  122,   97,  105,  149,  119,  145,  150,  152,
 /*  2490 */    98,    5,  357,   20,   99,  327,  235,  133,  129,  357,
 /*  2500 */   357,  357,   18,  342,    2,  563,  304,  153,  272,  172,
 /*  2510 */   287,  301,  357,  271,  357,  303,  521,  515,  514,  439,
 /*  2520 */   557,  274,   16,  306,  570,  564,  357,  560,  540,   97,
 /*  2530 */   105,  149,  119,  145,  150,  152,   98,  357,  357,  334,
 /*  2540 */    99,  133,  129,  357,  357,  357,   18,  357,    2,  407,
 /*  2550 */   357,  153,  357,  172,  357,  301,  357,  271,  357,  303,
 /*  2560 */   521,  515,  514,  357,  134,  149,  119,  145,  150,  152,
 /*  2570 */    98,  357,  357,  357,   99,  357,  357,  357,  357,  357,
 /*  2580 */   357,  357,  357,  357,  357,  133,  129,  221,  357,  126,
 /*  2590 */    18,  357,    2,  357,  153,  357,  357,  172,  301,  272,
 /*  2600 */   271,  287,  357,  303,  521,  515,  514,  357,  357,  357,
 /*  2610 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  2620 */   357,  357,  357,  357,  357,  357,  345,  235,  133,  129,
 /*  2630 */   357,  357,  357,   18,  357,    2,  457,  501,  153,  272,
 /*  2640 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  2650 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  2660 */   591,  591,  357,  168,  357,  357,  357,  357,  357,  591,
 /*  2670 */   311,  357,  133,  129,  115,  357,  357,   18,  357,    2,
 /*  2680 */   494,  357,  153,  357,  172,  357,  301,  357,  271,  357,
 /*  2690 */   303,  521,  515,  514,  357,  144,  357,  357,  357,  357,
 /*  2700 */   357,  167,    4,  357,   20,  357,  357,  357,  357,  357,
 /*  2710 */   357,  357,  357,  357,  342,  357,  133,  129,  220,  357,
 /*  2720 */   137,   18,  357,    2,  357,  153,  357,  357,  172,  301,
 /*  2730 */   272,  271,  287,  357,  303,  521,  515,  514,  357,  357,
 /*  2740 */   357,  439,  557,  274,  357,  357,  570,  564,  357,  560,
 /*  2750 */   540,  357,  357,  357,  357,  357,  357,  346,  235,  133,
 /*  2760 */   129,  357,  357,  357,   18,  357,    2,  357,  305,  153,
 /*  2770 */   272,  172,  287,  301,  357,  271,  357,  303,  521,  515,
 /*  2780 */   514,  439,  557,  274,  357,  357,  570,  564,  357,  560,
 /*  2790 */   540,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  2800 */   357,  348,  215,  133,  129,  357,  357,  357,   18,  357,
 /*  2810 */     2,  357,  357,  153,  272,  172,  287,  301,  357,  271,
 /*  2820 */   357,  303,  521,  515,  514,  439,  557,  274,  357,  357,
 /*  2830 */   570,  564,  357,  560,  540,  357,  357,  357,  357,  357,
 /*  2840 */   357,  357,  357,  357,  357,  316,  218,  133,  129,  357,
 /*  2850 */   357,  357,   18,  357,    2,  357,  357,  153,  272,  172,
 /*  2860 */   287,  301,  357,  271,  357,  303,  521,  515,  514,  439,
 /*  2870 */   557,  274,  357,  357,  570,  564,  357,  560,  540,  357,
 /*  2880 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  2890 */   286,  133,  129,  357,  357,  357,   18,  422,    2,  357,
 /*  2900 */   357,  153,  272,  172,  287,  301,  357,  269,  357,  303,
 /*  2910 */   521,  515,  514,  439,  557,  274,  357,  357,  570,  564,
 /*  2920 */   357,  560,  540,  357,  357,  357,  357,  357,  357,  357,
 /*  2930 */   357,  357,  357,  357,  277,  133,  129,  357,  357,  357,
 /*  2940 */    18,  393,    2,  357,  357,  153,  272,  172,  287,  301,
 /*  2950 */   357,  271,  357,  303,  521,  515,  514,  439,  557,  274,
 /*  2960 */   357,  357,  570,  564,  357,  560,  540,  357,  357,  357,
 /*  2970 */   357,  357,  357,  357,  357,  357,  357,  349,  207,  133,
 /*  2980 */   129,  357,  357,  357,   18,  357,    2,  357,  357,  153,
 /*  2990 */   272,  172,  287,  301,  357,  271,  357,  303,  521,  515,
 /*  3000 */   514,  439,  557,  274,  357,  357,  570,  564,  357,  560,
 /*  3010 */   540,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3020 */   357,  314,  254,  133,  129,  357,  357,  357,   18,  357,
 /*  3030 */     2,  357,  357,  153,  272,  172,  287,  301,  357,  271,
 /*  3040 */   357,  303,  521,  515,  514,  439,  557,  274,  357,  357,
 /*  3050 */   570,  564,  357,  560,  540,  357,  357,  357,  357,  357,
 /*  3060 */   357,  357,  357,  357,  357,  315,  217,  133,  129,  357,
 /*  3070 */   357,  357,   18,  357,    2,  357,  357,  153,  272,  172,
 /*  3080 */   287,  301,  357,  271,  357,  303,  521,  515,  514,  439,
 /*  3090 */   557,  274,  357,  357,  570,  564,  357,  560,  540,  357,
 /*  3100 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3110 */   212,  133,  129,  357,  357,  357,   18,  421,    2,  357,
 /*  3120 */   357,  153,  272,  172,  287,  301,  357,  271,  357,  303,
 /*  3130 */   521,  515,  514,  439,  557,  274,  357,  357,  570,  564,
 /*  3140 */   255,  560,  540,  357,  357,  357,  357,  357,  357,  357,
 /*  3150 */   357,  357,  272,  312,  287,  133,  129,  357,  357,  357,
 /*  3160 */    18,  357,    2,  439,  557,  274,  357,  172,  570,  564,
 /*  3170 */   357,  560,  540,  303,  521,  515,  514,  178,  295,  357,
 /*  3180 */   153,  357,  357,  357,  301,  357,  271,  502,  357,  272,
 /*  3190 */    15,  287,  357,  357,  357,  357,  357,  357,  357,  251,
 /*  3200 */   439,  557,  274,  357,  357,  570,  564,  308,  560,  540,
 /*  3210 */   357,  272,  153,  287,  133,  129,  301,  357,  271,   18,
 /*  3220 */   357,    2,  439,  557,  274,  357,  172,  570,  564,  357,
 /*  3230 */   560,  540,  303,  521,  515,  514,  357,    3,  357,  153,
 /*  3240 */   357,  357,  357,  301,  309,  271,  133,  129,  357,  357,
 /*  3250 */   357,   18,  357,    2,  357,  357,  357,  357,  172,  357,
 /*  3260 */   357,  357,  357,  357,  303,  521,  515,  514,  357,  357,
 /*  3270 */   357,  153,  357,  133,  129,  301,  357,  271,   18,  357,
 /*  3280 */     2,  357,  357,  357,  357,  172,  357,  357,  357,  357,
 /*  3290 */   357,  303,  521,  515,  514,  357,  153,  357,  357,  357,
 /*  3300 */   301,  357,  271,  357,  357,  133,  129,  357,  357,  357,
 /*  3310 */    18,  419,    2,  357,  357,  357,  357,  172,  357,  357,
 /*  3320 */   357,  357,  357,  303,  521,  515,  514,  357,  310,  357,
 /*  3330 */   133,  129,  357,  213,  357,   18,  357,    2,  357,  357,
 /*  3340 */   153,  357,  172,  357,  301,  272,  271,  287,  303,  521,
 /*  3350 */   515,  514,  357,  357,  357,  357,  439,  557,  274,  357,
 /*  3360 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  3370 */   357,  357,  357,  357,  133,  129,  357,  252,  357,   18,
 /*  3380 */   418,    2,  357,  357,  153,  357,  172,  357,  301,  272,
 /*  3390 */   271,  287,  303,  521,  515,  514,  357,  357,  357,  357,
 /*  3400 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  3410 */   357,  357,  357,  357,  357,  357,  357,  357,  133,  129,
 /*  3420 */   357,  357,  357,   18,  357,    2,  357,  357,  153,  371,
 /*  3430 */   172,  357,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  3440 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3450 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3460 */   357,  214,  133,  129,  357,  357,  357,   18,  413,    2,
 /*  3470 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  3480 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  3490 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  3500 */   357,  357,  357,  357,  357,  192,  133,  129,  357,  357,
 /*  3510 */   357,   18,  486,    2,  357,  357,  153,  272,  172,  287,
 /*  3520 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  3530 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  3540 */   357,  357,  357,  357,  357,  357,  357,  357,  335,  259,
 /*  3550 */   133,  129,  357,  357,  357,   18,  357,    2,  357,  357,
 /*  3560 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  3570 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  3580 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3590 */   357,  357,  357,  177,  133,  129,  357,  357,  357,   18,
 /*  3600 */   527,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  3610 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  3620 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  3630 */   357,  357,  357,  357,  357,  357,  357,  197,  133,  129,
 /*  3640 */   357,  357,  357,   18,  412,    2,  357,  357,  153,  272,
 /*  3650 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  3660 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  3670 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3680 */   357,  210,  133,  129,  357,  357,  357,   18,  523,    2,
 /*  3690 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  3700 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  3710 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  3720 */   357,  357,  357,  357,  357,  258,  133,  129,  357,  357,
 /*  3730 */   357,   18,  400,    2,  357,  357,  153,  272,  172,  287,
 /*  3740 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  3750 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  3760 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  181,
 /*  3770 */   133,  129,  357,  357,  357,   18,  531,    2,  357,  357,
 /*  3780 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  3790 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  3800 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3810 */   357,  357,  332,  195,  133,  129,  357,  357,  357,   18,
 /*  3820 */   357,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  3830 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  3840 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  3850 */   357,  357,  357,  357,  357,  357,  357,  245,  133,  129,
 /*  3860 */   357,  357,  357,   18,  525,    2,  357,  357,  153,  272,
 /*  3870 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  3880 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  3890 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  3900 */   357,  241,  133,  129,  357,  357,  357,   18,  399,    2,
 /*  3910 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  3920 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  3930 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  3940 */   357,  357,  357,  357,  357,  202,  133,  129,  357,  357,
 /*  3950 */   357,   18,  535,    2,  357,  357,  153,  272,  172,  287,
 /*  3960 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  3970 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  3980 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  204,
 /*  3990 */   133,  129,  357,  357,  357,   18,  398,    2,  357,  357,
 /*  4000 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  4010 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  4020 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4030 */   357,  357,  357,  248,  133,  129,  357,  357,  357,   18,
 /*  4040 */   529,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  4050 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  4060 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  4070 */   357,  357,  357,  357,  357,  357,  333,  201,  133,  129,
 /*  4080 */   357,  357,  357,   18,  357,    2,  357,  357,  153,  272,
 /*  4090 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  4100 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  4110 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4120 */   357,  247,  133,  129,  357,  357,  357,   18,  539,    2,
 /*  4130 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  4140 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  4150 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  4160 */   357,  357,  357,  357,  357,  227,  133,  129,  357,  357,
 /*  4170 */   357,   18,  397,    2,  357,  357,  153,  272,  172,  287,
 /*  4180 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  4190 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  4200 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  228,
 /*  4210 */   133,  129,  357,  357,  357,   18,  533,    2,  357,  357,
 /*  4220 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  4230 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  4240 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4250 */   357,  357,  357,  239,  133,  129,  357,  357,  357,   18,
 /*  4260 */   396,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  4270 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  4280 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  4290 */   357,  357,  357,  357,  357,  357,  357,  244,  133,  129,
 /*  4300 */   357,  357,  357,   18,  537,    2,  357,  357,  153,  272,
 /*  4310 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  4320 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  4330 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4340 */   357,  224,  133,  129,  357,  357,  357,   18,  391,    2,
 /*  4350 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  4360 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  4370 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  4380 */   357,  357,  357,  357,  357,  189,  133,  129,  357,  357,
 /*  4390 */   357,   18,  548,    2,  357,  357,  153,  272,  172,  287,
 /*  4400 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  4410 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  4420 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  190,
 /*  4430 */   133,  129,  357,  357,  357,   18,  386,    2,  357,  357,
 /*  4440 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  4450 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  4460 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4470 */   357,  357,  357,  225,  133,  129,  357,  357,  357,   18,
 /*  4480 */   543,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  4490 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  4500 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  4510 */   357,  357,  357,  357,  357,  357,  331,  276,  133,  129,
 /*  4520 */   357,  357,  357,   18,  357,    2,  357,  357,  153,  272,
 /*  4530 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  4540 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  4550 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4560 */   357,  211,  133,  129,  357,  357,  357,   18,  546,    2,
 /*  4570 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  4580 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  4590 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  4600 */   357,  357,  357,  357,  357,  268,  133,  129,  357,  357,
 /*  4610 */   357,   18,  384,    2,  357,  357,  153,  272,  172,  287,
 /*  4620 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  4630 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  4640 */   357,  357,  357,  357,  357,  357,  357,  357,  347,  263,
 /*  4650 */   133,  129,  357,  357,  357,   18,  357,    2,  357,  357,
 /*  4660 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  4670 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  4680 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4690 */   357,  357,  357,  230,  133,  129,  357,  357,  357,   18,
 /*  4700 */   576,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  4710 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  4720 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  4730 */   357,  357,  357,  357,  357,  357,  329,  188,  133,  129,
 /*  4740 */   357,  357,  357,   18,  357,    2,  357,  357,  153,  272,
 /*  4750 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  4760 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  4770 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4780 */   357,  288,  133,  129,  357,  357,  357,   18,  574,    2,
 /*  4790 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  4800 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  4810 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  4820 */   357,  357,  357,  357,  330,  226,  133,  129,  357,  357,
 /*  4830 */   357,   18,  357,    2,  357,  357,  153,  272,  172,  287,
 /*  4840 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  4850 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  4860 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  191,
 /*  4870 */   133,  129,  357,  357,  357,   18,  569,    2,  357,  357,
 /*  4880 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  4890 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  4900 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  4910 */   357,  357,  328,  223,  133,  129,  357,  357,  357,   18,
 /*  4920 */   357,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  4930 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  4940 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  4950 */   357,  357,  357,  357,  357,  357,  357,  209,  133,  129,
 /*  4960 */   357,  357,  357,   18,  567,    2,  357,  357,  153,  272,
 /*  4970 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  4980 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  4990 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5000 */   357,  291,  133,  129,  357,  357,  357,   18,  555,    2,
 /*  5010 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  5020 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  5030 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  5040 */   357,  357,  357,  357,  325,  270,  133,  129,  357,  357,
 /*  5050 */   357,   18,  357,    2,  357,  357,  153,  272,  172,  287,
 /*  5060 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  5070 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  5080 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  208,
 /*  5090 */   133,  129,  357,  357,  357,   18,  553,    2,  357,  357,
 /*  5100 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  5110 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  5120 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5130 */   357,  357,  326,  216,  133,  129,  357,  357,  357,   18,
 /*  5140 */   357,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  5150 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  5160 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  5170 */   357,  357,  357,  357,  357,  357,  357,  261,  133,  129,
 /*  5180 */   357,  357,  357,   18,  551,    2,  357,  357,  153,  272,
 /*  5190 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  5200 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  5210 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5220 */   357,  292,  133,  129,  357,  357,  357,   18,  485,    2,
 /*  5230 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  5240 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  5250 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  5260 */   357,  357,  357,  357,  357,  238,  133,  129,  357,  357,
 /*  5270 */   357,   18,  425,    2,  357,  357,  153,  272,  172,  287,
 /*  5280 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  5290 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  5300 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  233,
 /*  5310 */   133,  129,  357,  357,  357,   18,  392,    2,  357,  357,
 /*  5320 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  5330 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  5340 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5350 */   357,  357,  357,  264,  133,  129,  357,  357,  357,   18,
 /*  5360 */   432,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  5370 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  5380 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  5390 */   357,  357,  357,  357,  357,  357,  357,  250,  133,  129,
 /*  5400 */   357,  357,  357,   18,  420,    2,  357,  357,  153,  272,
 /*  5410 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  5420 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  5430 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5440 */   337,  246,  133,  129,  357,  357,  357,   18,  357,    2,
 /*  5450 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  5460 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  5470 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  5480 */   357,  357,  357,  357,  357,  206,  133,  129,  357,  357,
 /*  5490 */   357,   18,  488,    2,  357,  357,  153,  272,  172,  287,
 /*  5500 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  5510 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  5520 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  205,
 /*  5530 */   133,  129,  357,  357,  357,   18,  433,    2,  357,  357,
 /*  5540 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  5550 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  5560 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5570 */   357,  357,  357,  180,  133,  129,  357,  357,  357,   18,
 /*  5580 */   387,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  5590 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  5600 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  5610 */   357,  357,  357,  357,  357,  357,  339,  262,  133,  129,
 /*  5620 */   357,  357,  357,   18,  357,    2,  357,  357,  153,  272,
 /*  5630 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  5640 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  5650 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5660 */   357,  265,  133,  129,  357,  357,  357,   18,  434,    2,
 /*  5670 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  5680 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  5690 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  5700 */   357,  357,  357,  357,  357,  257,  133,  129,  357,  357,
 /*  5710 */   357,   18,  424,    2,  357,  357,  153,  272,  172,  287,
 /*  5720 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  5730 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  5740 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  203,
 /*  5750 */   133,  129,  357,  357,  357,   18,  438,    2,  357,  357,
 /*  5760 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  5770 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  5780 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5790 */   357,  357,  357,  256,  133,  129,  357,  357,  357,   18,
 /*  5800 */   445,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  5810 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  5820 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  5830 */   357,  357,  357,  357,  357,  357,  357,  187,  133,  129,
 /*  5840 */   357,  357,  357,   18,  446,    2,  357,  357,  153,  272,
 /*  5850 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  5860 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  5870 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  5880 */   357,  243,  133,  129,  357,  357,  357,   18,  423,    2,
 /*  5890 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  5900 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  5910 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  5920 */   357,  357,  357,  357,  357,  198,  133,  129,  357,  357,
 /*  5930 */   357,   18,  447,    2,  357,  357,  153,  272,  172,  287,
 /*  5940 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  5950 */   274,  357,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  5960 */   357,  357,  357,  357,  357,  357,  357,  357,  344,  260,
 /*  5970 */   133,  129,  357,  357,  357,   18,  357,    2,  357,  357,
 /*  5980 */   153,  272,  172,  287,  301,  357,  271,  357,  303,  521,
 /*  5990 */   515,  514,  439,  557,  274,  357,  357,  570,  564,  357,
 /*  6000 */   560,  540,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6010 */   357,  357,  357,  185,  133,  129,  357,  357,  357,   18,
 /*  6020 */   549,    2,  357,  357,  153,  272,  172,  287,  301,  357,
 /*  6030 */   271,  357,  303,  521,  515,  514,  439,  557,  274,  357,
 /*  6040 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  6050 */   357,  357,  357,  357,  357,  357,  343,  236,  133,  129,
 /*  6060 */   357,  357,  357,   18,  357,    2,  357,  357,  153,  272,
 /*  6070 */   172,  287,  301,  357,  271,  357,  303,  521,  515,  514,
 /*  6080 */   439,  557,  274,  357,  357,  570,  564,  357,  560,  540,
 /*  6090 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6100 */   338,  199,  133,  129,  357,  357,  357,   18,  357,    2,
 /*  6110 */   357,  357,  153,  272,  172,  287,  301,  357,  271,  357,
 /*  6120 */   303,  521,  515,  514,  439,  557,  274,  357,  357,  570,
 /*  6130 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  357,
 /*  6140 */   357,  357,  357,  357,  357,  234,  133,  129,  357,  357,
 /*  6150 */   357,   18,  393,    2,  357,  357,  153,  272,  172,  287,
 /*  6160 */   301,  357,  271,  357,  303,  521,  515,  514,  439,  557,
 /*  6170 */   274,  357,  357,  570,  564,  235,  560,  540,  357,  357,
 /*  6180 */   357,  357,  357,  357,  357,  502,  357,  272,   13,  287,
 /*  6190 */   133,  129,  357,  357,  357,   18,  357,    2,  439,  557,
 /*  6200 */   274,  357,  172,  570,  564,  357,  560,  540,  303,  521,
 /*  6210 */   515,  514,  235,  357,  357,  357,  357,  357,  357,  357,
 /*  6220 */   357,  357,  502,  357,  272,   11,  287,  357,  357,  357,
 /*  6230 */   357,  357,  357,  357,  357,  439,  557,  274,  357,  357,
 /*  6240 */   570,  564,  357,  560,  540,  357,  357,  357,  357,  357,
 /*  6250 */   357,  235,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6260 */   357,  502,  357,  272,   10,  287,  357,  357,  357,  357,
 /*  6270 */   357,  357,  357,  357,  439,  557,  274,  235,  357,  570,
 /*  6280 */   564,  357,  560,  540,  357,  357,  357,  502,  357,  272,
 /*  6290 */    14,  287,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6300 */   439,  557,  274,  235,  357,  570,  564,  357,  560,  540,
 /*  6310 */   357,  357,  357,  502,  357,  272,   12,  287,  357,  357,
 /*  6320 */   357,  357,  357,  357,  357,  357,  439,  557,  274,  196,
 /*  6330 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  6340 */   357,  272,  357,  287,  357,  357,  357,  357,  357,  357,
 /*  6350 */   357,  357,  439,  557,  274,  194,  357,  570,  564,  357,
 /*  6360 */   560,  540,  357,  357,  357,  357,  357,  272,  357,  287,
 /*  6370 */   357,  357,  357,  357,  357,  357,  357,  357,  439,  557,
 /*  6380 */   274,  184,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  6390 */   357,  357,  357,  272,  357,  287,  357,  357,  357,  357,
 /*  6400 */   357,  357,  357,  357,  439,  557,  274,  266,  357,  570,
 /*  6410 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  272,
 /*  6420 */   357,  287,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6430 */   439,  557,  274,  253,  357,  570,  564,  357,  560,  540,
 /*  6440 */   357,  357,  357,  357,  357,  272,  357,  287,  357,  357,
 /*  6450 */   357,  357,  357,  357,  357,  357,  439,  557,  274,  237,
 /*  6460 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  6470 */   357,  272,  357,  287,  357,  357,  357,  357,  357,  357,
 /*  6480 */   357,  357,  439,  557,  274,  240,  357,  570,  564,  357,
 /*  6490 */   560,  540,  357,  357,  357,  357,  357,  272,  357,  287,
 /*  6500 */   357,  357,  357,  357,  357,  357,  357,  357,  439,  557,
 /*  6510 */   274,  186,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  6520 */   357,  357,  357,  272,  357,  287,  357,  357,  357,  357,
 /*  6530 */   357,  357,  357,  357,  439,  557,  274,   17,  357,  570,
 /*  6540 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  272,
 /*  6550 */   357,  287,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6560 */   439,  557,  274,  267,  357,  570,  564,  357,  560,  540,
 /*  6570 */   357,  357,  357,  357,  357,  272,  357,  287,  357,  357,
 /*  6580 */   357,  357,  357,  357,  357,  357,  439,  557,  274,  229,
 /*  6590 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  6600 */   357,  272,  357,  287,  357,  357,  357,  357,  357,  357,
 /*  6610 */   357,  357,  439,  557,  274,  249,  357,  570,  564,  357,
 /*  6620 */   560,  540,  357,  357,  357,  357,  357,  272,  357,  287,
 /*  6630 */   357,  357,  357,  357,  357,  357,  357,  357,  439,  557,
 /*  6640 */   274,  242,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  6650 */   357,  357,  357,  272,  357,  287,  357,  357,  357,  357,
 /*  6660 */   357,  357,  357,  357,  439,  557,  274,  219,  357,  570,
 /*  6670 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  272,
 /*  6680 */   357,  287,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6690 */   439,  557,  274,  232,  357,  570,  564,  357,  560,  540,
 /*  6700 */   357,  357,  357,  357,  357,  272,  357,  287,  357,  357,
 /*  6710 */   357,  357,  357,  357,  357,  357,  439,  557,  274,  231,
 /*  6720 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  6730 */   357,  272,  357,  287,  357,  357,  357,  357,  357,  357,
 /*  6740 */   357,  357,  439,  557,  274,  179,  357,  570,  564,  357,
 /*  6750 */   560,  540,  357,  357,  357,  357,  357,  272,  357,  287,
 /*  6760 */   357,  357,  357,  357,  357,  357,  357,  357,  439,  557,
 /*  6770 */   274,  200,  357,  570,  564,  357,  560,  540,  357,  357,
 /*  6780 */   357,  357,  357,  272,  357,  287,  357,  357,  357,  357,
 /*  6790 */   357,  357,  357,  357,  439,  557,  274,  182,  357,  570,
 /*  6800 */   564,  357,  560,  540,  357,  357,  357,  357,  357,  272,
 /*  6810 */   357,  287,  357,  357,  357,  357,  357,  357,  357,  357,
 /*  6820 */   439,  557,  274,  193,  357,  570,  564,  357,  560,  540,
 /*  6830 */   357,  357,  357,  357,  357,  272,  357,  287,  357,  357,
 /*  6840 */   357,  357,  357,  357,  357,  357,  439,  557,  274,  222,
 /*  6850 */   357,  570,  564,  357,  560,  540,  357,  357,  357,  357,
 /*  6860 */   357,  272,  357,  287,  357,  357,  357,  357,  357,  357,
 /*  6870 */   357,  357,  439,  557,  274,  183,  357,  570,  564,  357,
 /*  6880 */   560,  540,  357,  357,  357,  357,  357,  272,  357,  287,
 /*  6890 */   357,  357,  357,  357,  357,  357,  357,  357,  439,  557,
 /*  6900 */   274,  357,  357,  570,  564,  357,  560,  540,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     2,    2,    4,   10,    3,    7,    8,    8,   10,   10,
 /*    10 */    64,   10,   14,   67,   68,   17,   18,    5,   20,   21,
 /*    20 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*    30 */    32,   33,   34,   35,   36,   37,   38,   39,   45,   41,
 /*    40 */    37,   43,   76,   45,   41,   77,    3,   79,   50,   83,
 /*    50 */    84,   85,   86,   10,   56,   57,   58,   59,   90,    4,
 /*    60 */    48,   76,    7,    8,   43,   10,   45,   12,   83,   84,
 /*    70 */    85,   86,   17,   18,    5,   20,   21,   22,   23,   24,
 /*    80 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*    90 */    35,   36,   37,   38,   39,   43,   41,   45,   43,   10,
 /*   100 */    45,   12,   10,    3,   46,   50,   45,   55,    7,   15,
 /*   110 */    10,   56,   57,   58,   59,   14,   55,   48,   17,   18,
 /*   120 */    46,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   130 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   45,
 /*   140 */     3,    5,   41,   42,    7,   46,   10,   46,   44,   55,
 /*   150 */    58,   14,   10,   76,   17,   18,   46,   20,   21,   22,
 /*   160 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   170 */    33,   34,   35,   36,   37,    5,    7,  100,   41,    1,
 /*   180 */    10,   46,    2,   14,   10,   48,   17,   18,   10,   20,
 /*   190 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   200 */    31,   32,   33,   34,   35,   36,   37,    7,   12,   46,
 /*   210 */    41,   42,    3,   46,   14,   46,   76,   17,   18,   45,
 /*   220 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   230 */    30,   31,   32,   33,   34,   35,   36,   37,   98,   99,
 /*   240 */     7,   41,   42,    1,   11,    1,   46,   14,   10,   46,
 /*   250 */    17,   18,   10,   20,   21,   22,   23,   24,   25,   26,
 /*   260 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   270 */    37,   10,   17,   18,   41,   20,   21,   22,   23,   24,
 /*   280 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   290 */    35,   36,   37,   60,   10,   76,   41,    3,    1,   61,
 /*   300 */    48,    7,   83,   84,   85,   86,   45,   10,   14,    7,
 /*   310 */    17,   17,   18,   61,   20,   21,   22,   23,   24,   25,
 /*   320 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   330 */    36,   37,    1,    7,   43,   41,   45,   10,   10,    7,
 /*   340 */    14,   10,   48,   17,   18,   44,   20,   21,   22,   23,
 /*   350 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   360 */    34,   35,   36,   37,    7,   10,    1,   41,   42,   12,
 /*   370 */    10,   14,   46,   44,   17,   18,    5,   20,   21,   22,
 /*   380 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   390 */    33,   34,   35,   36,   37,    7,    5,   46,   41,    2,
 /*   400 */    10,   44,   14,   61,   46,   17,   18,   46,   20,   21,
 /*   410 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   420 */    32,   33,   34,   35,   36,   37,    7,   46,   10,   41,
 /*   430 */    46,   63,   44,   14,   12,   46,   17,   18,    3,   20,
 /*   440 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   450 */    31,   32,   33,   34,   35,   36,   37,    7,    1,    3,
 /*   460 */    41,   54,   10,   44,   14,    1,   43,   17,   18,    7,
 /*   470 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   480 */    30,   31,   32,   33,   34,   35,   36,   37,    7,   46,
 /*   490 */    12,   41,   10,   10,   10,   14,   46,   48,   17,   18,
 /*   500 */    46,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   510 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*   520 */    43,   48,   41,    4,   10,   44,   14,   87,   10,   17,
 /*   530 */    18,   46,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   540 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   550 */     7,   76,   76,   41,   46,    9,   44,   14,   87,   46,
 /*   560 */    17,   18,   76,   20,   21,   22,   23,   24,   25,   26,
 /*   570 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   580 */    37,    7,   12,   76,   41,   76,   46,   44,   14,   48,
 /*   590 */    87,   17,   18,   76,   20,   21,   22,   23,   24,   25,
 /*   600 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   610 */    36,   37,    7,    3,   48,   41,   89,    5,   76,   14,
 /*   620 */    46,   76,   17,   18,    5,   20,   21,   22,   23,   24,
 /*   630 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   640 */    35,   36,   37,   98,   99,    7,   41,   34,   35,   36,
 /*   650 */    37,   10,   14,   46,   41,   17,   18,   52,   20,   21,
 /*   660 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   670 */    32,   33,   34,   35,   36,   37,    7,   46,   46,   41,
 /*   680 */    46,   46,   43,   14,   46,  101,   17,   18,   46,   20,
 /*   690 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   700 */    31,   32,   33,   34,   35,   36,   37,    7,   46,   46,
 /*   710 */    41,   46,   46,   44,   14,  101,   46,   17,   18,   46,
 /*   720 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   730 */    30,   31,   32,   33,   34,   35,   36,   37,    7,   46,
 /*   740 */   101,   41,  101,  101,  101,   14,   46,  101,   17,   18,
 /*   750 */   101,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   760 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*   770 */   101,  101,   41,  101,  101,   44,   14,  101,  101,   17,
 /*   780 */    18,  101,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   790 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   800 */     7,  101,  101,   41,  101,  101,   44,   14,  101,  101,
 /*   810 */    17,   18,  101,   20,   21,   22,   23,   24,   25,   26,
 /*   820 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   830 */    37,    7,  101,  101,   41,  101,  101,   44,   14,  101,
 /*   840 */   101,   17,   18,  101,   20,   21,   22,   23,   24,   25,
 /*   850 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   860 */    36,   37,    7,  101,  101,   41,  101,  101,   44,   14,
 /*   870 */   101,  101,   17,   18,  101,   20,   21,   22,   23,   24,
 /*   880 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   890 */    35,   36,   37,    7,  101,  101,   41,  101,  101,   44,
 /*   900 */    14,  101,  101,   17,   18,  101,   20,   21,   22,   23,
 /*   910 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   920 */    34,   35,   36,   37,    7,  101,  101,   41,  101,  101,
 /*   930 */    44,   14,  101,  101,   17,   18,  101,   20,   21,   22,
 /*   940 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   950 */    33,   34,   35,   36,   37,    7,  101,  101,   41,  101,
 /*   960 */   101,   44,   14,  101,  101,   17,   18,  101,   20,   21,
 /*   970 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   980 */    32,   33,   34,   35,   36,   37,    7,  101,  101,   41,
 /*   990 */   101,  101,  101,   14,   46,  101,   17,   18,  101,   20,
 /*  1000 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1010 */    31,   32,   33,   34,   35,   36,   37,    7,  101,  101,
 /*  1020 */    41,  101,  101,   44,   14,  101,  101,   17,   18,  101,
 /*  1030 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1040 */    30,   31,   32,   33,   34,   35,   36,   37,    7,  101,
 /*  1050 */   101,   41,  101,  101,  101,   14,   46,  101,   17,   18,
 /*  1060 */   101,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1070 */    29,   30,   31,   32,   33,   34,   35,   36,   37,  101,
 /*  1080 */     7,  101,   41,  101,  101,  101,  101,   14,  101,   48,
 /*  1090 */    17,   18,  101,   20,   21,   22,   23,   24,   25,   26,
 /*  1100 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  1110 */    37,    7,  101,  101,   41,  101,  101,  101,   14,   46,
 /*  1120 */   101,   17,   18,  101,   20,   21,   22,   23,   24,   25,
 /*  1130 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1140 */    36,   37,    7,  101,  101,   41,  101,  101,  101,   14,
 /*  1150 */    46,  101,   17,   18,  101,   20,   21,   22,   23,   24,
 /*  1160 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1170 */    35,   36,   37,    7,  101,  101,   41,  101,  101,  101,
 /*  1180 */    14,   46,  101,   17,   18,  101,   20,   21,   22,   23,
 /*  1190 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1200 */    34,   35,   36,   37,    7,  101,  101,   41,  101,  101,
 /*  1210 */    44,   14,  101,  101,   17,   18,  101,   20,   21,   22,
 /*  1220 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1230 */    33,   34,   35,   36,   37,    7,  101,  101,   41,  101,
 /*  1240 */   101,  101,   14,   46,  101,   17,   18,  101,   20,   21,
 /*  1250 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1260 */    32,   33,   34,   35,   36,   37,    7,  101,  101,   41,
 /*  1270 */   101,  101,  101,   14,   46,  101,   17,   18,  101,   20,
 /*  1280 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1290 */    31,   32,   33,   34,   35,   36,   37,    7,  101,  101,
 /*  1300 */    41,  101,  101,   44,   14,  101,  101,   17,   18,  101,
 /*  1310 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1320 */    30,   31,   32,   33,   34,   35,   36,   37,    7,  101,
 /*  1330 */   101,   41,  101,  101,   44,   14,  101,  101,   17,   18,
 /*  1340 */   101,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1350 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*  1360 */   101,  101,   41,  101,  101,   44,   14,  101,  101,   17,
 /*  1370 */    18,  101,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1380 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  1390 */     1,  101,   76,   41,  101,  101,    7,  101,   46,   83,
 /*  1400 */    84,   85,   86,   14,  101,  101,   17,   18,  101,   20,
 /*  1410 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1420 */    31,   32,   33,   34,   35,   36,   37,    7,  101,  101,
 /*  1430 */    41,  101,  101,  101,   14,  101,  101,   17,   18,  101,
 /*  1440 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1450 */    30,   31,   32,   33,   34,   35,   36,   37,    7,  101,
 /*  1460 */   101,   41,  101,  101,   44,   14,  101,  101,   17,   18,
 /*  1470 */   101,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1480 */    29,   30,   31,   32,   33,   34,   35,   36,   37,  101,
 /*  1490 */     7,  101,   41,  101,  101,  101,  101,   14,  101,   48,
 /*  1500 */    17,   18,  101,   20,   21,   22,   23,   24,   25,   26,
 /*  1510 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  1520 */    37,    7,  101,  101,   41,  101,  101,   44,   14,  101,
 /*  1530 */   101,   17,   18,  101,   20,   21,   22,   23,   24,   25,
 /*  1540 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1550 */    36,   37,    7,  101,  101,   41,  101,  101,  101,   14,
 /*  1560 */    46,  101,   17,   18,  101,   20,   21,   22,   23,   24,
 /*  1570 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1580 */    35,   36,   37,    7,  101,  101,   41,  101,  101,   44,
 /*  1590 */    14,  101,  101,   17,   18,  101,   20,   21,   22,   23,
 /*  1600 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1610 */    34,   35,   36,   37,  101,    1,   76,   41,    1,    2,
 /*  1620 */    44,    7,  101,   83,   84,   85,   86,   10,   14,  101,
 /*  1630 */   101,   17,   18,  101,   20,   21,   22,   23,   24,   25,
 /*  1640 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1650 */    36,   37,    7,  101,  101,   41,  101,  101,  101,   14,
 /*  1660 */    43,  101,   17,   18,  101,   20,   21,   22,   23,   24,
 /*  1670 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1680 */    35,   36,   37,  101,    7,  101,   41,  101,  101,  101,
 /*  1690 */   101,   14,  101,   48,   17,   18,  101,   20,   21,   22,
 /*  1700 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1710 */    33,   34,   35,   36,   37,    7,  101,  101,   41,  101,
 /*  1720 */   101,  101,   14,   46,  101,   17,   18,  101,   20,   21,
 /*  1730 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1740 */    32,   33,   34,   35,   36,   37,   65,  101,  101,   41,
 /*  1750 */    69,   70,   71,   72,   73,   74,   75,   76,   77,  101,
 /*  1760 */    79,   80,   81,   82,  101,  101,  101,  101,   60,   88,
 /*  1770 */    89,   90,  101,  101,   93,   94,    7,   96,   97,   15,
 /*  1780 */   101,   17,  101,   14,  101,  101,   17,   18,  101,   20,
 /*  1790 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1800 */    31,   32,   33,   34,   35,   36,   37,   43,    1,   45,
 /*  1810 */    41,  101,  101,   44,    7,  101,  101,  101,  101,   55,
 /*  1820 */   101,   14,  101,  101,   17,   18,  101,   20,   21,   22,
 /*  1830 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1840 */    33,   34,   35,   36,   37,    7,  101,  101,   41,  101,
 /*  1850 */   101,  101,   14,  101,  101,   17,   18,  101,   20,   21,
 /*  1860 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1870 */    32,   33,   34,   35,   36,   37,  101,    7,  101,   41,
 /*  1880 */   101,  101,  101,  101,   14,  101,   48,   17,   18,  101,
 /*  1890 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1900 */    30,   31,   32,   33,   34,   35,   36,   37,    7,  101,
 /*  1910 */   101,   41,  101,  101,   44,   14,  101,  101,   17,   18,
 /*  1920 */   101,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1930 */    29,   30,   31,   32,   33,   34,   35,   36,   37,  101,
 /*  1940 */    17,   18,   41,   20,   21,   22,   23,   24,   25,   26,
 /*  1950 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  1960 */    37,  101,  101,  101,   41,  101,  101,   17,   18,   46,
 /*  1970 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1980 */    30,   31,   32,   33,   34,   35,   36,   37,  101,  101,
 /*  1990 */   101,   41,  101,  101,   17,   18,   46,   20,   21,   22,
 /*  2000 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  2010 */    33,   34,   35,   36,   37,  101,  101,  101,   41,  101,
 /*  2020 */   101,   17,   18,   46,   20,   21,   22,   23,   24,   25,
 /*  2030 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  2040 */    36,   37,  101,  101,  101,   41,  101,  101,   17,   18,
 /*  2050 */    46,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  2060 */    29,   30,   31,   32,   33,   34,   35,   36,   37,  101,
 /*  2070 */   101,  101,   41,  101,  101,   17,   18,   46,   20,   21,
 /*  2080 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2090 */    32,   33,   34,   35,   36,   37,  101,  101,  101,   41,
 /*  2100 */   101,  101,   17,   18,   46,   20,   21,   22,   23,   24,
 /*  2110 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  2120 */    35,   36,   37,  101,  101,  101,   41,  101,  101,   17,
 /*  2130 */    18,   46,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  2140 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  2150 */   101,  101,  101,   41,  101,  101,   17,   18,   46,   20,
 /*  2160 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  2170 */    31,   32,   33,   34,   35,   36,   37,  101,  101,  101,
 /*  2180 */    41,  101,  101,   17,   18,   46,   20,   21,   22,   23,
 /*  2190 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  2200 */    34,   35,   36,   37,  101,  101,  101,   41,  101,  101,
 /*  2210 */    14,  101,   46,   17,   18,  101,   20,   21,   22,   23,
 /*  2220 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  2230 */    34,   35,   36,   37,  101,   17,   18,   41,   20,   21,
 /*  2240 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2250 */    32,   33,   34,   35,   36,   37,  101,  101,  101,   41,
 /*  2260 */   101,  101,   17,   18,   46,   20,   21,   22,   23,   24,
 /*  2270 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  2280 */    35,   36,   37,  101,  101,  101,   41,  101,  101,  101,
 /*  2290 */   101,   46,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  2300 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  2310 */   101,  101,  101,   41,   21,   22,   23,   24,   25,   26,
 /*  2320 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  2330 */    37,  101,  101,  101,   41,  101,   22,   23,   24,   25,
 /*  2340 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  2350 */    36,   37,    4,  101,   15,   41,    8,  101,   10,  101,
 /*  2360 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  2370 */    33,   34,   35,   36,   37,  101,  101,    4,   41,  101,
 /*  2380 */   101,    8,   43,   10,   45,  101,   38,   39,  101,  101,
 /*  2390 */    17,   43,  101,   45,   55,  101,   48,  101,   50,   51,
 /*  2400 */   101,   53,  101,  101,   56,   57,   58,   59,  101,  101,
 /*  2410 */    62,   38,   39,  101,  101,   42,   43,  101,   45,   46,
 /*  2420 */     4,  101,  101,   50,    8,  101,   10,  101,  101,   56,
 /*  2430 */    57,   58,   59,   17,  101,   24,   25,   26,   27,   28,
 /*  2440 */    29,   30,   31,   32,   33,   34,   35,   36,   37,  101,
 /*  2450 */   101,  101,   41,  101,   38,   39,  101,  101,   42,   43,
 /*  2460 */   101,   45,   46,    4,  101,  101,   50,    8,  101,   10,
 /*  2470 */   101,  101,   56,   57,   58,   59,  101,  101,  101,   26,
 /*  2480 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  2490 */    37,   43,  101,   45,   41,   36,   65,   38,   39,  101,
 /*  2500 */   101,  101,   43,   55,   45,   46,   75,    4,   77,   50,
 /*  2510 */    79,    8,  101,   10,  101,   56,   57,   58,   59,   88,
 /*  2520 */    89,   90,   91,   92,   93,   94,  101,   96,   97,   30,
 /*  2530 */    31,   32,   33,   34,   35,   36,   37,  101,  101,   36,
 /*  2540 */    41,   38,   39,  101,  101,  101,   43,  101,   45,   46,
 /*  2550 */   101,    4,  101,   50,  101,    8,  101,   10,  101,   56,
 /*  2560 */    57,   58,   59,  101,   17,   32,   33,   34,   35,   36,
 /*  2570 */    37,  101,  101,  101,   41,  101,  101,  101,  101,  101,
 /*  2580 */   101,  101,  101,  101,  101,   38,   39,   65,  101,   42,
 /*  2590 */    43,  101,   45,  101,    4,  101,  101,   50,    8,   77,
 /*  2600 */    10,   79,  101,   56,   57,   58,   59,  101,  101,  101,
 /*  2610 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  2620 */   101,  101,  101,  101,  101,  101,   36,   65,   38,   39,
 /*  2630 */   101,  101,  101,   43,  101,   45,   46,   75,    4,   77,
 /*  2640 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  2650 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  2660 */     1,    2,  101,    4,  101,  101,  101,  101,  101,   10,
 /*  2670 */    36,  101,   38,   39,   15,  101,  101,   43,  101,   45,
 /*  2680 */    46,  101,    4,  101,   50,  101,    8,  101,   10,  101,
 /*  2690 */    56,   57,   58,   59,  101,   17,  101,  101,  101,  101,
 /*  2700 */   101,   42,   43,  101,   45,  101,  101,  101,  101,  101,
 /*  2710 */   101,  101,  101,  101,   55,  101,   38,   39,   65,  101,
 /*  2720 */    42,   43,  101,   45,  101,    4,  101,  101,   50,    8,
 /*  2730 */    77,   10,   79,  101,   56,   57,   58,   59,  101,  101,
 /*  2740 */   101,   88,   89,   90,  101,  101,   93,   94,  101,   96,
 /*  2750 */    97,  101,  101,  101,  101,  101,  101,   36,   65,   38,
 /*  2760 */    39,  101,  101,  101,   43,  101,   45,  101,   75,    4,
 /*  2770 */    77,   50,   79,    8,  101,   10,  101,   56,   57,   58,
 /*  2780 */    59,   88,   89,   90,  101,  101,   93,   94,  101,   96,
 /*  2790 */    97,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  2800 */   101,   36,   65,   38,   39,  101,  101,  101,   43,  101,
 /*  2810 */    45,  101,  101,    4,   77,   50,   79,    8,  101,   10,
 /*  2820 */   101,   56,   57,   58,   59,   88,   89,   90,  101,  101,
 /*  2830 */    93,   94,  101,   96,   97,  101,  101,  101,  101,  101,
 /*  2840 */   101,  101,  101,  101,  101,   36,   65,   38,   39,  101,
 /*  2850 */   101,  101,   43,  101,   45,  101,  101,    4,   77,   50,
 /*  2860 */    79,    8,  101,   10,  101,   56,   57,   58,   59,   88,
 /*  2870 */    89,   90,  101,  101,   93,   94,  101,   96,   97,  101,
 /*  2880 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  2890 */    65,   38,   39,  101,  101,  101,   43,   44,   45,  101,
 /*  2900 */   101,    4,   77,   50,   79,    8,  101,   10,  101,   56,
 /*  2910 */    57,   58,   59,   88,   89,   90,  101,  101,   93,   94,
 /*  2920 */   101,   96,   97,  101,  101,  101,  101,  101,  101,  101,
 /*  2930 */   101,  101,  101,  101,   65,   38,   39,  101,  101,  101,
 /*  2940 */    43,   44,   45,  101,  101,    4,   77,   50,   79,    8,
 /*  2950 */   101,   10,  101,   56,   57,   58,   59,   88,   89,   90,
 /*  2960 */   101,  101,   93,   94,  101,   96,   97,  101,  101,  101,
 /*  2970 */   101,  101,  101,  101,  101,  101,  101,   36,   65,   38,
 /*  2980 */    39,  101,  101,  101,   43,  101,   45,  101,  101,    4,
 /*  2990 */    77,   50,   79,    8,  101,   10,  101,   56,   57,   58,
 /*  3000 */    59,   88,   89,   90,  101,  101,   93,   94,  101,   96,
 /*  3010 */    97,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3020 */   101,   36,   65,   38,   39,  101,  101,  101,   43,  101,
 /*  3030 */    45,  101,  101,    4,   77,   50,   79,    8,  101,   10,
 /*  3040 */   101,   56,   57,   58,   59,   88,   89,   90,  101,  101,
 /*  3050 */    93,   94,  101,   96,   97,  101,  101,  101,  101,  101,
 /*  3060 */   101,  101,  101,  101,  101,   36,   65,   38,   39,  101,
 /*  3070 */   101,  101,   43,  101,   45,  101,  101,    4,   77,   50,
 /*  3080 */    79,    8,  101,   10,  101,   56,   57,   58,   59,   88,
 /*  3090 */    89,   90,  101,  101,   93,   94,  101,   96,   97,  101,
 /*  3100 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3110 */    65,   38,   39,  101,  101,  101,   43,   44,   45,  101,
 /*  3120 */   101,    4,   77,   50,   79,    8,  101,   10,  101,   56,
 /*  3130 */    57,   58,   59,   88,   89,   90,  101,  101,   93,   94,
 /*  3140 */    65,   96,   97,  101,  101,  101,  101,  101,  101,  101,
 /*  3150 */   101,  101,   77,   36,   79,   38,   39,  101,  101,  101,
 /*  3160 */    43,  101,   45,   88,   89,   90,  101,   50,   93,   94,
 /*  3170 */   101,   96,   97,   56,   57,   58,   59,   65,    2,  101,
 /*  3180 */     4,  101,  101,  101,    8,  101,   10,   75,  101,   77,
 /*  3190 */    78,   79,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  3200 */    88,   89,   90,  101,  101,   93,   94,   95,   96,   97,
 /*  3210 */   101,   77,    4,   79,   38,   39,    8,  101,   10,   43,
 /*  3220 */   101,   45,   88,   89,   90,  101,   50,   93,   94,  101,
 /*  3230 */    96,   97,   56,   57,   58,   59,  101,    2,  101,    4,
 /*  3240 */   101,  101,  101,    8,   36,   10,   38,   39,  101,  101,
 /*  3250 */   101,   43,  101,   45,  101,  101,  101,  101,   50,  101,
 /*  3260 */   101,  101,  101,  101,   56,   57,   58,   59,  101,  101,
 /*  3270 */   101,    4,  101,   38,   39,    8,  101,   10,   43,  101,
 /*  3280 */    45,  101,  101,  101,  101,   50,  101,  101,  101,  101,
 /*  3290 */   101,   56,   57,   58,   59,  101,    4,  101,  101,  101,
 /*  3300 */     8,  101,   10,  101,  101,   38,   39,  101,  101,  101,
 /*  3310 */    43,   44,   45,  101,  101,  101,  101,   50,  101,  101,
 /*  3320 */   101,  101,  101,   56,   57,   58,   59,  101,   36,  101,
 /*  3330 */    38,   39,  101,   65,  101,   43,  101,   45,  101,  101,
 /*  3340 */     4,  101,   50,  101,    8,   77,   10,   79,   56,   57,
 /*  3350 */    58,   59,  101,  101,  101,  101,   88,   89,   90,  101,
 /*  3360 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  3370 */   101,  101,  101,  101,   38,   39,  101,   65,  101,   43,
 /*  3380 */    44,   45,  101,  101,    4,  101,   50,  101,    8,   77,
 /*  3390 */    10,   79,   56,   57,   58,   59,  101,  101,  101,  101,
 /*  3400 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  3410 */   101,  101,  101,  101,  101,  101,  101,  101,   38,   39,
 /*  3420 */   101,  101,  101,   43,  101,   45,  101,  101,    4,   49,
 /*  3430 */    50,  101,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  3440 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3450 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3460 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  3470 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  3480 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  3490 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  3500 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  3510 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  3520 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  3530 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  3540 */   101,  101,  101,  101,  101,  101,  101,  101,   36,   65,
 /*  3550 */    38,   39,  101,  101,  101,   43,  101,   45,  101,  101,
 /*  3560 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  3570 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  3580 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3590 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  3600 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  3610 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  3620 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  3630 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  3640 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  3650 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  3660 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  3670 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3680 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  3690 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  3700 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  3710 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  3720 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  3730 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  3740 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  3750 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  3760 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  3770 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  3780 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  3790 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  3800 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3810 */   101,  101,   36,   65,   38,   39,  101,  101,  101,   43,
 /*  3820 */   101,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  3830 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  3840 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  3850 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  3860 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  3870 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  3880 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  3890 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  3900 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  3910 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  3920 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  3930 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  3940 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  3950 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  3960 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  3970 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  3980 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  3990 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  4000 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  4010 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  4020 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4030 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  4040 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  4050 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  4060 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  4070 */   101,  101,  101,  101,  101,  101,   36,   65,   38,   39,
 /*  4080 */   101,  101,  101,   43,  101,   45,  101,  101,    4,   77,
 /*  4090 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  4100 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  4110 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4120 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  4130 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  4140 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  4150 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  4160 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  4170 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  4180 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  4190 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  4200 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  4210 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  4220 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  4230 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  4240 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4250 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  4260 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  4270 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  4280 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  4290 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  4300 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  4310 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  4320 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  4330 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4340 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  4350 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  4360 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  4370 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  4380 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  4390 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  4400 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  4410 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  4420 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  4430 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  4440 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  4450 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  4460 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4470 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  4480 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  4490 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  4500 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  4510 */   101,  101,  101,  101,  101,  101,   36,   65,   38,   39,
 /*  4520 */   101,  101,  101,   43,  101,   45,  101,  101,    4,   77,
 /*  4530 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  4540 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  4550 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4560 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  4570 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  4580 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  4590 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  4600 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  4610 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  4620 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  4630 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  4640 */   101,  101,  101,  101,  101,  101,  101,  101,   36,   65,
 /*  4650 */    38,   39,  101,  101,  101,   43,  101,   45,  101,  101,
 /*  4660 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  4670 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  4680 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4690 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  4700 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  4710 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  4720 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  4730 */   101,  101,  101,  101,  101,  101,   36,   65,   38,   39,
 /*  4740 */   101,  101,  101,   43,  101,   45,  101,  101,    4,   77,
 /*  4750 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  4760 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  4770 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4780 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  4790 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  4800 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  4810 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  4820 */   101,  101,  101,  101,   36,   65,   38,   39,  101,  101,
 /*  4830 */   101,   43,  101,   45,  101,  101,    4,   77,   50,   79,
 /*  4840 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  4850 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  4860 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  4870 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  4880 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  4890 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  4900 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  4910 */   101,  101,   36,   65,   38,   39,  101,  101,  101,   43,
 /*  4920 */   101,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  4930 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  4940 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  4950 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  4960 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  4970 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  4980 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  4990 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5000 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  5010 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  5020 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  5030 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  5040 */   101,  101,  101,  101,   36,   65,   38,   39,  101,  101,
 /*  5050 */   101,   43,  101,   45,  101,  101,    4,   77,   50,   79,
 /*  5060 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  5070 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  5080 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  5090 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  5100 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  5110 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  5120 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5130 */   101,  101,   36,   65,   38,   39,  101,  101,  101,   43,
 /*  5140 */   101,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  5150 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  5160 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  5170 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  5180 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  5190 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  5200 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  5210 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5220 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  5230 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  5240 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  5250 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  5260 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  5270 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  5280 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  5290 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  5300 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  5310 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  5320 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  5330 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  5340 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5350 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  5360 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  5370 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  5380 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  5390 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  5400 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  5410 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  5420 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  5430 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5440 */    36,   65,   38,   39,  101,  101,  101,   43,  101,   45,
 /*  5450 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  5460 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  5470 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  5480 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  5490 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  5500 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  5510 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  5520 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  5530 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  5540 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  5550 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  5560 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5570 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  5580 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  5590 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  5600 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  5610 */   101,  101,  101,  101,  101,  101,   36,   65,   38,   39,
 /*  5620 */   101,  101,  101,   43,  101,   45,  101,  101,    4,   77,
 /*  5630 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  5640 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  5650 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5660 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  5670 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  5680 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  5690 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  5700 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  5710 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  5720 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  5730 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  5740 */   101,  101,  101,  101,  101,  101,  101,  101,  101,   65,
 /*  5750 */    38,   39,  101,  101,  101,   43,   44,   45,  101,  101,
 /*  5760 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  5770 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  5780 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5790 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  5800 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  5810 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  5820 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  5830 */   101,  101,  101,  101,  101,  101,  101,   65,   38,   39,
 /*  5840 */   101,  101,  101,   43,   44,   45,  101,  101,    4,   77,
 /*  5850 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  5860 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  5870 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  5880 */   101,   65,   38,   39,  101,  101,  101,   43,   44,   45,
 /*  5890 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  5900 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  5910 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  5920 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  5930 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  5940 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  5950 */    90,  101,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  5960 */   101,  101,  101,  101,  101,  101,  101,  101,   36,   65,
 /*  5970 */    38,   39,  101,  101,  101,   43,  101,   45,  101,  101,
 /*  5980 */     4,   77,   50,   79,    8,  101,   10,  101,   56,   57,
 /*  5990 */    58,   59,   88,   89,   90,  101,  101,   93,   94,  101,
 /*  6000 */    96,   97,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6010 */   101,  101,  101,   65,   38,   39,  101,  101,  101,   43,
 /*  6020 */    44,   45,  101,  101,    4,   77,   50,   79,    8,  101,
 /*  6030 */    10,  101,   56,   57,   58,   59,   88,   89,   90,  101,
 /*  6040 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  6050 */   101,  101,  101,  101,  101,  101,   36,   65,   38,   39,
 /*  6060 */   101,  101,  101,   43,  101,   45,  101,  101,    4,   77,
 /*  6070 */    50,   79,    8,  101,   10,  101,   56,   57,   58,   59,
 /*  6080 */    88,   89,   90,  101,  101,   93,   94,  101,   96,   97,
 /*  6090 */   101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6100 */    36,   65,   38,   39,  101,  101,  101,   43,  101,   45,
 /*  6110 */   101,  101,    4,   77,   50,   79,    8,  101,   10,  101,
 /*  6120 */    56,   57,   58,   59,   88,   89,   90,  101,  101,   93,
 /*  6130 */    94,  101,   96,   97,  101,  101,  101,  101,  101,  101,
 /*  6140 */   101,  101,  101,  101,  101,   65,   38,   39,  101,  101,
 /*  6150 */   101,   43,   44,   45,  101,  101,    4,   77,   50,   79,
 /*  6160 */     8,  101,   10,  101,   56,   57,   58,   59,   88,   89,
 /*  6170 */    90,  101,  101,   93,   94,   65,   96,   97,  101,  101,
 /*  6180 */   101,  101,  101,  101,  101,   75,  101,   77,   78,   79,
 /*  6190 */    38,   39,  101,  101,  101,   43,  101,   45,   88,   89,
 /*  6200 */    90,  101,   50,   93,   94,  101,   96,   97,   56,   57,
 /*  6210 */    58,   59,   65,  101,  101,  101,  101,  101,  101,  101,
 /*  6220 */   101,  101,   75,  101,   77,   78,   79,  101,  101,  101,
 /*  6230 */   101,  101,  101,  101,  101,   88,   89,   90,  101,  101,
 /*  6240 */    93,   94,  101,   96,   97,  101,  101,  101,  101,  101,
 /*  6250 */   101,   65,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6260 */   101,   75,  101,   77,   78,   79,  101,  101,  101,  101,
 /*  6270 */   101,  101,  101,  101,   88,   89,   90,   65,  101,   93,
 /*  6280 */    94,  101,   96,   97,  101,  101,  101,   75,  101,   77,
 /*  6290 */    78,   79,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6300 */    88,   89,   90,   65,  101,   93,   94,  101,   96,   97,
 /*  6310 */   101,  101,  101,   75,  101,   77,   78,   79,  101,  101,
 /*  6320 */   101,  101,  101,  101,  101,  101,   88,   89,   90,   65,
 /*  6330 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  6340 */   101,   77,  101,   79,  101,  101,  101,  101,  101,  101,
 /*  6350 */   101,  101,   88,   89,   90,   65,  101,   93,   94,  101,
 /*  6360 */    96,   97,  101,  101,  101,  101,  101,   77,  101,   79,
 /*  6370 */   101,  101,  101,  101,  101,  101,  101,  101,   88,   89,
 /*  6380 */    90,   65,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  6390 */   101,  101,  101,   77,  101,   79,  101,  101,  101,  101,
 /*  6400 */   101,  101,  101,  101,   88,   89,   90,   65,  101,   93,
 /*  6410 */    94,  101,   96,   97,  101,  101,  101,  101,  101,   77,
 /*  6420 */   101,   79,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6430 */    88,   89,   90,   65,  101,   93,   94,  101,   96,   97,
 /*  6440 */   101,  101,  101,  101,  101,   77,  101,   79,  101,  101,
 /*  6450 */   101,  101,  101,  101,  101,  101,   88,   89,   90,   65,
 /*  6460 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  6470 */   101,   77,  101,   79,  101,  101,  101,  101,  101,  101,
 /*  6480 */   101,  101,   88,   89,   90,   65,  101,   93,   94,  101,
 /*  6490 */    96,   97,  101,  101,  101,  101,  101,   77,  101,   79,
 /*  6500 */   101,  101,  101,  101,  101,  101,  101,  101,   88,   89,
 /*  6510 */    90,   65,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  6520 */   101,  101,  101,   77,  101,   79,  101,  101,  101,  101,
 /*  6530 */   101,  101,  101,  101,   88,   89,   90,   65,  101,   93,
 /*  6540 */    94,  101,   96,   97,  101,  101,  101,  101,  101,   77,
 /*  6550 */   101,   79,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6560 */    88,   89,   90,   65,  101,   93,   94,  101,   96,   97,
 /*  6570 */   101,  101,  101,  101,  101,   77,  101,   79,  101,  101,
 /*  6580 */   101,  101,  101,  101,  101,  101,   88,   89,   90,   65,
 /*  6590 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  6600 */   101,   77,  101,   79,  101,  101,  101,  101,  101,  101,
 /*  6610 */   101,  101,   88,   89,   90,   65,  101,   93,   94,  101,
 /*  6620 */    96,   97,  101,  101,  101,  101,  101,   77,  101,   79,
 /*  6630 */   101,  101,  101,  101,  101,  101,  101,  101,   88,   89,
 /*  6640 */    90,   65,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  6650 */   101,  101,  101,   77,  101,   79,  101,  101,  101,  101,
 /*  6660 */   101,  101,  101,  101,   88,   89,   90,   65,  101,   93,
 /*  6670 */    94,  101,   96,   97,  101,  101,  101,  101,  101,   77,
 /*  6680 */   101,   79,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6690 */    88,   89,   90,   65,  101,   93,   94,  101,   96,   97,
 /*  6700 */   101,  101,  101,  101,  101,   77,  101,   79,  101,  101,
 /*  6710 */   101,  101,  101,  101,  101,  101,   88,   89,   90,   65,
 /*  6720 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  6730 */   101,   77,  101,   79,  101,  101,  101,  101,  101,  101,
 /*  6740 */   101,  101,   88,   89,   90,   65,  101,   93,   94,  101,
 /*  6750 */    96,   97,  101,  101,  101,  101,  101,   77,  101,   79,
 /*  6760 */   101,  101,  101,  101,  101,  101,  101,  101,   88,   89,
 /*  6770 */    90,   65,  101,   93,   94,  101,   96,   97,  101,  101,
 /*  6780 */   101,  101,  101,   77,  101,   79,  101,  101,  101,  101,
 /*  6790 */   101,  101,  101,  101,   88,   89,   90,   65,  101,   93,
 /*  6800 */    94,  101,   96,   97,  101,  101,  101,  101,  101,   77,
 /*  6810 */   101,   79,  101,  101,  101,  101,  101,  101,  101,  101,
 /*  6820 */    88,   89,   90,   65,  101,   93,   94,  101,   96,   97,
 /*  6830 */   101,  101,  101,  101,  101,   77,  101,   79,  101,  101,
 /*  6840 */   101,  101,  101,  101,  101,  101,   88,   89,   90,   65,
 /*  6850 */   101,   93,   94,  101,   96,   97,  101,  101,  101,  101,
 /*  6860 */   101,   77,  101,   79,  101,  101,  101,  101,  101,  101,
 /*  6870 */   101,  101,   88,   89,   90,   65,  101,   93,   94,  101,
 /*  6880 */    96,   97,  101,  101,  101,  101,  101,   77,  101,   79,
 /*  6890 */   101,  101,  101,  101,  101,  101,  101,  101,   88,   89,
 /*  6900 */    90,  101,  101,   93,   94,  101,   96,   97,
};
#define YY_SHIFT_USE_DFLT (-8)
#define YY_SHIFT_MAX 378
static const short yy_shift_ofst[] = {
 /*     0 */   368, 2348, 3235, 6152, 2897, 6108, 5976, 6152, 6152, 6152,
 /*    10 */  5536, 5448, 5360, 5272, 5184, 6152, 6152,   -2,   55, 2373,
 /*    20 */  2416, 2547, 2678, 2590, 2503, 2634, 2459, 4612, 4524, 4436,
 /*    30 */  4348, 4260, 4172, 4084, 3996, 3908, 3820, 3732, 3644, 3556,
 /*    40 */  3468, 3380, 3292, 3208, 3176, 3117, 3029, 2985, 2941, 2809,
 /*    50 */  2765, 2721, 6020, 5932, 5888, 5800, 5756, 5712, 5624, 5580,
 /*    60 */  5492, 5316, 5228, 5404, 5668, 5844, 6064, 2853, 3073, 3267,
 /*    70 */  3336, 3424, 3512, 3600, 3688, 3776, 3864, 3952, 4040, 4128,
 /*    80 */  4216, 4304, 4392, 4480, 4568, 4656, 4700, 4744, 4788, 4832,
 /*    90 */  4876, 4920, 4964, 5008, 5052, 5096, 5140, 6152, 6152, 6152,
 /*   100 */  6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152,
 /*   110 */  6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152,
 /*   120 */  6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152,
 /*   130 */  6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152,
 /*   140 */  6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152,
 /*   150 */  6152, 6152, 6152,   -1,  514,  514,  514,  514, 2659, 1617,
 /*   160 */   518,  514,  136,  170,    1,   43,  100,   -7,   92,  514,
 /*   170 */   546,  546,  514,  514,  514,  514,  546,  200,  233,  357,
 /*   180 */   294,  169,  101,  326,  137,  605, 1228, 1769, 1708, 1677,
 /*   190 */  1645, 1614, 1576, 1545, 1514, 1483, 1451, 1420, 1389, 1352,
 /*   200 */  1321, 1290, 1259, 1197, 1166, 1135, 1104, 1073, 1041, 1010,
 /*   210 */   979,  948,  917,  886,  855,  824,  481,  450,  419,  388,
 /*   220 */   793,  762,  731,  700,  669,  638,  574,  543,  512, 1870,
 /*   230 */  1838, 1807, 1901, 1901, 1901, 1901, 1901, 1901, 2085, 2004,
 /*   240 */  1950, 1923, 2245, 2196, 2139, 2112, 2031, 1977, 2058, 2218,
 /*   250 */  2166,  255,  255,  255, 2272, 2272, 2293, 2314, 2337, 2411,
 /*   260 */  2453, 2453, 2499, 2499, 2499, 2499, 2533, 2533,  613, 1764,
 /*   270 */   613, 2339,   94, 2448,   52,  178,    3,    3,  174,  242,
 /*   280 */   238,  297,   12,  261,  252,  331,    3,   21,    3,   61,
 /*   290 */   291,    3,    3,   69,   89,  570,  473,  449,  484,  482,
 /*   300 */   462,  519,  483,  477,  566,  541,  610,  540,  513,  508,
 /*   310 */   485,  454,  443,  423,  384,  381,  358,  397,  371,  391,
 /*   320 */   329,  355,  332,  327,  302,  203,  167,  163,  135,  110,
 /*   330 */    99,   74,   58,  670,  665,  662,  639,  634,  631,  607,
 /*   340 */   612,  619,  641,  632,  635,  642,  663,  666,  673,  693,
 /*   350 */   104,  142,  196,  180,  209,  244,  284,  293,  328,  301,
 /*   360 */   365,  142,  360,  351,  390,  361,  342,  418,  389,  422,
 /*   370 */   435,  457,  456,  407,  452,  464,  142,  478,  142,
};
#define YY_REDUCE_USE_DFLT (-55)
#define YY_REDUCE_MAX 176
static const short yy_reduce_ofst[] = {
 /*     0 */   -54, 1681, 3112, 2431, 6110, 6110, 6147, 6186, 6212, 6238,
 /*    10 */  2562, 2562, 2562, 2562, 2562, 2562, 2693, 6628, 6680, 6732,
 /*    20 */  6810, 3528, 3704, 3836, 3968, 4056, 4232, 3134, 3396, 2781,
 /*    30 */  2522, 3268, 3045, 4100, 4012, 3880, 3748, 3572, 3440, 6758,
 /*    40 */  4540, 6654, 6576, 3134, 6472, 3134, 6420, 3134, 3134, 3134,
 /*    50 */  5332, 3134, 3134, 5200, 4980, 4716, 2825, 2869, 4452, 3134,
 /*    60 */  5904, 5112, 5552, 3134, 4584, 5288, 5376, 5596, 5640, 5728,
 /*    70 */  6498, 6342, 3134, 3484, 3660, 3134, 3134, 2957, 4188, 3075,
 /*    80 */  3312, 2737, 2653, 3134, 4276, 4144, 3134, 3924, 3792, 3616,
 /*    90 */  3134, 6784, 6706, 3134, 6602, 6550, 6524, 6498, 4452, 3075,
 /*   100 */  6446, 6394, 6368, 3660, 3484, 6342, 6316, 6290, 6264, 6080,
 /*   110 */  6036, 5992, 5948, 5904, 5860, 5816, 5772, 5728, 5684, 4980,
 /*   120 */  5640, 5596, 5288, 4584, 5552, 5508, 5464, 5420, 5244, 5156,
 /*   130 */  5112, 5068, 5024, 4936, 4892, 3312, 4848, 4760, 4672, 4496,
 /*   140 */  4408, 3134, 3001, 2957, 2913, 2825, 4320, 4628, 4364, 4540,
 /*   150 */  4716, 4804, 2869, 1316,  219,  -34, 1540,  -15,  140,  545,
 /*   160 */   -32,   77,  475,  475,  475,  475,  475,  542,  527,  517,
 /*   170 */   503,  471,  509,  507,  486,  476,  440,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   580,  579,  719,  833,  833,  833,  833,  833,  833,  833,
 /*    10 */   833,  833,  833,  833,  833,  720,  833,  610,  833,  833,
 /*    20 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    30 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    40 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    50 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    60 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    70 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    80 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*    90 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   100 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   110 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   120 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   130 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   140 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   150 */   833,  833,  833,  833,  833,  833,  833,  833,  592,  833,
 /*   160 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  685,
 /*   170 */   833,  606,  833,  833,  833,  833,  833,  833,  589,  833,
 /*   180 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   190 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   200 */   833,  833,  833,  833,  833,  833,  833,  833,  684,  833,
 /*   210 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   220 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   230 */   680,  833,  689,  731,  732,  589,  679,  681,  734,  734,
 /*   240 */   734,  734,  734,  596,  734,  734,  734,  734,  734,  734,
 /*   250 */   734,  734,  654,  595,  735,  736,  750,  749,  757,  756,
 /*   260 */   743,  744,  745,  746,  747,  748,  755,  754,  737,  592,
 /*   270 */   738,  592,  602,  594,  709,  833,  742,  741,  833,  833,
 /*   280 */   833,  833,  833,  833,  591,  833,  739,  761,  740,  593,
 /*   290 */   833,  753,  751,  833,  829,  833,  833,  833,  833,  833,
 /*   300 */   833,  833,  833,  833,  833,  712,  833,  833,  833,  833,
 /*   310 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   320 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   330 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   340 */   833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   350 */   833,  729,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   360 */   833,  826,  833,  833,  833,  833,  833,  833,  833,  833,
 /*   370 */   833,  833,  833,  833,  833,  833,  827,  830,  828,  819,
 /*   380 */   782,  692,  785,  777,  660,  617,  659,  707,  790,  780,
 /*   390 */   615,  657,  597,  600,  612,  725,  656,  652,  650,  648,
 /*   400 */   646,  706,  774,  768,  821,  771,  764,  763,  609,  769,
 /*   410 */   759,  644,  642,  640,  586,  772,  766,  825,  638,  636,
 /*   420 */   598,  634,  632,  630,  628,  626,  585,  773,  767,  693,
 /*   430 */   770,  762,  624,  622,  620,  832,  775,  765,  618,  701,
 /*   440 */   702,  823,  703,  694,  704,  616,  614,  613,  695,  700,
 /*   450 */   699,  831,  803,  797,  824,  800,  793,  792,  603,  798,
 /*   460 */   758,  697,  696,  687,  581,  801,  795,  686,  683,  698,
 /*   470 */   808,  818,  591,  802,  796,  682,  799,  791,  805,  813,
 /*   480 */   810,  590,  804,  794,  816,  708,  611,  809,  599,  590,
 /*   490 */   584,  815,  776,  812,  806,  604,  807,  814,  811,  817,
 /*   500 */   691,  717,  716,  688,  607,  690,  715,  713,  711,  710,
 /*   510 */   820,  605,  730,  583,  728,  727,  705,  588,  608,  587,
 /*   520 */   733,  726,  724,  674,  645,  673,  647,  675,  643,  672,
 /*   530 */   649,  676,  641,  671,  651,  677,  639,  670,  653,  678,
 /*   540 */   723,  582,  637,  669,  655,  635,  668,  752,  658,  601,
 /*   550 */   633,  667,  631,  666,  629,  665,  627,  722,  789,  783,
 /*   560 */   721,  786,  779,  778,  718,  784,  760,  664,  625,  663,
 /*   570 */   714,  787,  781,  623,  662,  621,  661,  619,  788,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  int stateno;       /* The state-number */
  int major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  YYMINORTYPE minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSIGN",        "LCBLOCK",       "RCBLOCK",     
  "LCURL",         "RCURL",         "COLON",         "BACKTICK",    
  "DICT",          "WHERE",         "NAME",          "COMMA",       
  "BITOR",         "FUNCTION_DEC",  "RSTREAM",       "LSTREAM",     
  "FUNCTION_CALL",  "PREPEND",       "APPEND",        "INDEX",       
  "OR",            "AND",           "BITXOR",        "BITAND",      
  "EQUALTO",       "NOTEQUALTO",    "GREATERTHAN",   "GORE",        
  "LESSTHAN",      "LORE",          "SHIFTL",        "SHIFTR",      
  "PLUS",          "MINUS",         "DIVIDE",        "TIMES",       
  "MODULO",        "POW",           "NOT",           "BITNOT",      
  "UMINUS",        "PLUSPLUS",      "COLONCOLON",    "LPAREN",      
  "RPAREN",        "LBRAC",         "RBRAC",         "COLLECTARRAY",
  "DELIMITER",     "WILDCARD",      "BACKSLASH",     "CASE",        
  "OF",            "LET",           "IN",            "PERIOD",      
  "PRINT",         "NUM",           "STRING",        "BOOLEAN",     
  "RANGE",         "RIGHT_POINTER",  "DATA",          "OPENQUOTEERROR",
  "error",         "expr",          "id",            "main",        
  "in",            "start",         "test",          "type_declaration",
  "spec",          "assignment",    "top_stmt",      "stmt",        
  "name_chain",    "function_call",  "stmt_list",     "array_index", 
  "case_statement",  "guard_statement",  "final_guard_statement",  "horizontal_assignment_list",
  "assignment_list",  "vertical_assignment_list",  "final_vertical_assignment_list",  "where",       
  "dict",          "string",        "name_space",    "vert_stmt_list",
  "final_vert_stmt_list",  "vertical_array",  "array",         "maybe_empty_stmt_list",
  "num",           "bool",          "maybe_empty_name_chain",  "pattern",     
  "type_chain",  
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "main ::= in",
 /*   1 */ "in ::=",
 /*   2 */ "in ::= in DELIMITER",
 /*   3 */ "in ::= in start DELIMITER",
 /*   4 */ "in ::= in test DELIMITER",
 /*   5 */ "start ::= type_declaration",
 /*   6 */ "start ::= spec",
 /*   7 */ "spec ::= assignment",
 /*   8 */ "spec ::= top_stmt",
 /*   9 */ "top_stmt ::= stmt",
 /*  10 */ "stmt ::= expr",
 /*  11 */ "name_chain ::= name_chain NAME",
 /*  12 */ "name_chain ::= NAME",
 /*  13 */ "expr ::= NAME",
 /*  14 */ "expr ::= expr RSTREAM function_call",
 /*  15 */ "expr ::= expr RSTREAM NAME",
 /*  16 */ "expr ::= function_call LSTREAM expr",
 /*  17 */ "expr ::= NAME LSTREAM expr",
 /*  18 */ "function_call ::= NAME LPAREN stmt_list RPAREN",
 /*  19 */ "function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  20 */ "expr ::= array_index LPAREN stmt_list RPAREN",
 /*  21 */ "function_call ::= NAME LPAREN RPAREN",
 /*  22 */ "function_call ::= array_index LPAREN RPAREN",
 /*  23 */ "expr ::= function_call",
 /*  24 */ "test ::= case_statement",
 /*  25 */ "guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER",
 /*  26 */ "guard_statement ::= name_chain ASSIGN LCBLOCK BITOR expr ASSIGN expr DELIMITER",
 /*  27 */ "guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER",
 /*  28 */ "final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK",
 /*  29 */ "final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK",
 /*  30 */ "assignment ::= final_guard_statement",
 /*  31 */ "assignment ::= name_chain ASSIGN expr",
 /*  32 */ "expr ::= LPAREN expr PLUS RPAREN",
 /*  33 */ "expr ::= LPAREN PLUS expr RPAREN",
 /*  34 */ "expr ::= LPAREN expr MINUS RPAREN",
 /*  35 */ "expr ::= LPAREN expr TIMES RPAREN",
 /*  36 */ "expr ::= LPAREN TIMES expr RPAREN",
 /*  37 */ "expr ::= LPAREN expr DIVIDE RPAREN",
 /*  38 */ "expr ::= LPAREN DIVIDE expr RPAREN",
 /*  39 */ "expr ::= LPAREN expr MODULO RPAREN",
 /*  40 */ "expr ::= LPAREN MODULO expr RPAREN",
 /*  41 */ "expr ::= LPAREN expr POW RPAREN",
 /*  42 */ "expr ::= LPAREN POW expr RPAREN",
 /*  43 */ "expr ::= LPAREN expr EQUALTO RPAREN",
 /*  44 */ "expr ::= LPAREN EQUALTO expr RPAREN",
 /*  45 */ "expr ::= LPAREN expr NOTEQUALTO RPAREN",
 /*  46 */ "expr ::= LPAREN NOTEQUALTO expr RPAREN",
 /*  47 */ "expr ::= LPAREN expr LESSTHAN RPAREN",
 /*  48 */ "expr ::= LPAREN LESSTHAN expr RPAREN",
 /*  49 */ "expr ::= LPAREN expr GREATERTHAN RPAREN",
 /*  50 */ "expr ::= LPAREN GREATERTHAN expr RPAREN",
 /*  51 */ "expr ::= LPAREN expr LORE RPAREN",
 /*  52 */ "expr ::= LPAREN LORE expr RPAREN",
 /*  53 */ "expr ::= LPAREN expr GORE RPAREN",
 /*  54 */ "expr ::= LPAREN GORE expr RPAREN",
 /*  55 */ "expr ::= LPAREN expr AND RPAREN",
 /*  56 */ "expr ::= LPAREN AND expr RPAREN",
 /*  57 */ "expr ::= LPAREN expr OR RPAREN",
 /*  58 */ "expr ::= LPAREN OR expr RPAREN",
 /*  59 */ "expr ::= LPAREN expr SHIFTL RPAREN",
 /*  60 */ "expr ::= LPAREN SHIFTL expr RPAREN",
 /*  61 */ "expr ::= LPAREN expr SHIFTR RPAREN",
 /*  62 */ "expr ::= LPAREN SHIFTR expr RPAREN",
 /*  63 */ "expr ::= LPAREN expr BITAND RPAREN",
 /*  64 */ "expr ::= LPAREN BITAND expr RPAREN",
 /*  65 */ "expr ::= LPAREN expr BITOR RPAREN",
 /*  66 */ "expr ::= LPAREN BITOR expr RPAREN",
 /*  67 */ "expr ::= LPAREN expr BITXOR RPAREN",
 /*  68 */ "expr ::= LPAREN BITXOR expr RPAREN",
 /*  69 */ "expr ::= LPAREN expr PREPEND RPAREN",
 /*  70 */ "expr ::= LPAREN PREPEND expr RPAREN",
 /*  71 */ "expr ::= LPAREN expr APPEND RPAREN",
 /*  72 */ "expr ::= LPAREN APPEND expr RPAREN",
 /*  73 */ "expr ::= LPAREN expr PLUSPLUS RPAREN",
 /*  74 */ "expr ::= LPAREN PLUSPLUS expr RPAREN",
 /*  75 */ "expr ::= expr BACKTICK NAME BACKTICK expr",
 /*  76 */ "expr ::= LPAREN BACKTICK NAME BACKTICK expr RPAREN",
 /*  77 */ "expr ::= LPAREN expr BACKTICK NAME BACKTICK RPAREN",
 /*  78 */ "expr ::= LPAREN PLUS RPAREN",
 /*  79 */ "expr ::= LPAREN MINUS RPAREN",
 /*  80 */ "expr ::= LPAREN TIMES RPAREN",
 /*  81 */ "expr ::= LPAREN DIVIDE RPAREN",
 /*  82 */ "expr ::= LPAREN MODULO RPAREN",
 /*  83 */ "expr ::= LPAREN POW RPAREN",
 /*  84 */ "expr ::= LPAREN EQUALTO RPAREN",
 /*  85 */ "expr ::= LPAREN NOTEQUALTO RPAREN",
 /*  86 */ "expr ::= LPAREN LESSTHAN RPAREN",
 /*  87 */ "expr ::= LPAREN GREATERTHAN RPAREN",
 /*  88 */ "expr ::= LPAREN LORE RPAREN",
 /*  89 */ "expr ::= LPAREN GORE RPAREN",
 /*  90 */ "expr ::= LPAREN AND RPAREN",
 /*  91 */ "expr ::= LPAREN OR RPAREN",
 /*  92 */ "expr ::= LPAREN SHIFTL RPAREN",
 /*  93 */ "expr ::= LPAREN SHIFTR RPAREN",
 /*  94 */ "expr ::= LPAREN BITAND RPAREN",
 /*  95 */ "expr ::= LPAREN BITOR RPAREN",
 /*  96 */ "expr ::= LPAREN BITXOR RPAREN",
 /*  97 */ "expr ::= LPAREN PREPEND RPAREN",
 /*  98 */ "expr ::= LPAREN APPEND RPAREN",
 /*  99 */ "expr ::= LPAREN PLUSPLUS RPAREN",
 /* 100 */ "expr ::= BACKSLASH name_chain ASSIGN expr",
 /* 101 */ "horizontal_assignment_list ::= name_chain ASSIGN expr",
 /* 102 */ "horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr",
 /* 103 */ "vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER",
 /* 104 */ "vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER",
 /* 105 */ "final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr",
 /* 106 */ "assignment_list ::= vertical_assignment_list",
 /* 107 */ "assignment_list ::= final_vertical_assignment_list",
 /* 108 */ "assignment_list ::= horizontal_assignment_list",
 /* 109 */ "where ::= WHERE LCBLOCK assignment_list RCBLOCK",
 /* 110 */ "assignment ::= name_chain ASSIGN expr expr",
 /* 111 */ "assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK",
 /* 112 */ "assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK",
 /* 113 */ "assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK",
 /* 114 */ "case_statement ::= CASE expr OF",
 /* 115 */ "test ::= LET IN",
 /* 116 */ "dict ::= DICT LCURL assignment_list RCURL",
 /* 117 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /* 118 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL",
 /* 119 */ "dict ::= LCURL assignment_list RCURL",
 /* 120 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /* 121 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL",
 /* 122 */ "expr ::= dict",
 /* 123 */ "expr ::= NAME LCURL NAME RCURL",
 /* 124 */ "expr ::= NAME LCURL string RCURL",
 /* 125 */ "name_space ::= NAME PERIOD NAME",
 /* 126 */ "name_space ::= function_call PERIOD NAME",
 /* 127 */ "name_space ::= name_space PERIOD NAME",
 /* 128 */ "function_call ::= name_space LPAREN stmt_list RPAREN",
 /* 129 */ "function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN",
 /* 130 */ "function_call ::= name_space",
 /* 131 */ "vert_stmt_list ::= stmt DELIMITER",
 /* 132 */ "vert_stmt_list ::= vert_stmt_list stmt DELIMITER",
 /* 133 */ "final_vert_stmt_list ::= vert_stmt_list stmt",
 /* 134 */ "vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC",
 /* 135 */ "array ::= vertical_array",
 /* 136 */ "array ::= LBRAC maybe_empty_stmt_list RBRAC",
 /* 137 */ "stmt_list ::= stmt",
 /* 138 */ "stmt_list ::= stmt_list stmt",
 /* 139 */ "expr ::= array",
 /* 140 */ "maybe_empty_stmt_list ::=",
 /* 141 */ "maybe_empty_stmt_list ::= stmt_list",
 /* 142 */ "expr ::= num",
 /* 143 */ "expr ::= string",
 /* 144 */ "expr ::= bool",
 /* 145 */ "expr ::= PRINT LPAREN expr RPAREN",
 /* 146 */ "expr ::= LPAREN expr RPAREN",
 /* 147 */ "num ::= NUM",
 /* 148 */ "string ::= STRING",
 /* 149 */ "bool ::= BOOLEAN",
 /* 150 */ "maybe_empty_name_chain ::= name_chain",
 /* 151 */ "maybe_empty_name_chain ::= pattern",
 /* 152 */ "assignment ::= name_chain maybe_empty_name_chain ASSIGN expr",
 /* 153 */ "assignment ::= NAME maybe_empty_name_chain ASSIGN expr",
 /* 154 */ "pattern ::= LPAREN NAME PREPEND NAME RPAREN",
 /* 155 */ "expr ::= expr PREPEND expr",
 /* 156 */ "expr ::= expr APPEND expr",
 /* 157 */ "expr ::= expr PLUSPLUS expr",
 /* 158 */ "expr ::= expr PLUS expr",
 /* 159 */ "expr ::= expr MINUS expr",
 /* 160 */ "expr ::= expr DIVIDE expr",
 /* 161 */ "expr ::= expr TIMES expr",
 /* 162 */ "expr ::= expr MODULO expr",
 /* 163 */ "expr ::= expr POW expr",
 /* 164 */ "expr ::= expr EQUALTO expr",
 /* 165 */ "expr ::= expr NOTEQUALTO expr",
 /* 166 */ "expr ::= expr LESSTHAN expr",
 /* 167 */ "expr ::= expr GREATERTHAN expr",
 /* 168 */ "expr ::= expr LORE expr",
 /* 169 */ "expr ::= expr GORE expr",
 /* 170 */ "expr ::= expr AND expr",
 /* 171 */ "expr ::= expr OR expr",
 /* 172 */ "expr ::= BITNOT expr",
 /* 173 */ "expr ::= LPAREN MINUS expr RPAREN",
 /* 174 */ "expr ::= NOT expr",
 /* 175 */ "expr ::= expr SHIFTL expr",
 /* 176 */ "expr ::= expr SHIFTR expr",
 /* 177 */ "expr ::= expr BITAND expr",
 /* 178 */ "expr ::= expr BITXOR expr",
 /* 179 */ "array_index ::= function_call LBRAC expr RBRAC",
 /* 180 */ "array_index ::= NAME LBRAC expr RBRAC",
 /* 181 */ "array_index ::= array_index LBRAC expr RBRAC",
 /* 182 */ "expr ::= array_index",
 /* 183 */ "array_index ::= NAME LBRAC PREPEND expr RBRAC",
 /* 184 */ "array_index ::= NAME LBRAC expr PREPEND RBRAC",
 /* 185 */ "array_index ::= NAME LBRAC expr PREPEND expr RBRAC",
 /* 186 */ "array_index ::= NAME LBRAC COLONCOLON expr RBRAC",
 /* 187 */ "array_index ::= NAME LBRAC expr COLONCOLON expr RBRAC",
 /* 188 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 189 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 190 */ "array_index ::= NAME LBRAC expr PREPEND MODULO RBRAC",
 /* 191 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 192 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 193 */ "array_index ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 194 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 195 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 196 */ "array_index ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 197 */ "array_index ::= name_space LBRAC expr RBRAC",
 /* 198 */ "array_index ::= array_index LBRAC PREPEND expr RBRAC",
 /* 199 */ "array_index ::= array_index LBRAC expr PREPEND RBRAC",
 /* 200 */ "array_index ::= array_index LBRAC expr PREPEND expr RBRAC",
 /* 201 */ "array_index ::= array_index LBRAC COLONCOLON expr RBRAC",
 /* 202 */ "array_index ::= array_index LBRAC expr COLONCOLON expr RBRAC",
 /* 203 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 204 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 205 */ "array_index ::= array_index LBRAC expr PREPEND MODULO RBRAC",
 /* 206 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 207 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 208 */ "array_index ::= array_index LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 209 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 210 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 211 */ "array_index ::= array_index LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 212 */ "array_index ::= function_call LBRAC PREPEND expr RBRAC",
 /* 213 */ "array_index ::= function_call LBRAC expr PREPEND RBRAC",
 /* 214 */ "array_index ::= function_call LBRAC expr PREPEND expr RBRAC",
 /* 215 */ "array_index ::= function_call LBRAC COLONCOLON expr RBRAC",
 /* 216 */ "array_index ::= function_call LBRAC expr COLONCOLON expr RBRAC",
 /* 217 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 218 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 219 */ "array_index ::= function_call LBRAC expr PREPEND MODULO RBRAC",
 /* 220 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 221 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 222 */ "array_index ::= function_call LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 223 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 224 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 225 */ "array_index ::= function_call LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 226 */ "array_index ::= name_space LBRAC PREPEND expr RBRAC",
 /* 227 */ "array_index ::= name_space LBRAC expr PREPEND RBRAC",
 /* 228 */ "array_index ::= name_space LBRAC expr PREPEND expr RBRAC",
 /* 229 */ "array_index ::= name_space LBRAC COLONCOLON expr RBRAC",
 /* 230 */ "array_index ::= name_space LBRAC expr COLONCOLON expr RBRAC",
 /* 231 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 232 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 233 */ "array_index ::= name_space LBRAC expr PREPEND MODULO RBRAC",
 /* 234 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 235 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 236 */ "array_index ::= name_space LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 237 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 238 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 239 */ "array_index ::= name_space LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 240 */ "expr ::= LBRAC expr RANGE expr RBRAC",
 /* 241 */ "expr ::= LBRAC expr COMMA expr RANGE expr RBRAC",
 /* 242 */ "type_declaration ::= NAME COLONCOLON NAME RIGHT_POINTER NAME",
 /* 243 */ "type_declaration ::= NAME COLONCOLON NAME",
 /* 244 */ "type_declaration ::= NAME COLONCOLON LBRAC NAME RBRAC RIGHT_POINTER NAME",
 /* 245 */ "type_declaration ::= NAME COLONCOLON LBRAC NAME RBRAC RIGHT_POINTER LBRAC NAME RBRAC",
 /* 246 */ "type_declaration ::= NAME COLONCOLON NAME RIGHT_POINTER LBRAC NAME RBRAC",
 /* 247 */ "type_declaration ::= NAME COLONCOLON name_chain RIGHT_POINTER name_chain",
 /* 248 */ "type_chain ::= name_chain BITOR name_chain",
 /* 249 */ "type_chain ::= type_chain BITOR name_chain",
 /* 250 */ "type_declaration ::= DATA NAME ASSIGN name_chain",
 /* 251 */ "type_declaration ::= DATA NAME ASSIGN type_chain",
 /* 252 */ "in ::= error",
 /* 253 */ "error ::= OPENQUOTEERROR",
};
#endif /* NDEBUG */

/*
** This function returns the symbolic name associated with a token
** value.
*/
const char *ParseTokenName(int tokenType){
#ifndef NDEBUG
  if( tokenType>0 && tokenType<(sizeof(yyTokenName)/sizeof(yyTokenName[0])) ){
    return yyTokenName[tokenType];
  }else{
    return "Unknown";
  }
#else
  return "";
#endif
}

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(YYCODETYPE yymajor, YYMINORTYPE *yypminor){
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
#line 48 "./src/Grammar/grammar.y"
{ token_destructor((yypminor->yy0)); }
#line 2171 "./src/Grammar/grammar.c"
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor( yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
  (*freeProc)((void*)pParser);
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  if( iLookAhead==YYNOCODE ){
    return YY_NO_ACTION;
  }
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      int iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  /* int stateno = pParser->yystack[pParser->yyidx].stateno; */
 
  if( stateno>YY_REDUCE_MAX ||
      (i = yy_reduce_ofst[stateno])==YY_REDUCE_USE_DFLT ){
    return yy_default[stateno];
  }
  if( iLookAhead==YYNOCODE ){
    return YY_NO_ACTION;
  }
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer ot the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
  if( yypParser->yyidx>=YYSTACKDEPTH ){
     ParseARG_FETCH;
     yypParser->yyidx--;
#ifndef NDEBUG
     if( yyTraceFILE ){
       fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
     }
#endif
     while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
     /* Here code is inserted which will execute if the parser
     ** stack every overflows */
     ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
     return;
  }
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 67, 1 },
  { 68, 0 },
  { 68, 2 },
  { 68, 3 },
  { 68, 3 },
  { 69, 1 },
  { 69, 1 },
  { 72, 1 },
  { 72, 1 },
  { 74, 1 },
  { 75, 1 },
  { 76, 2 },
  { 76, 1 },
  { 65, 1 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 77, 4 },
  { 77, 6 },
  { 65, 4 },
  { 77, 3 },
  { 77, 3 },
  { 65, 1 },
  { 70, 1 },
  { 81, 7 },
  { 81, 8 },
  { 81, 6 },
  { 82, 6 },
  { 82, 6 },
  { 73, 1 },
  { 73, 3 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 4 },
  { 65, 5 },
  { 65, 6 },
  { 65, 6 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 4 },
  { 83, 3 },
  { 83, 4 },
  { 85, 4 },
  { 85, 5 },
  { 86, 4 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 87, 4 },
  { 73, 4 },
  { 73, 6 },
  { 73, 8 },
  { 73, 8 },
  { 80, 3 },
  { 70, 2 },
  { 88, 4 },
  { 88, 7 },
  { 88, 6 },
  { 88, 3 },
  { 88, 6 },
  { 88, 5 },
  { 65, 1 },
  { 65, 4 },
  { 65, 4 },
  { 90, 3 },
  { 90, 3 },
  { 90, 3 },
  { 77, 4 },
  { 77, 6 },
  { 77, 1 },
  { 91, 2 },
  { 91, 3 },
  { 92, 2 },
  { 93, 5 },
  { 94, 1 },
  { 94, 3 },
  { 78, 1 },
  { 78, 2 },
  { 65, 1 },
  { 95, 0 },
  { 95, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 4 },
  { 65, 3 },
  { 96, 1 },
  { 89, 1 },
  { 97, 1 },
  { 98, 1 },
  { 98, 1 },
  { 73, 4 },
  { 73, 4 },
  { 99, 5 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 2 },
  { 65, 4 },
  { 65, 2 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 65, 3 },
  { 79, 4 },
  { 79, 4 },
  { 79, 4 },
  { 65, 1 },
  { 79, 5 },
  { 79, 5 },
  { 79, 6 },
  { 79, 5 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 8 },
  { 79, 9 },
  { 79, 10 },
  { 79, 7 },
  { 79, 4 },
  { 79, 5 },
  { 79, 5 },
  { 79, 6 },
  { 79, 5 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 8 },
  { 79, 9 },
  { 79, 10 },
  { 79, 7 },
  { 79, 5 },
  { 79, 5 },
  { 79, 6 },
  { 79, 5 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 8 },
  { 79, 9 },
  { 79, 10 },
  { 79, 7 },
  { 79, 5 },
  { 79, 5 },
  { 79, 6 },
  { 79, 5 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 6 },
  { 79, 7 },
  { 79, 8 },
  { 79, 8 },
  { 79, 9 },
  { 79, 10 },
  { 79, 7 },
  { 65, 5 },
  { 65, 7 },
  { 71, 5 },
  { 71, 3 },
  { 71, 7 },
  { 71, 9 },
  { 71, 7 },
  { 71, 5 },
  { 100, 3 },
  { 100, 3 },
  { 71, 4 },
  { 71, 4 },
  { 68, 1 },
  { 64, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

#ifndef NDEBUG
  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  */
  memset(&yygotominor, 0, sizeof(yygotominor));
#endif

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 5:
#line 105 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy152.type;
    optic::out() << "Type Declaration" << std::endl;
}
#line 2669 "./src/Grammar/grammar.c"
        break;
      case 6:
#line 111 "./src/Grammar/grammar.y"
{
/*    std::cout << "Object of type: " << yymsp[0].minor.yy152.type << " hit the stack!" << std::endl;*/
/*    optic::out() << "Object at end of parser: ";*/
/*    print_object(yymsp[0].minor.yy152);*/
/*    if(yymsp[0].minor.yy152.type!=optic::OPERATION_TREE)*/
/*    {*/
/*        optic::object a = mem_alloc(optic::OPERATION_TREE);*/
/*        a.data.array->push_back(yymsp[0].minor.yy152);*/
/*        optic::resolve_stack_from_parser(a, true);*/
/*    }*/
/*    else*/
/*    {*/
/*        optic::resolve_stack_from_parser(yymsp[0].minor.yy152, true);*/
/*        optic::resolve_stack_from_parser(flatten_tree(yymsp[0].minor.yy152), true);*/
/*    }*/

    //New LLVM JIT-compiler:
    optic::FunctionAST* top_level = optic::convert_to_top_level_function(yymsp[0].minor.yy152.ast,yymsp[0].minor.yy152.ast->type());
    optic::jit_compile(top_level,true,false);
}
#line 2693 "./src/Grammar/grammar.c"
        break;
      case 7:
      case 24:
#line 133 "./src/Grammar/grammar.y"
{
    yygotominor.yy152=yymsp[0].minor.yy152;
}
#line 2701 "./src/Grammar/grammar.c"
        break;
      case 8:
      case 9:
#line 138 "./src/Grammar/grammar.y"
{
    yygotominor.yy152=yymsp[0].minor.yy152;

}
#line 2710 "./src/Grammar/grammar.c"
        break;
      case 10:
#line 150 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[0].minor.yy152;

}
#line 2718 "./src/Grammar/grammar.c"
        break;
      case 11:
#line 156 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy152.type!=optic::ARRAY)
    {
        yygotominor.yy152 = optic::mem_alloc(optic::ARRAY);

        yymsp[-1].minor.yy152.type = optic::UNDECLARED_VARIABLE;
        yymsp[0].minor.yy0.type = optic::UNDECLARED_VARIABLE;

        yygotominor.yy152.data.array->push_back(yymsp[-1].minor.yy152);
        yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy152 = yymsp[-1].minor.yy152;
        yymsp[0].minor.yy0.type = optic::UNDECLARED_VARIABLE;
        yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 2740 "./src/Grammar/grammar.c"
        break;
      case 12:
#line 176 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[0].minor.yy0;
    yygotominor.yy152.type = optic::UNDECLARED_VARIABLE;
}
#line 2748 "./src/Grammar/grammar.c"
        break;
      case 13:
#line 182 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[0].minor.yy0;
    yygotominor.yy152.type = optic::UNDECLARED_VARIABLE;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2761 "./src/Grammar/grammar.c"
        break;
      case 14:
#line 193 "./src/Grammar/grammar.y"
{
    if(yymsp[0].minor.yy152.type==optic::OPERATION_TREE)
    {
        yymsp[0].minor.yy152.data.array->at(2).data.array->push_front(yymsp[-2].minor.yy152);
        yygotominor.yy152 = yymsp[0].minor.yy152;
    }
    else
    {
        optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        function_body.data.array->push_back(yymsp[-2].minor.yy152);
        yymsp[0].minor.yy152.type = optic::UNDECLARED_VARIABLE;
        optic::store_operations(yygotominor.yy152,yymsp[0].minor.yy152,function_body,optic::call_function);
    }
  yy_destructor(14,&yymsp[-1].minor);
}
#line 2780 "./src/Grammar/grammar.c"
        break;
      case 15:
#line 209 "./src/Grammar/grammar.y"
{
    optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);;
    function_body.data.array->push_back(yymsp[-2].minor.yy152);
    optic::store_operations(yygotominor.yy152,yymsp[0].minor.yy0,function_body,optic::call_function);
  yy_destructor(14,&yymsp[-1].minor);
}
#line 2790 "./src/Grammar/grammar.c"
        break;
      case 16:
#line 216 "./src/Grammar/grammar.y"
{
    if(yymsp[-2].minor.yy152.type==optic::OPERATION_TREE)
    {
        yymsp[-2].minor.yy152.data.array->at(2).data.array->push_front(yymsp[0].minor.yy152);
        yygotominor.yy152 = yymsp[-2].minor.yy152;
    }
    else
    {
        optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        function_body.data.array->push_back(yymsp[0].minor.yy152);
        optic::store_operations(yygotominor.yy152,yymsp[-2].minor.yy152,function_body,optic::call_function);
    }
  yy_destructor(15,&yymsp[-1].minor);
}
#line 2808 "./src/Grammar/grammar.c"
        break;
      case 17:
#line 231 "./src/Grammar/grammar.y"
{
    optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);;
    function_body.data.array->push_back(yymsp[0].minor.yy152);
    optic::store_operations(yygotominor.yy152,yymsp[-2].minor.yy0,function_body,optic::call_function);
  yy_destructor(15,&yymsp[-1].minor);
}
#line 2818 "./src/Grammar/grammar.c"
        break;
      case 18:
#line 238 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy152.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy152.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy152;
        yymsp[-1].minor.yy152 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy152.data.array->push_back(temp);
    }
    optic::store_operations(yygotominor.yy152,yymsp[-3].minor.yy0,yymsp[-1].minor.yy152,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 2842 "./src/Grammar/grammar.c"
        break;
      case 19:
#line 258 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy152.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy152.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy152;
        yymsp[-1].minor.yy152 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy152.data.array->push_back(temp);
    }

    optic::store_operations(yygotominor.yy152,yymsp[-5].minor.yy0,yymsp[-1].minor.yy152,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(46,&yymsp[-3].minor);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 2869 "./src/Grammar/grammar.c"
        break;
      case 20:
#line 279 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy152.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy152.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy152;
        yymsp[-1].minor.yy152 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy152.data.array->push_back(temp);
    }
    optic::store_operations(yygotominor.yy152,yymsp[-3].minor.yy152,yymsp[-1].minor.yy152,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 2893 "./src/Grammar/grammar.c"
        break;
      case 21:
#line 300 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 2907 "./src/Grammar/grammar.c"
        break;
      case 22:
#line 310 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-2].minor.yy152;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 2921 "./src/Grammar/grammar.c"
        break;
      case 23:
      case 106:
      case 107:
      case 108:
      case 130:
      case 135:
      case 137:
      case 139:
      case 182:
#line 320 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[0].minor.yy152;
}
#line 2936 "./src/Grammar/grammar.c"
        break;
      case 25:
#line 332 "./src/Grammar/grammar.y"
{
    optic::object tree = create_condition_tree(yymsp[-3].minor.yy152,yymsp[-1].minor.yy152);
    yygotominor.yy152 = create_guard(yymsp[-6].minor.yy152,tree);
  yy_destructor(2,&yymsp[-5].minor);
  yy_destructor(12,&yymsp[-4].minor);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[0].minor);
}
#line 2948 "./src/Grammar/grammar.c"
        break;
      case 26:
#line 339 "./src/Grammar/grammar.y"
{
    optic::out() << "Syntax Error: Cannot assign a guard statement to a function: get rid of the '='." << std::endl;
    optic::correct_parsing = false;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(1,&yymsp[-6].minor);
  yy_destructor(2,&yymsp[-5].minor);
  yy_destructor(12,&yymsp[-4].minor);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[0].minor);
}
#line 2966 "./src/Grammar/grammar.c"
        break;
      case 27:
#line 350 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy152,yymsp[-3].minor.yy152,yymsp[-1].minor.yy152);
    yygotominor.yy152=yymsp[-5].minor.yy152;
  yy_destructor(12,&yymsp[-4].minor);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[0].minor);
}
#line 2977 "./src/Grammar/grammar.c"
        break;
      case 28:
#line 356 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy152,yymsp[-3].minor.yy152,yymsp[-1].minor.yy152);
    yygotominor.yy152=yymsp[-5].minor.yy152;
  yy_destructor(12,&yymsp[-4].minor);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(3,&yymsp[0].minor);
}
#line 2988 "./src/Grammar/grammar.c"
        break;
      case 29:
#line 362 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-5].minor.yy152,yymsp[-1].minor.yy152);
    yygotominor.yy152=yymsp[-5].minor.yy152;
  yy_destructor(12,&yymsp[-4].minor);
  yy_destructor(49,&yymsp[-3].minor);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(3,&yymsp[0].minor);
}
#line 3000 "./src/Grammar/grammar.c"
        break;
      case 30:
#line 368 "./src/Grammar/grammar.y"
{

    panopticon::object& b = yymsp[0].minor.yy152.data.array->at(0);
    panopticon::object& c = yymsp[0].minor.yy152.data.array->at(1);

    panopticon::object resolve;
    panopticon::store_operations(resolve, c, &panopticon::resolve_guard,false);

    resolve.type = panopticon::FUNCTION_BODY;
    b.type = optic::FUNCTION_ARG_NAMES;
    panopticon::store_operations(yygotominor.yy152, b, resolve, &panopticon::assign_variable,false);
    optic::shallow_mem_free_array(yymsp[0].minor.yy152.data.array,optic::GUARD);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 3022 "./src/Grammar/grammar.c"
        break;
      case 31:
#line 388 "./src/Grammar/grammar.y"
{
    insure_ready_for_assignment(yymsp[-2].minor.yy152,yymsp[0].minor.yy152);
    panopticon::store_operations(yygotominor.yy152, yymsp[-2].minor.yy152, yymsp[0].minor.yy152, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(1,&yymsp[-1].minor);
}
#line 3036 "./src/Grammar/grammar.c"
        break;
      case 32:
#line 405 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::plus);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(32,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3046 "./src/Grammar/grammar.c"
        break;
      case 33:
#line 410 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::plus);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(32,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3056 "./src/Grammar/grammar.c"
        break;
      case 34:
#line 415 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::minus);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(33,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3066 "./src/Grammar/grammar.c"
        break;
      case 35:
#line 426 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::multiply);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(35,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3076 "./src/Grammar/grammar.c"
        break;
      case 36:
#line 431 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::multiply);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(35,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3086 "./src/Grammar/grammar.c"
        break;
      case 37:
#line 436 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::divide);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(34,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3096 "./src/Grammar/grammar.c"
        break;
      case 38:
#line 441 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::divide);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(34,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3106 "./src/Grammar/grammar.c"
        break;
      case 39:
#line 446 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::modulo);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3116 "./src/Grammar/grammar.c"
        break;
      case 40:
#line 451 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::modulo);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(36,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3126 "./src/Grammar/grammar.c"
        break;
      case 41:
#line 456 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::value_pow);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(37,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3136 "./src/Grammar/grammar.c"
        break;
      case 42:
#line 461 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::value_pow);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(37,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3146 "./src/Grammar/grammar.c"
        break;
      case 43:
#line 466 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::equal_to);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(24,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3156 "./src/Grammar/grammar.c"
        break;
      case 44:
#line 471 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::equal_to);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(24,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3166 "./src/Grammar/grammar.c"
        break;
      case 45:
#line 476 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::not_equal_to);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(25,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3176 "./src/Grammar/grammar.c"
        break;
      case 46:
#line 481 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::not_equal_to);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(25,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3186 "./src/Grammar/grammar.c"
        break;
      case 47:
#line 486 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::less_than);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(28,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3196 "./src/Grammar/grammar.c"
        break;
      case 48:
#line 491 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::less_than);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(28,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3206 "./src/Grammar/grammar.c"
        break;
      case 49:
#line 496 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::greater_than);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(26,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3216 "./src/Grammar/grammar.c"
        break;
      case 50:
#line 501 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::greater_than);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(26,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3226 "./src/Grammar/grammar.c"
        break;
      case 51:
#line 506 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::lore);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(29,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3236 "./src/Grammar/grammar.c"
        break;
      case 52:
#line 511 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::lore);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(29,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3246 "./src/Grammar/grammar.c"
        break;
      case 53:
#line 516 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::gore);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(27,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3256 "./src/Grammar/grammar.c"
        break;
      case 54:
#line 521 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::gore);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(27,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3266 "./src/Grammar/grammar.c"
        break;
      case 55:
#line 526 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::value_and);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(21,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3276 "./src/Grammar/grammar.c"
        break;
      case 56:
#line 531 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::value_and);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(21,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3286 "./src/Grammar/grammar.c"
        break;
      case 57:
#line 536 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::value_or);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(20,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3296 "./src/Grammar/grammar.c"
        break;
      case 58:
#line 541 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::value_or);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(20,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3306 "./src/Grammar/grammar.c"
        break;
      case 59:
#line 546 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::shift_left);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(30,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3316 "./src/Grammar/grammar.c"
        break;
      case 60:
#line 551 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::shift_left);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(30,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3326 "./src/Grammar/grammar.c"
        break;
      case 61:
#line 556 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::shift_right);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(31,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3336 "./src/Grammar/grammar.c"
        break;
      case 62:
#line 561 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::shift_right);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(31,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3346 "./src/Grammar/grammar.c"
        break;
      case 63:
#line 566 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::bit_and);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(23,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3356 "./src/Grammar/grammar.c"
        break;
      case 64:
#line 571 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::bit_and);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(23,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3366 "./src/Grammar/grammar.c"
        break;
      case 65:
#line 576 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::bit_or);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(12,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3376 "./src/Grammar/grammar.c"
        break;
      case 66:
#line 581 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::bit_or);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(12,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3386 "./src/Grammar/grammar.c"
        break;
      case 67:
#line 586 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::bit_xor);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(22,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3396 "./src/Grammar/grammar.c"
        break;
      case 68:
#line 591 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::bit_xor);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(22,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3406 "./src/Grammar/grammar.c"
        break;
      case 69:
#line 596 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::prepend,false);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(17,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3416 "./src/Grammar/grammar.c"
        break;
      case 70:
#line 601 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::prepend,false);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3426 "./src/Grammar/grammar.c"
        break;
      case 71:
#line 606 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::append,false);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(18,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3436 "./src/Grammar/grammar.c"
        break;
      case 72:
#line 611 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::append,false);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(18,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3446 "./src/Grammar/grammar.c"
        break;
      case 73:
#line 616 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy152,yymsp[-2].minor.yy152,optic::concat,false);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(41,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3456 "./src/Grammar/grammar.c"
        break;
      case 74:
#line 621 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy152,yymsp[-1].minor.yy152,optic::concat,false);
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(41,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3466 "./src/Grammar/grammar.c"
        break;
      case 75:
#line 627 "./src/Grammar/grammar.y"
{

    optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
    args.data.array->push_back(yymsp[-4].minor.yy152);
    args.data.array->push_back(yymsp[0].minor.yy152);
    optic::store_operations(yygotominor.yy152,yymsp[-2].minor.yy0,args,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(7,&yymsp[-3].minor);
  yy_destructor(7,&yymsp[-1].minor);
}
#line 3484 "./src/Grammar/grammar.c"
        break;
      case 76:
#line 642 "./src/Grammar/grammar.y"
{

    //Function name/arg
    optic::object name_array = mem_alloc(optic::ARRAY);
    optic::object name = optic::mem_alloc_variable("Anonymous");
    optic::object arg = optic::mem_alloc_variable("x");
    name_array.data.array->push_front(name);
    name_array.data.array->push_back(arg);

    //Store Function call
    optic::object body;
    optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
    optic::object var = optic::mem_alloc_variable("x");
    args.data.array->push_back(var);
    args.data.array->push_back(yymsp[-1].minor.yy152);
    optic::store_operations(body,yymsp[-3].minor.yy0,args,optic::call_function);

    insure_ready_for_assignment(name_array,body);
    store_operations(yygotominor.yy152,name_array,body,optic::create_function);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-5].minor);
  yy_destructor(7,&yymsp[-4].minor);
  yy_destructor(7,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3518 "./src/Grammar/grammar.c"
        break;
      case 77:
#line 680 "./src/Grammar/grammar.y"
{

    //Function name/arg
    optic::object name_array = mem_alloc(optic::ARRAY);
    optic::object name = optic::mem_alloc_variable("Anonymous");
    optic::object arg = optic::mem_alloc_variable("x");
    name_array.data.array->push_front(name);
    name_array.data.array->push_back(arg);

    //Store Function call
    optic::object body;
    optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
    args.data.array->push_back(yymsp[-4].minor.yy152);
    optic::object var = optic::mem_alloc_variable("x");
    args.data.array->push_back(var);
    optic::store_operations(body,yymsp[-2].minor.yy0,args,optic::call_function);

    insure_ready_for_assignment(name_array,body);
    store_operations(yygotominor.yy152,name_array,body,optic::create_function);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-5].minor);
  yy_destructor(7,&yymsp[-3].minor);
  yy_destructor(7,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3552 "./src/Grammar/grammar.c"
        break;
      case 78:
#line 709 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::plus);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(32,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3562 "./src/Grammar/grammar.c"
        break;
      case 79:
#line 714 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::minus);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(33,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3572 "./src/Grammar/grammar.c"
        break;
      case 80:
#line 719 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::multiply);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(35,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3582 "./src/Grammar/grammar.c"
        break;
      case 81:
#line 724 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::divide);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(34,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3592 "./src/Grammar/grammar.c"
        break;
      case 82:
#line 729 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::modulo);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3602 "./src/Grammar/grammar.c"
        break;
      case 83:
#line 734 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::value_pow);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(37,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3612 "./src/Grammar/grammar.c"
        break;
      case 84:
#line 739 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::equal_to);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(24,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3622 "./src/Grammar/grammar.c"
        break;
      case 85:
#line 744 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::not_equal_to);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(25,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3632 "./src/Grammar/grammar.c"
        break;
      case 86:
#line 749 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::less_than);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(28,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3642 "./src/Grammar/grammar.c"
        break;
      case 87:
#line 754 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::greater_than);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(26,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3652 "./src/Grammar/grammar.c"
        break;
      case 88:
#line 759 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::lore);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(29,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3662 "./src/Grammar/grammar.c"
        break;
      case 89:
#line 764 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::gore);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(27,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3672 "./src/Grammar/grammar.c"
        break;
      case 90:
#line 769 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::value_and);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(21,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3682 "./src/Grammar/grammar.c"
        break;
      case 91:
#line 774 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::value_or);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(20,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3692 "./src/Grammar/grammar.c"
        break;
      case 92:
#line 779 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::shift_left);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(30,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3702 "./src/Grammar/grammar.c"
        break;
      case 93:
#line 784 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::shift_right);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(31,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3712 "./src/Grammar/grammar.c"
        break;
      case 94:
#line 789 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::bit_and);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(23,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3722 "./src/Grammar/grammar.c"
        break;
      case 95:
#line 794 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::bit_or);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(12,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3732 "./src/Grammar/grammar.c"
        break;
      case 96:
#line 799 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::bit_xor);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(22,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3742 "./src/Grammar/grammar.c"
        break;
      case 97:
#line 804 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::prepend);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(17,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3752 "./src/Grammar/grammar.c"
        break;
      case 98:
#line 809 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::append);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(18,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3762 "./src/Grammar/grammar.c"
        break;
      case 99:
#line 814 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy152,optic::concat);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(41,&yymsp[-1].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 3772 "./src/Grammar/grammar.c"
        break;
      case 100:
#line 820 "./src/Grammar/grammar.y"
{
    if(yymsp[-2].minor.yy152.type == optic::ARRAY)
    {
        optic::object name = optic::mem_alloc_variable("Anonymous");
        yymsp[-2].minor.yy152.data.array->push_front(name);
        insure_ready_for_assignment(yymsp[-2].minor.yy152,yymsp[0].minor.yy152);
        store_operations(yygotominor.yy152,yymsp[-2].minor.yy152,yymsp[0].minor.yy152,optic::create_function);
    }
    else
    {
        optic::object name_array = mem_alloc(optic::ARRAY);
        optic::object name = optic::mem_alloc_variable("Anonymous");
        name_array.data.array->push_front(name);
        name_array.data.array->push_back(yymsp[-2].minor.yy152);
        insure_ready_for_assignment(name_array,yymsp[0].minor.yy152);
        store_operations(yygotominor.yy152,name_array,yymsp[0].minor.yy152,optic::create_function);
    }
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(50,&yymsp[-3].minor);
  yy_destructor(1,&yymsp[-1].minor);
}
#line 3801 "./src/Grammar/grammar.c"
        break;
      case 101:
#line 849 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy152.data.array->push_back(yymsp[-2].minor.yy152);
    yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
  yy_destructor(1,&yymsp[-1].minor);
}
#line 3811 "./src/Grammar/grammar.c"
        break;
      case 102:
      case 105:
#line 856 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-3].minor.yy152;
    yygotominor.yy152.data.array->push_back(yymsp[-2].minor.yy152);
    yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
  yy_destructor(1,&yymsp[-1].minor);
}
#line 3822 "./src/Grammar/grammar.c"
        break;
      case 103:
#line 863 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy152.data.array->push_back(yymsp[-3].minor.yy152);
    yygotominor.yy152.data.array->push_back(yymsp[-1].minor.yy152);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[0].minor);
}
#line 3833 "./src/Grammar/grammar.c"
        break;
      case 104:
#line 870 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-4].minor.yy152;
    yygotominor.yy152.data.array->push_back(yymsp[-3].minor.yy152);
    yygotominor.yy152.data.array->push_back(yymsp[-1].minor.yy152);
  yy_destructor(1,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[0].minor);
}
#line 3844 "./src/Grammar/grammar.c"
        break;
      case 109:
#line 899 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-1].minor.yy152;
    optic::object serial_result;
    optic::object result;
    optic::object previous_result;
    for(int i=0;i<yymsp[-1].minor.yy152.data.array->size(); i+=2)
    {
        insure_ready_for_assignment(
            yymsp[-1].minor.yy152.data.array->at(i),
            yymsp[-1].minor.yy152.data.array->at(i+1)
        );
        panopticon::store_operations(
            result,
            yymsp[-1].minor.yy152.data.array->at(i),
            yymsp[-1].minor.yy152.data.array->at(i+1),
            panopticon::assign_variable
        );
        optic::store_operations(serial_result,previous_result,result);
        previous_result = serial_result;
    }
    optic::shallow_mem_free_array(yymsp[-1].minor.yy152.data.array,optic::ARRAY);
    yygotominor.yy152 = serial_result;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(9,&yymsp[-3].minor);
  yy_destructor(2,&yymsp[-2].minor);
  yy_destructor(3,&yymsp[0].minor);
}
#line 3879 "./src/Grammar/grammar.c"
        break;
      case 110:
#line 929 "./src/Grammar/grammar.y"
{
    optic::out() << "Error: Cannot declare two statements in a single assignment." << std::endl;
    optic::correct_parsing = false;
    while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
    ParseARG_STORE;
  yy_destructor(1,&yymsp[-2].minor);
}
#line 3890 "./src/Grammar/grammar.c"
        break;
      case 111:
#line 937 "./src/Grammar/grammar.y"
{
    panopticon::object body;
    panopticon::store_operations(body,yymsp[-1].minor.yy152,yymsp[-3].minor.yy152,false);
    insure_ready_for_assignment(yymsp[-5].minor.yy152,body);
    panopticon::store_operations(yygotominor.yy152, yymsp[-5].minor.yy152, body, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(1,&yymsp[-4].minor);
  yy_destructor(2,&yymsp[-2].minor);
  yy_destructor(3,&yymsp[0].minor);
}
#line 3908 "./src/Grammar/grammar.c"
        break;
      case 112:
#line 950 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-7].minor.yy152,yymsp[-5].minor.yy152,yymsp[-3].minor.yy152);
    panopticon::object& b = yymsp[-7].minor.yy152.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy152.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    panopticon::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy152,resolve,false);
    insure_ready_for_assignment(yymsp[-7].minor.yy152,combined);
    panopticon::store_operations(yygotominor.yy152, yymsp[-7].minor.yy152, combined, panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(12,&yymsp[-6].minor);
  yy_destructor(1,&yymsp[-4].minor);
  yy_destructor(48,&yymsp[-2].minor);
  yy_destructor(3,&yymsp[0].minor);
}
#line 3934 "./src/Grammar/grammar.c"
        break;
      case 113:
#line 970 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-7].minor.yy152,yymsp[-3].minor.yy152);
    panopticon::object& b = yymsp[-7].minor.yy152.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy152.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    optic::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy152,resolve,false);
    insure_ready_for_assignment(b,combined);
    panopticon::store_operations(yygotominor.yy152, b, combined, &panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(12,&yymsp[-6].minor);
  yy_destructor(49,&yymsp[-5].minor);
  yy_destructor(1,&yymsp[-4].minor);
  yy_destructor(48,&yymsp[-2].minor);
  yy_destructor(3,&yymsp[0].minor);
}
#line 3961 "./src/Grammar/grammar.c"
        break;
      case 114:
#line 994 "./src/Grammar/grammar.y"
{
/*    yygotominor.yy152=B;*/
    yygotominor.yy152.type = optic::GUARD;
  yy_destructor(51,&yymsp[-2].minor);
  yy_destructor(52,&yymsp[0].minor);
}
#line 3971 "./src/Grammar/grammar.c"
        break;
      case 116:
#line 1011 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-1].minor.yy152;
  yy_destructor(8,&yymsp[-3].minor);
  yy_destructor(4,&yymsp[-2].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 3981 "./src/Grammar/grammar.c"
        break;
      case 117:
#line 1016 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-3].minor.yy152;
  yy_destructor(4,&yymsp[-6].minor);
  yy_destructor(8,&yymsp[-5].minor);
  yy_destructor(2,&yymsp[-4].minor);
  yy_destructor(3,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[-1].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 3994 "./src/Grammar/grammar.c"
        break;
      case 118:
#line 1021 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-2].minor.yy152;
  yy_destructor(4,&yymsp[-5].minor);
  yy_destructor(8,&yymsp[-4].minor);
  yy_destructor(2,&yymsp[-3].minor);
  yy_destructor(3,&yymsp[-1].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 4006 "./src/Grammar/grammar.c"
        break;
      case 119:
#line 1026 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-1].minor.yy152;
  yy_destructor(4,&yymsp[-2].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 4015 "./src/Grammar/grammar.c"
        break;
      case 120:
#line 1031 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-3].minor.yy152;
  yy_destructor(4,&yymsp[-5].minor);
  yy_destructor(2,&yymsp[-4].minor);
  yy_destructor(3,&yymsp[-2].minor);
  yy_destructor(48,&yymsp[-1].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 4027 "./src/Grammar/grammar.c"
        break;
      case 121:
#line 1036 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-2].minor.yy152;
  yy_destructor(4,&yymsp[-4].minor);
  yy_destructor(2,&yymsp[-3].minor);
  yy_destructor(3,&yymsp[-1].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 4038 "./src/Grammar/grammar.c"
        break;
      case 122:
#line 1041 "./src/Grammar/grammar.y"
{
    optic::object dict;
    optic::store_operations(dict,yymsp[0].minor.yy152,&optic::create_trie,false);

    optic::optic_stack.push_back(dict);
    optic::evaluate_top();
/*    yygotominor.yy152 = optic::mem_copy(optic::optic_stack.back());*/
    yygotominor.yy152 = optic::optic_stack.back();
    optic::optic_stack.pop_back();
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 4057 "./src/Grammar/grammar.c"
        break;
      case 123:
#line 1059 "./src/Grammar/grammar.y"
{
    std::cout << "Namespace" << std::endl;
    store_operations(yygotominor.yy152,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::trie_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(4,&yymsp[-2].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 4072 "./src/Grammar/grammar.c"
        break;
      case 124:
#line 1070 "./src/Grammar/grammar.y"
{
    std::cout << "Namespace" << std::endl;
    store_operations(yygotominor.yy152,yymsp[-3].minor.yy0,yymsp[-1].minor.yy152,&optic::trie_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(4,&yymsp[-2].minor);
  yy_destructor(5,&yymsp[0].minor);
}
#line 4087 "./src/Grammar/grammar.c"
        break;
      case 125:
#line 1081 "./src/Grammar/grammar.y"
{
    std::cout << "Namespace" << std::endl;
    store_operations(yygotominor.yy152,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,optic::trie_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(55,&yymsp[-1].minor);
}
#line 4101 "./src/Grammar/grammar.c"
        break;
      case 126:
      case 127:
#line 1092 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-2].minor.yy152,yymsp[0].minor.yy0,optic::trie_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(55,&yymsp[-1].minor);
}
#line 4115 "./src/Grammar/grammar.c"
        break;
      case 128:
#line 1112 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy152.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy152.type = optic::FUNCTION_ARG_VALUES;
            optic::store_operations(yygotominor.yy152,yymsp[-3].minor.yy152,yymsp[-1].minor.yy152,optic::call_function);
    }
    else
    {
        optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        args.data.array->push_back(yymsp[-1].minor.yy152);
        optic::store_operations(yygotominor.yy152,yymsp[-3].minor.yy152,args,optic::call_function);
    }

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 4140 "./src/Grammar/grammar.c"
        break;
      case 129:
#line 1134 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy152.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy152.type = optic::FUNCTION_ARG_VALUES;
            optic::store_operations(yygotominor.yy152,yymsp[-5].minor.yy152,yymsp[-1].minor.yy152,optic::call_function);
    }
    else
    {
        optic::object temp = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        temp.data.array->push_back(yymsp[-1].minor.yy152);
        optic::store_operations(yygotominor.yy152,yymsp[-5].minor.yy152,temp,optic::call_function);
    }


    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(46,&yymsp[-3].minor);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 4168 "./src/Grammar/grammar.c"
        break;
      case 131:
#line 1164 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-1].minor.yy152;
  yy_destructor(48,&yymsp[0].minor);
}
#line 4176 "./src/Grammar/grammar.c"
        break;
      case 132:
#line 1169 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.type = panopticon::STATEMENT_LIST;
    if(yymsp[-2].minor.yy152.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy152 = optic::mem_alloc(optic::ARRAY);
        yygotominor.yy152.data.array->push_back(yymsp[-2].minor.yy152);
        yygotominor.yy152.data.array->push_back(yymsp[-1].minor.yy152);
    }
    else
    {
        yygotominor.yy152.data.array = yymsp[-2].minor.yy152.data.array;
        yygotominor.yy152.data.array->push_back(yymsp[-1].minor.yy152);
    }
  yy_destructor(48,&yymsp[0].minor);
}
#line 4195 "./src/Grammar/grammar.c"
        break;
      case 133:
      case 138:
#line 1185 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.type = panopticon::STATEMENT_LIST;
    if(yymsp[-1].minor.yy152.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy152 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy152.data.array->push_back(yymsp[-1].minor.yy152);
        yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
    }
    else
    {
        yygotominor.yy152.data.array = yymsp[-1].minor.yy152.data.array;
        yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
    }
}
#line 4214 "./src/Grammar/grammar.c"
        break;
      case 134:
#line 1201 "./src/Grammar/grammar.y"
{
    optic::object list;
    optic::convert_array_to_list(list,yymsp[-2].minor.yy152);
    optic::create_tree(yygotominor.yy152,list);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(2,&yymsp[-3].minor);
  yy_destructor(3,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4227 "./src/Grammar/grammar.c"
        break;
      case 136:
#line 1213 "./src/Grammar/grammar.y"
{
    optic::object list;
    optic::convert_array_to_list(list,yymsp[-1].minor.yy152);
    optic::create_tree(yygotominor.yy152,list);
  yy_destructor(45,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4238 "./src/Grammar/grammar.c"
        break;
      case 140:
#line 1246 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = optic::mem_alloc(optic::STATEMENT_LIST);
}
#line 4245 "./src/Grammar/grammar.c"
        break;
      case 141:
#line 1251 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.type = panopticon::STATEMENT_LIST;
    if(yymsp[0].minor.yy152.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy152 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
    }
    else
    {
        yygotominor.yy152.data.array = yymsp[0].minor.yy152.data.array;
    }
}
#line 4261 "./src/Grammar/grammar.c"
        break;
      case 142:
      case 144:
#line 1269 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[0].minor.yy152;
/*    create_tree(yygotominor.yy152,yymsp[0].minor.yy152);*/
}
#line 4270 "./src/Grammar/grammar.c"
        break;
      case 143:
#line 1275 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[0].minor.yy152;
/*   create_tree(yygotominor.yy152,yymsp[0].minor.yy152);*/
}
#line 4278 "./src/Grammar/grammar.c"
        break;
      case 145:
#line 1291 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy152,yymsp[-1].minor.yy152,&optic::unary_print_object,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(56,&yymsp[-3].minor);
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 4293 "./src/Grammar/grammar.c"
        break;
      case 146:
#line 1301 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-1].minor.yy152;
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 4302 "./src/Grammar/grammar.c"
        break;
      case 147:
#line 1306 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy152.ast = yymsp[0].minor.yy0.ast;
}
#line 4310 "./src/Grammar/grammar.c"
        break;
      case 148:
#line 1312 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::STRING;
    create_tree(yygotominor.yy152,yymsp[0].minor.yy0);
}
#line 4318 "./src/Grammar/grammar.c"
        break;
      case 149:
#line 1319 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::BOOL;
    yygotominor.yy152.ast = yymsp[0].minor.yy0.ast;
}
#line 4326 "./src/Grammar/grammar.c"
        break;
      case 150:
      case 151:
#line 1330 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
}
#line 4335 "./src/Grammar/grammar.c"
        break;
      case 152:
#line 1341 "./src/Grammar/grammar.y"
{
    optic::out() << "Pattern assignment" << std::endl;
    yygotominor.yy152 = yymsp[-3].minor.yy152;
  yy_destructor(1,&yymsp[-1].minor);
}
#line 4344 "./src/Grammar/grammar.c"
        break;
      case 153:
#line 1347 "./src/Grammar/grammar.y"
{
    optic::out() << "Pattern assignment" << std::endl;
    yygotominor.yy152 = yymsp[-3].minor.yy0;
  yy_destructor(1,&yymsp[-1].minor);
}
#line 4353 "./src/Grammar/grammar.c"
        break;
      case 154:
#line 1353 "./src/Grammar/grammar.y"
{
    std::cout << "PATTERN_ARGUMENT" << std::endl;
    yymsp[-3].minor.yy0.type = optic::PATTERN;
    yymsp[-1].minor.yy0.type = optic::PATTERN;
    yygotominor.yy152.type = optic::PATTERN;

  yy_destructor(43,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 4367 "./src/Grammar/grammar.c"
        break;
      case 155:
#line 1362 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy152,yymsp[-2].minor.yy152,yymsp[0].minor.yy152,&optic::prepend,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(17,&yymsp[-1].minor);
}
#line 4380 "./src/Grammar/grammar.c"
        break;
      case 156:
#line 1372 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy152,yymsp[-2].minor.yy152,yymsp[0].minor.yy152,&optic::append,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(18,&yymsp[-1].minor);
}
#line 4393 "./src/Grammar/grammar.c"
        break;
      case 157:
#line 1382 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy152,yymsp[-2].minor.yy152,yymsp[0].minor.yy152,&optic::concat,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(41,&yymsp[-1].minor);
}
#line 4406 "./src/Grammar/grammar.c"
        break;
      case 158:
#line 1392 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Add,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(32,&yymsp[-1].minor);
}
#line 4419 "./src/Grammar/grammar.c"
        break;
      case 159:
#line 1402 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Subtract,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(33,&yymsp[-1].minor);
}
#line 4432 "./src/Grammar/grammar.c"
        break;
      case 160:
#line 1412 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Divide,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(34,&yymsp[-1].minor);
}
#line 4445 "./src/Grammar/grammar.c"
        break;
      case 161:
#line 1422 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Multiply,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(35,&yymsp[-1].minor);
}
#line 4458 "./src/Grammar/grammar.c"
        break;
      case 162:
#line 1432 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Modulus,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(36,&yymsp[-1].minor);
}
#line 4471 "./src/Grammar/grammar.c"
        break;
      case 163:
#line 1442 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Power,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(37,&yymsp[-1].minor);
}
#line 4484 "./src/Grammar/grammar.c"
        break;
      case 164:
#line 1452 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::EqualTo,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(24,&yymsp[-1].minor);
}
#line 4497 "./src/Grammar/grammar.c"
        break;
      case 165:
#line 1462 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::NotEqualTo,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(25,&yymsp[-1].minor);
}
#line 4510 "./src/Grammar/grammar.c"
        break;
      case 166:
#line 1472 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::LessThan,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(28,&yymsp[-1].minor);
}
#line 4523 "./src/Grammar/grammar.c"
        break;
      case 167:
#line 1482 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::GreaterThan,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(26,&yymsp[-1].minor);
}
#line 4536 "./src/Grammar/grammar.c"
        break;
      case 168:
#line 1492 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::LessThanEq,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(29,&yymsp[-1].minor);
}
#line 4549 "./src/Grammar/grammar.c"
        break;
      case 169:
#line 1502 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::GreaterThanEq,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(27,&yymsp[-1].minor);
}
#line 4562 "./src/Grammar/grammar.c"
        break;
      case 170:
#line 1512 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::And,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(21,&yymsp[-1].minor);
}
#line 4575 "./src/Grammar/grammar.c"
        break;
      case 171:
#line 1522 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::Or,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(20,&yymsp[-1].minor);
}
#line 4588 "./src/Grammar/grammar.c"
        break;
      case 172:
#line 1532 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[0].minor.yy152,&optic::bit_not);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(39,&yymsp[-1].minor);
}
#line 4601 "./src/Grammar/grammar.c"
        break;
      case 173:
#line 1542 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-1].minor.yy152,&panopticon::u_minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(43,&yymsp[-3].minor);
  yy_destructor(33,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
}
#line 4616 "./src/Grammar/grammar.c"
        break;
      case 174:
#line 1552 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[0].minor.yy152,&panopticon::not_value);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(38,&yymsp[-1].minor);
}
#line 4629 "./src/Grammar/grammar.c"
        break;
      case 175:
#line 1562 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::ShiftLeft,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(30,&yymsp[-1].minor);
}
#line 4642 "./src/Grammar/grammar.c"
        break;
      case 176:
#line 1572 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::ShiftRight,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(31,&yymsp[-1].minor);
}
#line 4655 "./src/Grammar/grammar.c"
        break;
      case 177:
#line 1582 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::BitAnd,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(23,&yymsp[-1].minor);
}
#line 4668 "./src/Grammar/grammar.c"
        break;
      case 178:
#line 1592 "./src/Grammar/grammar.y"
{
    yygotominor.yy152.ast = new optic::BinaryExprAST(optic::BinaryExprAST::BitXOr,yymsp[-2].minor.yy152.ast,yymsp[0].minor.yy152.ast);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(22,&yymsp[-1].minor);
}
#line 4681 "./src/Grammar/grammar.c"
        break;
      case 179:
      case 181:
      case 197:
#line 1602 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy152,yymsp[-3].minor.yy152,yymsp[-1].minor.yy152,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(45,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4697 "./src/Grammar/grammar.c"
        break;
      case 180:
#line 1612 "./src/Grammar/grammar.y"
{
/*    yymsp[-3].minor.yy0.type = optic::STRING;*/
    optic::store_operations(yygotominor.yy152,yymsp[-3].minor.yy0,yymsp[-1].minor.yy152,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(45,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4712 "./src/Grammar/grammar.c"
        break;
      case 183:
#line 1645 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-4].minor.yy0,yymsp[-1].minor.yy152,optic::slice_beginning_to,false);
  yy_destructor(45,&yymsp[-3].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4722 "./src/Grammar/grammar.c"
        break;
      case 184:
#line 1651 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-4].minor.yy0,yymsp[-2].minor.yy152,optic::slice_to_end,false);
  yy_destructor(45,&yymsp[-3].minor);
  yy_destructor(17,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4732 "./src/Grammar/grammar.c"
        break;
      case 185:
#line 1657 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-5].minor.yy0,range,optic::slice,false);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4745 "./src/Grammar/grammar.c"
        break;
      case 186:
#line 1668 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-4].minor.yy0,yymsp[-1].minor.yy152,optic::slice_all_with_step,false);
  yy_destructor(45,&yymsp[-3].minor);
  yy_destructor(42,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4755 "./src/Grammar/grammar.c"
        break;
      case 187:
#line 1674 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-5].minor.yy0,range,optic::slice_beginning_to_with_step,false);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(42,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4768 "./src/Grammar/grammar.c"
        break;
      case 188:
#line 1683 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-6].minor.yy0,range,optic::slice_to_end_with_step,false);
  yy_destructor(45,&yymsp[-5].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4782 "./src/Grammar/grammar.c"
        break;
      case 189:
#line 1692 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-7].minor.yy0,range,optic::slice_with_step,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4797 "./src/Grammar/grammar.c"
        break;
      case 190:
#line 1703 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-5].minor.yy0,yymsp[-3].minor.yy152,optic::slice_beginning_to_wrapping,false);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4808 "./src/Grammar/grammar.c"
        break;
      case 191:
#line 1709 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-6].minor.yy0,yymsp[-3].minor.yy152,optic::slice_to_end_wrapping,false);
  yy_destructor(45,&yymsp[-5].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4820 "./src/Grammar/grammar.c"
        break;
      case 192:
#line 1715 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-7].minor.yy0,range,optic::slice_with_wrapping,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4835 "./src/Grammar/grammar.c"
        break;
      case 193:
#line 1724 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-7].minor.yy0,range,optic::slice_beginning_to_with_step_wrapping,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(42,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4850 "./src/Grammar/grammar.c"
        break;
      case 194:
#line 1733 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-8].minor.yy0,range,optic::slice_to_end_with_step_wrapping,false);
  yy_destructor(45,&yymsp[-7].minor);
  yy_destructor(17,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4866 "./src/Grammar/grammar.c"
        break;
      case 195:
#line 1742 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-7].minor.yy152);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-9].minor.yy0,range,optic::slice_with_step_wrapping,false);
  yy_destructor(45,&yymsp[-8].minor);
  yy_destructor(17,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4883 "./src/Grammar/grammar.c"
        break;
      case 196:
#line 1752 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-6].minor.yy0,yymsp[-3].minor.yy152,optic::slice_all_with_step,false);
  yy_destructor(45,&yymsp[-5].minor);
  yy_destructor(42,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4895 "./src/Grammar/grammar.c"
        break;
      case 198:
      case 212:
      case 226:
#line 1773 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-4].minor.yy152,yymsp[-1].minor.yy152,optic::slice_beginning_to,false);
  yy_destructor(45,&yymsp[-3].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4907 "./src/Grammar/grammar.c"
        break;
      case 199:
      case 213:
      case 227:
#line 1779 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-4].minor.yy152,yymsp[-2].minor.yy152,optic::slice_to_end,false);
  yy_destructor(45,&yymsp[-3].minor);
  yy_destructor(17,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4919 "./src/Grammar/grammar.c"
        break;
      case 200:
      case 214:
      case 228:
#line 1785 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-5].minor.yy152,range,optic::slice,false);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4934 "./src/Grammar/grammar.c"
        break;
      case 201:
      case 215:
      case 229:
#line 1796 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-4].minor.yy152,yymsp[-1].minor.yy152,optic::slice_all_with_step,false);
  yy_destructor(45,&yymsp[-3].minor);
  yy_destructor(42,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4946 "./src/Grammar/grammar.c"
        break;
      case 202:
      case 216:
      case 230:
#line 1802 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-5].minor.yy152,range,optic::slice_beginning_to_with_step,false);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(42,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4961 "./src/Grammar/grammar.c"
        break;
      case 203:
      case 217:
      case 231:
#line 1811 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-6].minor.yy152,range,optic::slice_to_end_with_step,false);
  yy_destructor(45,&yymsp[-5].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4977 "./src/Grammar/grammar.c"
        break;
      case 204:
      case 218:
      case 232:
#line 1820 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    range.data.array->push_back(yymsp[-1].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-7].minor.yy152,range,optic::slice_with_step,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 4994 "./src/Grammar/grammar.c"
        break;
      case 205:
      case 219:
      case 233:
#line 1831 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-5].minor.yy152,yymsp[-3].minor.yy152,optic::slice_beginning_to_wrapping,false);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5007 "./src/Grammar/grammar.c"
        break;
      case 206:
      case 220:
      case 234:
#line 1837 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-6].minor.yy152,yymsp[-3].minor.yy152,optic::slice_to_end_wrapping,false);
  yy_destructor(45,&yymsp[-5].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5021 "./src/Grammar/grammar.c"
        break;
      case 207:
      case 221:
      case 235:
#line 1843 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-7].minor.yy152,range,optic::slice_with_wrapping,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5038 "./src/Grammar/grammar.c"
        break;
      case 208:
      case 222:
      case 236:
#line 1852 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-7].minor.yy152,range,optic::slice_beginning_to_with_step_wrapping,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(42,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5055 "./src/Grammar/grammar.c"
        break;
      case 209:
      case 223:
      case 237:
#line 1861 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-8].minor.yy152,range,optic::slice_to_end_with_step_wrapping,false);
  yy_destructor(45,&yymsp[-7].minor);
  yy_destructor(17,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5073 "./src/Grammar/grammar.c"
        break;
      case 210:
      case 224:
      case 238:
#line 1870 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-7].minor.yy152);
    range.data.array->push_back(yymsp[-5].minor.yy152);
    range.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,yymsp[-9].minor.yy152,range,optic::slice_with_step_wrapping,false);
  yy_destructor(45,&yymsp[-8].minor);
  yy_destructor(17,&yymsp[-6].minor);
  yy_destructor(17,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5092 "./src/Grammar/grammar.c"
        break;
      case 211:
      case 225:
      case 239:
#line 1880 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-6].minor.yy152,yymsp[-3].minor.yy152,optic::slice_all_with_step,false);
  yy_destructor(45,&yymsp[-5].minor);
  yy_destructor(42,&yymsp[-4].minor);
  yy_destructor(17,&yymsp[-2].minor);
  yy_destructor(36,&yymsp[-1].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5106 "./src/Grammar/grammar.c"
        break;
      case 240:
#line 2121 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy152,yymsp[-3].minor.yy152,yymsp[-1].minor.yy152,optic::range_from_to);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(60,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5116 "./src/Grammar/grammar.c"
        break;
      case 241:
#line 2126 "./src/Grammar/grammar.y"
{
    optic::object start_step = optic::mem_alloc(optic::ARRAY);
    start_step.data.array->push_back(yymsp[-5].minor.yy152);
    start_step.data.array->push_back(yymsp[-3].minor.yy152);
    store_operations(yygotominor.yy152,start_step,yymsp[-1].minor.yy152,optic::range_from_step_to,false);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(11,&yymsp[-4].minor);
  yy_destructor(60,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5130 "./src/Grammar/grammar.c"
        break;
      case 242:
#line 2138 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-4].minor.yy0;
    yygotominor.yy152 = yymsp[-2].minor.yy0;
    yygotominor.yy152 = yymsp[0].minor.yy0;
  yy_destructor(42,&yymsp[-3].minor);
  yy_destructor(61,&yymsp[-1].minor);
}
#line 5141 "./src/Grammar/grammar.c"
        break;
      case 243:
#line 2145 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-2].minor.yy0;
    yygotominor.yy152 = yymsp[0].minor.yy0;
  yy_destructor(42,&yymsp[-1].minor);
}
#line 5150 "./src/Grammar/grammar.c"
        break;
      case 244:
#line 2151 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-6].minor.yy0;
    yygotominor.yy152 = yymsp[-3].minor.yy0;
    yygotominor.yy152 = yymsp[0].minor.yy0;
  yy_destructor(42,&yymsp[-5].minor);
  yy_destructor(45,&yymsp[-4].minor);
  yy_destructor(46,&yymsp[-2].minor);
  yy_destructor(61,&yymsp[-1].minor);
}
#line 5163 "./src/Grammar/grammar.c"
        break;
      case 245:
#line 2158 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-8].minor.yy0;
    yygotominor.yy152 = yymsp[-5].minor.yy0;
    yygotominor.yy152 = yymsp[-1].minor.yy0;
  yy_destructor(42,&yymsp[-7].minor);
  yy_destructor(45,&yymsp[-6].minor);
  yy_destructor(46,&yymsp[-4].minor);
  yy_destructor(61,&yymsp[-3].minor);
  yy_destructor(45,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5178 "./src/Grammar/grammar.c"
        break;
      case 246:
#line 2165 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-6].minor.yy0;
    yygotominor.yy152 = yymsp[-4].minor.yy0;
    yygotominor.yy152 = yymsp[-1].minor.yy0;
  yy_destructor(42,&yymsp[-5].minor);
  yy_destructor(61,&yymsp[-3].minor);
  yy_destructor(45,&yymsp[-2].minor);
  yy_destructor(46,&yymsp[0].minor);
}
#line 5191 "./src/Grammar/grammar.c"
        break;
      case 247:
#line 2186 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-4].minor.yy0;
    yygotominor.yy152 = yymsp[-2].minor.yy152;
    yygotominor.yy152 = yymsp[0].minor.yy152;
  yy_destructor(42,&yymsp[-3].minor);
  yy_destructor(61,&yymsp[-1].minor);
}
#line 5202 "./src/Grammar/grammar.c"
        break;
      case 248:
#line 2196 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy152.data.array->push_back(yymsp[-2].minor.yy152);
    yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
  yy_destructor(12,&yymsp[-1].minor);
}
#line 5212 "./src/Grammar/grammar.c"
        break;
      case 249:
#line 2203 "./src/Grammar/grammar.y"
{
    yygotominor.yy152 = yymsp[-2].minor.yy152;
    yygotominor.yy152.data.array->push_back(yymsp[0].minor.yy152);
  yy_destructor(12,&yymsp[-1].minor);
}
#line 5221 "./src/Grammar/grammar.c"
        break;
      case 250:
#line 2209 "./src/Grammar/grammar.y"
{
    optic::typing::create_type_def_product(yygotominor.yy152,yymsp[-2].minor.yy0,yymsp[0].minor.yy152);
  yy_destructor(62,&yymsp[-3].minor);
  yy_destructor(1,&yymsp[-1].minor);
}
#line 5230 "./src/Grammar/grammar.c"
        break;
      case 251:
#line 2214 "./src/Grammar/grammar.y"
{
    optic::typing::create_type_def_sum(yygotominor.yy152,yymsp[-2].minor.yy0,yymsp[0].minor.yy152);
  yy_destructor(62,&yymsp[-3].minor);
  yy_destructor(1,&yymsp[-1].minor);
}
#line 5239 "./src/Grammar/grammar.c"
        break;
      case 252:
#line 2224 "./src/Grammar/grammar.y"
{
    switch(yymsp[0].minor.yy203)
    {
    case panopticon::OpenQuoteError:
/*        panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;*/
        break;
    default:
/*        panopticon::out() << "ERROR p0000: UnknownError" << std::endl;*/
        break;
    }
}
#line 5254 "./src/Grammar/grammar.c"
        break;
      case 253:
#line 2237 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy203 = panopticon::OpenQuoteError;
    panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;
}
#line 5263 "./src/Grammar/grammar.c"
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = yyact;
      yymsp->major = yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else if( yyact == YYNSTATE + YYNRULE + 1 ){
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 93 "./src/Grammar/grammar.y"

panopticon::out() << "Syntax error!" << std::endl;
#line 5324 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 88 "./src/Grammar/grammar.y"

printf("parsing complete!\n\n\n");
#line 5347 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
    /* if( yymajor==0 ) return; // not sure why this was here... */
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      if( yyendofinput && yypParser->yyidx>=0 ){
        yymajor = 0;
      }else{
        yymajor = YYNOCODE;
      }
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else if( yyact == YY_ERROR_ACTION ){
      int yymx;
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }else{
      yy_accept(yypParser);
      yymajor = YYNOCODE;
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
