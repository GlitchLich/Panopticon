/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 3 "./src/Grammar/grammar.y"

#include <iostream>
#include "../../include/Grammar/tokens.h"
#include "../../include/Grammar/grammar.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
/*#include "lexglobal.h"*/
#include <assert.h>
#include <math.h>
#define BUFS 1024
#include <stdio.h>
#include <string.h>
#include "core/operators.h"
#include "../../include/Grammar/parsingutilities.h"
#include "../../include/core/types.h"
#include "../../include/Grammar/parse.h"
#include "../../include/core/errors.h"
#include "../../include/core/heap.h"
#include "include/core/stack.h"
#include "core/Memory.h"

#undef STRING
#undef NUM
#undef BOOL
#undef panopticon::ARRAY

/*using namespace panopticon;*/

    void token_destructor(Token t)
    {
        std::cout << "token_destructor()" << std::endl;
        //TO DO: Do we need to free the tokens or not? I don't think so...
/*        mem_free(t);*/
    }
#line 46 "./src/Grammar/grammar.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 95
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy189;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 286
#define YYNRULE 129
#define YYERRORSYMBOL 58
#define YYERRSYMDT yy189
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (3240)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    89,  243,   73,  174,    6,  197,   18,  142,  284,  196,
 /*    10 */     9,   80,  189,   70,   69,  278,   54,   55,   50,   51,
 /*    20 */    61,   60,   58,   56,   59,   57,   53,   52,   67,   66,
 /*    30 */    65,   64,   63,   62,   45,   46,  154,   68,    5,   28,
 /*    40 */    40,    2,  186,  245,   83,   90,  246,  157,  241,  143,
 /*    50 */   195,  261,  260,  259,   67,   66,   65,   64,   63,   62,
 /*    60 */   139,   43,  198,   68,   80,   72,   70,   69,   77,   54,
 /*    70 */    55,   50,   51,   61,   60,   58,   56,   59,   57,   53,
 /*    80 */    52,   67,   66,   65,   64,   63,   62,   62,  120,  185,
 /*    90 */    68,   68,  200,  199,  282,  281,  280,  279,   79,  155,
 /*   100 */    71,  156,  210,  162,  205,   34,  171,   48,  275,  283,
 /*   110 */   272,  265,  141,  216,  145,  268,  267,   49,  266,  264,
 /*   120 */   273,   80,  258,   19,   69,  275,   54,   55,   50,   51,
 /*   130 */    61,   60,   58,   56,   59,   57,   53,   52,   67,   66,
 /*   140 */    65,   64,   63,   62,  208,  167,   75,   68,   39,  144,
 /*   150 */    47,  187,  230,  273,   80,  273,   70,   69,  165,   54,
 /*   160 */    55,   50,   51,   61,   60,   58,   56,   59,   57,   53,
 /*   170 */    52,   67,   66,   65,   64,   63,   62,   41,  207,  173,
 /*   180 */    68,   40,  271,  174,    6,  275,   18,   88,   80,  191,
 /*   190 */    70,   69,  253,   54,   55,   50,   51,   61,   60,   58,
 /*   200 */    56,   59,   57,   53,   52,   67,   66,   65,   64,   63,
 /*   210 */    62,  255,  174,    6,   68,   21,  254,   80,  172,   70,
 /*   220 */    69,   87,   54,   55,   50,   51,   61,   60,   58,   56,
 /*   230 */    59,   57,   53,   52,   67,   66,   65,   64,   63,   62,
 /*   240 */   168,  212,  252,   68,  188,   76,   80,    8,   70,   69,
 /*   250 */   274,   54,   55,   50,   51,   61,   60,   58,   56,   59,
 /*   260 */    57,   53,   52,   67,   66,   65,   64,   63,   62,  244,
 /*   270 */   242,  236,   68,   80,  172,   70,   69,  269,   54,   55,
 /*   280 */    50,   51,   61,   60,   58,   56,   59,   57,   53,   52,
 /*   290 */    67,   66,   65,   64,   63,   62,  163,  212,   80,   68,
 /*   300 */    70,   69,  263,   54,   55,   50,   51,   61,   60,   58,
 /*   310 */    56,   59,   57,   53,   52,   67,   66,   65,   64,   63,
 /*   320 */    62,  234,  231,   80,   68,   70,   69,  262,   54,   55,
 /*   330 */    50,   51,   61,   60,   58,   56,   59,   57,   53,   52,
 /*   340 */    67,   66,   65,   64,   63,   62,  229,  176,   80,   68,
 /*   350 */    70,   69,  257,   54,   55,   50,   51,   61,   60,   58,
 /*   360 */    56,   59,   57,   53,   52,   67,   66,   65,   64,   63,
 /*   370 */    62,    7,  226,  224,   68,   50,   51,   61,   60,   58,
 /*   380 */    56,   59,   57,   53,   52,   67,   66,   65,   64,   63,
 /*   390 */    62,   42,  260,  222,   68,   53,   52,   67,   66,   65,
 /*   400 */    64,   63,   62,  214,  220,   80,   68,   70,   69,  273,
 /*   410 */    54,   55,   50,   51,   61,   60,   58,   56,   59,   57,
 /*   420 */    53,   52,   67,   66,   65,   64,   63,   62,  219,  248,
 /*   430 */   218,   68,   80,  273,   70,   69,  256,   54,   55,   50,
 /*   440 */    51,   61,   60,   58,   56,   59,   57,   53,   52,   67,
 /*   450 */    66,   65,   64,   63,   62,  239,  202,   36,   68,  416,
 /*   460 */     1,   80,  275,   70,   69,  247,   54,   55,   50,   51,
 /*   470 */    61,   60,   58,   56,   59,   57,   53,   52,   67,   66,
 /*   480 */    65,   64,   63,   62,   74,  240,  213,   68,   80,  273,
 /*   490 */    25,   69,  238,   54,   55,   50,   51,   61,   60,   58,
 /*   500 */    56,   59,   57,   53,   52,   67,   66,   65,   64,   63,
 /*   510 */    62,   33,  166,  165,   68,   80,  164,   24,   69,  228,
 /*   520 */    54,   55,   50,   51,   61,   60,   58,   56,   59,   57,
 /*   530 */    53,   52,   67,   66,   65,   64,   63,   62,  211,   32,
 /*   540 */   209,   68,   80,   20,   22,   69,  223,   54,   55,   50,
 /*   550 */    51,   61,   60,   58,   56,   59,   57,   53,   52,   67,
 /*   560 */    66,   65,   64,   63,   62,   30,  206,  203,   68,   80,
 /*   570 */   146,   70,   69,  221,   54,   55,   50,   51,   61,   60,
 /*   580 */    58,   56,   59,   57,   53,   52,   67,   66,   65,   64,
 /*   590 */    63,   62,  169,  273,  170,   68,   80,  161,   70,   69,
 /*   600 */   217,   54,   55,   50,   51,   61,   60,   58,   56,   59,
 /*   610 */    57,   53,   52,   67,   66,   65,   64,   63,   62,   35,
 /*   620 */   159,  149,   68,   65,   64,   63,   62,  230,  175,  140,
 /*   630 */    68,   80,  201,   70,   69,  417,   54,   55,   50,   51,
 /*   640 */    61,   60,   58,   56,   59,   57,   53,   52,   67,   66,
 /*   650 */    65,   64,   63,   62,  417,  417,   80,   68,   70,   69,
 /*   660 */   417,   54,   55,   50,   51,   61,   60,   58,   56,   59,
 /*   670 */    57,   53,   52,   67,   66,   65,   64,   63,   62,   31,
 /*   680 */   417,  417,   68,  417,  417,  417,  417,  417,  417,  215,
 /*   690 */   417,   80,  417,   70,   69,  417,   54,   55,   50,   51,
 /*   700 */    61,   60,   58,   56,   59,   57,   53,   52,   67,   66,
 /*   710 */    65,   64,   63,   62,  417,  417,   80,   68,   70,   69,
 /*   720 */   417,   54,   55,   50,   51,   61,   60,   58,   56,   59,
 /*   730 */    57,   53,   52,   67,   66,   65,   64,   63,   62,  417,
 /*   740 */   417,  417,   68,  417,  417,  417,  417,  417,   80,  417,
 /*   750 */    70,   69,  204,   54,   55,   50,   51,   61,   60,   58,
 /*   760 */    56,   59,   57,   53,   52,   67,   66,   65,   64,   63,
 /*   770 */    62,  417,   27,   69,   68,   54,   55,   50,   51,   61,
 /*   780 */    60,   58,   56,   59,   57,   53,   52,   67,   66,   65,
 /*   790 */    64,   63,   62,  417,  417,  417,   68,  417,  417,   26,
 /*   800 */    69,  233,   54,   55,   50,   51,   61,   60,   58,   56,
 /*   810 */    59,   57,   53,   52,   67,   66,   65,   64,   63,   62,
 /*   820 */   417,  417,  417,   68,  417,  417,   23,   69,  235,   54,
 /*   830 */    55,   50,   51,   61,   60,   58,   56,   59,   57,   53,
 /*   840 */    52,   67,   66,   65,   64,   63,   62,  417,  417,  417,
 /*   850 */    68,  417,  417,   70,   69,  225,   54,   55,   50,   51,
 /*   860 */    61,   60,   58,   56,   59,   57,   53,   52,   67,   66,
 /*   870 */    65,   64,   63,   62,  417,  417,  417,   68,   54,   55,
 /*   880 */    50,   51,   61,   60,   58,   56,   59,   57,   53,   52,
 /*   890 */    67,   66,   65,   64,   63,   62,  417,  417,  417,   68,
 /*   900 */    55,   50,   51,   61,   60,   58,   56,   59,   57,   53,
 /*   910 */    52,   67,   66,   65,   64,   63,   62,  417,  417,  417,
 /*   920 */    68,   51,   61,   60,   58,   56,   59,   57,   53,   52,
 /*   930 */    67,   66,   65,   64,   63,   62,  417,  417,  417,   68,
 /*   940 */   417,  417,  417,   61,   60,   58,   56,   59,   57,   53,
 /*   950 */    52,   67,   66,   65,   64,   63,   62,  286,  417,  417,
 /*   960 */    68,   73,  417,  417,  197,  417,   78,  417,   58,   56,
 /*   970 */    59,   57,   53,   52,   67,   66,   65,   64,   63,   62,
 /*   980 */   417,  297,  297,   68,   82,  417,  417,  417,  417,  297,
 /*   990 */   417,  417,  417,   45,   46,  417,  417,  417,   28,  417,
 /*  1000 */     2,  417,  417,  285,  417,   29,  417,  158,  417,  195,
 /*  1010 */   261,  260,  259,  417,   73,  417,  417,  197,  417,  142,
 /*  1020 */   174,    4,  154,   18,  417,   38,  417,  154,  417,  245,
 /*  1030 */    85,   90,  246,  417,  245,   84,   90,  246,  417,  417,
 /*  1040 */   417,  417,  417,  417,  417,  417,   45,   46,  417,  417,
 /*  1050 */    37,   28,  417,    2,  180,  417,  417,  417,  120,  417,
 /*  1060 */   417,  417,  195,  261,  260,  259,  417,  194,  417,  155,
 /*  1070 */   417,  156,   73,  417,  417,  197,  417,  142,  417,  417,
 /*  1080 */   272,  265,  141,   16,  192,  268,  267,  154,  266,  264,
 /*  1090 */   417,  154,  258,  417,  245,   81,   90,  246,  245,   86,
 /*  1100 */    90,  246,  182,  417,   45,   46,   94,  417,  417,   28,
 /*  1110 */   417,    2,  232,  417,  417,  251,  417,  155,   15,  156,
 /*  1120 */   195,  261,  260,  259,  417,  417,  417,  417,  272,  265,
 /*  1130 */   141,  417,  120,  268,  267,  190,  266,  264,  417,  417,
 /*  1140 */   258,  251,  417,  155,   12,  156,  417,  417,  417,  417,
 /*  1150 */   417,  417,  417,  417,  272,  265,  141,  417,  417,  268,
 /*  1160 */   267,  417,  266,  264,  120,  417,  258,  417,  417,  417,
 /*  1170 */   417,  417,  417,  251,  417,  155,   11,  156,  417,  417,
 /*  1180 */   417,  417,  417,  417,  417,  417,  272,  265,  141,  417,
 /*  1190 */   120,  268,  267,  417,  266,  264,  417,  417,  258,  251,
 /*  1200 */   417,  155,   10,  156,  417,  417,  417,  417,  417,  417,
 /*  1210 */   417,  417,  272,  265,  141,  417,  120,  268,  267,  417,
 /*  1220 */   266,  264,  417,  417,  258,  251,  417,  155,   14,  156,
 /*  1230 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  1240 */   141,  417,  417,  268,  267,  417,  266,  264,  120,  417,
 /*  1250 */   258,  417,  417,   73,  417,  417,  197,  251,  142,  155,
 /*  1260 */    13,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1270 */   272,  265,  141,  417,  417,  268,  267,  417,  266,  264,
 /*  1280 */    44,  417,  258,  417,   73,   45,   46,  197,  417,  142,
 /*  1290 */    28,  417,    2,  417,  417,  417,  417,  417,  417,  417,
 /*  1300 */   417,  195,  261,  260,  259,  417,   73,  417,  417,  197,
 /*  1310 */   417,  142,  417,  417,  183,  417,   45,   46,  417,  417,
 /*  1320 */   417,   28,  417,    2,  417,  417,  417,  417,  417,  417,
 /*  1330 */   417,  417,  195,  261,  260,  259,  184,   73,   45,   46,
 /*  1340 */   197,  417,  142,   28,  417,    2,  417,  417,  417,  417,
 /*  1350 */   417,  417,  417,  417,  195,  261,  260,  259,  417,   73,
 /*  1360 */   417,  417,  197,  417,  142,  417,  417,  181,  417,   45,
 /*  1370 */    46,  417,  417,  417,   28,  417,    2,  417,  417,  417,
 /*  1380 */   417,  417,  417,  417,  417,  195,  261,  260,  259,  178,
 /*  1390 */    73,   45,   46,  197,  417,  142,   28,  417,    2,  417,
 /*  1400 */   417,  417,  417,  417,  417,  417,  417,  195,  261,  260,
 /*  1410 */   259,  417,   73,  417,  417,  197,  417,  142,  417,  417,
 /*  1420 */   179,  417,   45,   46,  417,  417,  417,   28,  417,    2,
 /*  1430 */   417,  417,   73,  417,  417,  197,  417,  142,  195,  261,
 /*  1440 */   260,  259,  177,  417,   45,   46,  417,  417,  417,   28,
 /*  1450 */   417,    2,  417,  417,   73,  417,  417,  197,  417,  142,
 /*  1460 */   195,  261,  260,  259,   45,   46,  417,  417,  417,   28,
 /*  1470 */   417,    2,  180,  417,  417,  417,  417,  417,  417,  417,
 /*  1480 */   195,  261,  260,  259,  417,  417,   45,   46,  417,  417,
 /*  1490 */   417,   28,  417,    2,  417,  417,  417,  160,  120,  417,
 /*  1500 */   417,  417,  195,  261,  260,  259,  417,  193,  417,  155,
 /*  1510 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1520 */   272,  265,  141,  417,  120,  268,  267,  417,  266,  264,
 /*  1530 */   417,   73,  258,  250,  197,  155,  142,  156,  417,   73,
 /*  1540 */   417,  417,  197,  417,  142,  417,  272,  265,  141,  417,
 /*  1550 */   417,  268,  267,  417,  266,  264,  417,  417,  258,  417,
 /*  1560 */   417,  417,  417,   45,   46,  417,  417,  417,   28,  277,
 /*  1570 */     2,   45,   46,  417,  417,  417,   28,  276,    2,  195,
 /*  1580 */   261,  260,  259,  417,  417,  100,  417,  195,  261,  260,
 /*  1590 */   259,  417,   73,  417,  417,  197,  155,  142,  156,  417,
 /*  1600 */    73,  417,  417,  197,  417,  142,  417,  272,  265,  141,
 /*  1610 */   417,  417,  268,  267,  417,  266,  264,  417,  417,  258,
 /*  1620 */   417,  417,  417,  417,   45,   46,  417,  417,  417,   28,
 /*  1630 */   270,    2,   45,   46,  417,  417,  417,   28,  249,    2,
 /*  1640 */   195,  261,  260,  259,  417,  417,  417,  417,  195,  261,
 /*  1650 */   260,  259,  417,   73,  417,  417,  197,  417,  142,  417,
 /*  1660 */   417,   73,  417,  417,  197,  417,  142,  417,  417,  417,
 /*  1670 */   417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1680 */   417,  417,  417,  417,  417,   45,   46,  417,  417,  417,
 /*  1690 */    28,  227,    2,   45,   46,  417,  417,  417,   28,  237,
 /*  1700 */     2,  195,  261,  260,  259,  417,  417,  417,  417,  195,
 /*  1710 */   261,  260,  259,  417,   73,  417,  417,  197,  417,  142,
 /*  1720 */   417,  417,   73,  417,  417,  197,  417,  138,  417,  417,
 /*  1730 */   417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1740 */   417,  417,  417,  417,  417,  417,   45,   46,  417,  417,
 /*  1750 */   417,   28,  239,    2,   45,   46,  417,  417,  417,   28,
 /*  1760 */   237,    2,  195,  261,  260,  259,  417,  417,  417,  417,
 /*  1770 */   195,  261,  260,  259,    3,  417,   73,  417,  417,  197,
 /*  1780 */   417,  142,  417,  417,   73,  417,  417,  197,  417,  142,
 /*  1790 */   417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1800 */   417,  417,  417,  417,  417,  417,  417,  417,   45,   46,
 /*  1810 */   417,  417,  417,   28,  417,    2,   45,   46,  417,  417,
 /*  1820 */   417,   28,  417,    2,  195,  261,  260,  259,  417,  417,
 /*  1830 */   112,  417,  195,  261,  260,  259,  417,  417,  417,  417,
 /*  1840 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  1850 */   417,  417,  272,  265,  141,  417,  417,  268,  267,  417,
 /*  1860 */   266,  264,  417,  417,  258,  417,  417,  417,  121,  417,
 /*  1870 */   417,  417,  417,  417,  417,  417,  417,  417,  417,  155,
 /*  1880 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1890 */   272,  265,  141,  123,  417,  268,  267,  417,  266,  264,
 /*  1900 */   417,  417,  258,  417,  155,  417,  156,  417,  417,  417,
 /*  1910 */   417,  417,  417,  417,  417,  272,  265,  141,  122,  417,
 /*  1920 */   268,  267,  417,  266,  264,  417,  417,  258,  417,  155,
 /*  1930 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1940 */   272,  265,  141,  417,  417,  268,  267,  417,  266,  264,
 /*  1950 */   137,  417,  258,  417,  417,  417,  417,  417,  417,  417,
 /*  1960 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  1970 */   417,  417,  272,  265,  141,  136,  417,  268,  267,  417,
 /*  1980 */   266,  264,  417,  417,  258,  417,  155,  417,  156,  417,
 /*  1990 */   417,  417,  417,  417,  417,  417,  417,  272,  265,  141,
 /*  2000 */   153,  417,  268,  267,  417,  266,  264,  417,  417,  258,
 /*  2010 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  2020 */   417,  417,  272,  265,  141,  417,  417,  268,  267,  417,
 /*  2030 */   266,  264,  152,  417,  258,  417,  417,  417,  417,  417,
 /*  2040 */   417,  417,  417,  155,  417,  156,  417,  417,  417,  417,
 /*  2050 */   417,  417,  417,  417,  272,  265,  141,  151,  417,  268,
 /*  2060 */   267,  417,  266,  264,  417,  417,  258,  417,  155,  417,
 /*  2070 */   156,  417,  417,  417,  417,  417,  417,  417,  417,  272,
 /*  2080 */   265,  141,  150,  417,  268,  267,  417,  266,  264,  417,
 /*  2090 */   417,  258,  417,  155,  417,  156,  417,  417,  417,  417,
 /*  2100 */   417,  417,  417,  417,  272,  265,  141,  417,  417,  268,
 /*  2110 */   267,  417,  266,  264,  129,  417,  258,  417,  417,  417,
 /*  2120 */   417,  417,  417,  417,  417,  155,  417,  156,  417,  417,
 /*  2130 */   417,  417,  417,  417,  417,  417,  272,  265,  141,  128,
 /*  2140 */   417,  268,  267,  417,  266,  264,  417,  417,  258,  417,
 /*  2150 */   155,  417,  156,  417,  417,  417,  417,  417,  417,  417,
 /*  2160 */   417,  272,  265,  141,  133,  417,  268,  267,  417,  266,
 /*  2170 */   264,  417,  417,  258,  417,  155,  417,  156,  417,  417,
 /*  2180 */   417,  417,  417,  417,  417,  417,  272,  265,  141,  417,
 /*  2190 */   417,  268,  267,  417,  266,  264,  132,  417,  258,  417,
 /*  2200 */   417,  417,  417,  417,  417,  417,  417,  155,  417,  156,
 /*  2210 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  2220 */   141,  131,  417,  268,  267,  417,  266,  264,  417,  417,
 /*  2230 */   258,  417,  155,  417,  156,  417,  417,  417,  417,  417,
 /*  2240 */   417,  417,  417,  272,  265,  141,  130,  417,  268,  267,
 /*  2250 */   417,  266,  264,  417,  417,  258,  417,  155,  417,  156,
 /*  2260 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  2270 */   141,  417,  417,  268,  267,  417,  266,  264,  125,  417,
 /*  2280 */   258,  417,  417,  417,  417,  417,  417,  417,  417,  155,
 /*  2290 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  2300 */   272,  265,  141,  124,  417,  268,  267,  417,  266,  264,
 /*  2310 */   417,  417,  258,  417,  155,  417,  156,  417,  417,  417,
 /*  2320 */   417,  417,  417,  417,  417,  272,  265,  141,  135,  417,
 /*  2330 */   268,  267,  417,  266,  264,  417,  417,  258,  417,  155,
 /*  2340 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  2350 */   272,  265,  141,  417,  417,  268,  267,  417,  266,  264,
 /*  2360 */   134,  417,  258,  417,  417,  417,  417,  417,  417,  417,
 /*  2370 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  2380 */   417,  417,  272,  265,  141,  127,  417,  268,  267,  417,
 /*  2390 */   266,  264,  417,  417,  258,  417,  155,  417,  156,  417,
 /*  2400 */   417,  417,  417,  417,  417,  417,  417,  272,  265,  141,
 /*  2410 */   126,  417,  268,  267,  417,  266,  264,  417,  417,  258,
 /*  2420 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  2430 */   417,  417,  272,  265,  141,  417,  417,  268,  267,  417,
 /*  2440 */   266,  264,  119,  417,  258,  417,  417,  417,  417,  417,
 /*  2450 */   417,  417,  417,  155,  417,  156,  417,  417,  417,  417,
 /*  2460 */   417,  417,  417,  417,  272,  265,  141,  111,  417,  268,
 /*  2470 */   267,  417,  266,  264,  417,  417,  258,  417,  155,  417,
 /*  2480 */   156,  417,  417,  417,  417,  417,  417,  417,  417,  272,
 /*  2490 */   265,  141,  110,  417,  268,  267,  417,  266,  264,  417,
 /*  2500 */   417,  258,  417,  155,  417,  156,  417,  417,  417,  417,
 /*  2510 */   417,  417,  417,  417,  272,  265,  141,  417,  417,  268,
 /*  2520 */   267,  417,  266,  264,  148,  417,  258,  417,  417,  417,
 /*  2530 */   417,  417,  417,  417,  417,  155,  417,  156,  417,  417,
 /*  2540 */   417,  417,  417,  417,  417,  417,  272,  265,  141,  147,
 /*  2550 */   417,  268,  267,  417,  266,  264,  417,  417,  258,  417,
 /*  2560 */   155,  417,  156,  417,  417,  417,  417,  417,  417,  417,
 /*  2570 */   417,  272,  265,  141,  108,  417,  268,  267,  417,  266,
 /*  2580 */   264,  417,  417,  258,  417,  155,  417,  156,  417,  417,
 /*  2590 */   417,  417,  417,  417,  417,  417,  272,  265,  141,  417,
 /*  2600 */   417,  268,  267,  417,  266,  264,  107,  417,  258,  417,
 /*  2610 */   417,  417,  417,  417,  417,  417,  417,  155,  417,  156,
 /*  2620 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  2630 */   141,  106,  417,  268,  267,  417,  266,  264,  417,  417,
 /*  2640 */   258,  417,  155,  417,  156,  417,  417,  417,  417,  417,
 /*  2650 */   417,  417,  417,  272,  265,  141,  105,  417,  268,  267,
 /*  2660 */   417,  266,  264,  417,  417,  258,  417,  155,  417,  156,
 /*  2670 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  2680 */   141,  417,  417,  268,  267,  417,  266,  264,  104,  417,
 /*  2690 */   258,  417,  417,  417,  417,  417,  417,  417,  417,  155,
 /*  2700 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  2710 */   272,  265,  141,  103,  417,  268,  267,  417,  266,  264,
 /*  2720 */   417,  417,  258,  417,  155,  417,  156,  417,  417,  417,
 /*  2730 */   417,  417,  417,  417,  417,  272,  265,  141,  102,  417,
 /*  2740 */   268,  267,  417,  266,  264,  417,  417,  258,  417,  155,
 /*  2750 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  2760 */   272,  265,  141,  417,  417,  268,  267,  417,  266,  264,
 /*  2770 */   101,  417,  258,  417,  417,  417,  417,  417,  417,  417,
 /*  2780 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  2790 */   417,  417,  272,  265,  141,   98,  417,  268,  267,  417,
 /*  2800 */   266,  264,  417,  417,  258,  417,  155,  417,  156,  417,
 /*  2810 */   417,  417,  417,  417,  417,  417,  417,  272,  265,  141,
 /*  2820 */    97,  417,  268,  267,  417,  266,  264,  417,  417,  258,
 /*  2830 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  2840 */   417,  417,  272,  265,  141,  417,  417,  268,  267,  417,
 /*  2850 */   266,  264,   17,  417,  258,  417,  417,  417,  417,  417,
 /*  2860 */   417,  417,  417,  155,  417,  156,  417,  417,  417,  417,
 /*  2870 */   417,  417,  417,  417,  272,  265,  141,  114,  417,  268,
 /*  2880 */   267,  417,  266,  264,  417,  417,  258,  417,  155,  417,
 /*  2890 */   156,  417,  417,  417,  417,  417,  417,  417,  417,  272,
 /*  2900 */   265,  141,  113,  417,  268,  267,  417,  266,  264,  417,
 /*  2910 */   417,  258,  417,  155,  417,  156,  417,  417,  417,  417,
 /*  2920 */   417,  417,  417,  417,  272,  265,  141,  417,  417,  268,
 /*  2930 */   267,  417,  266,  264,   92,  417,  258,  417,  417,  417,
 /*  2940 */   417,  417,  417,  417,  417,  155,  417,  156,  417,  417,
 /*  2950 */   417,  417,  417,  417,  417,  417,  272,  265,  141,   91,
 /*  2960 */   417,  268,  267,  417,  266,  264,  417,  417,  258,  417,
 /*  2970 */   155,  417,  156,  417,  417,  417,  417,  417,  417,  417,
 /*  2980 */   417,  272,  265,  141,   95,  417,  268,  267,  417,  266,
 /*  2990 */   264,  417,  417,  258,  417,  155,  417,  156,  417,  417,
 /*  3000 */   417,  417,  417,  417,  417,  417,  272,  265,  141,  417,
 /*  3010 */   417,  268,  267,  417,  266,  264,  109,  417,  258,  417,
 /*  3020 */   417,  417,  417,  417,  417,  417,  417,  155,  417,  156,
 /*  3030 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  3040 */   141,  117,  417,  268,  267,  417,  266,  264,  417,  417,
 /*  3050 */   258,  417,  155,  417,  156,  417,  417,  417,  417,  417,
 /*  3060 */   417,  417,  417,  272,  265,  141,  116,  417,  268,  267,
 /*  3070 */   417,  266,  264,  417,  417,  258,  417,  155,  417,  156,
 /*  3080 */   417,  417,  417,  417,  417,  417,  417,  417,  272,  265,
 /*  3090 */   141,  417,  417,  268,  267,  417,  266,  264,   99,  417,
 /*  3100 */   258,  417,  417,  417,  417,  417,  417,  417,  417,  155,
 /*  3110 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  3120 */   272,  265,  141,   96,  417,  268,  267,  417,  266,  264,
 /*  3130 */   417,  417,  258,  417,  155,  417,  156,  417,  417,  417,
 /*  3140 */   417,  417,  417,  417,  417,  272,  265,  141,  118,  417,
 /*  3150 */   268,  267,  417,  266,  264,  417,  417,  258,  417,  155,
 /*  3160 */   417,  156,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  3170 */   272,  265,  141,  417,  417,  268,  267,  417,  266,  264,
 /*  3180 */    93,  417,  258,  417,  417,  417,  417,  417,  417,  417,
 /*  3190 */   417,  155,  417,  156,  417,  417,  417,  417,  417,  417,
 /*  3200 */   417,  417,  272,  265,  141,  115,  417,  268,  267,  417,
 /*  3210 */   266,  264,  417,  417,  258,  417,  155,  417,  156,  417,
 /*  3220 */   417,  417,  417,  417,  417,  417,  417,  272,  265,  141,
 /*  3230 */   417,  417,  268,  267,  417,  266,  264,  417,  417,  258,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     2,    5,    4,   40,   41,    7,   43,    9,   46,   40,
 /*    10 */    41,   13,   43,   15,   16,    9,   18,   19,   20,   21,
 /*    20 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*    30 */    32,   33,   34,   35,   36,   37,   69,   39,   41,   41,
 /*    40 */    43,   43,   46,   76,   77,   78,   79,   70,    5,   72,
 /*    50 */    52,   53,   54,   55,   30,   31,   32,   33,   34,   35,
 /*    60 */    83,   10,   40,   39,   13,   43,   15,   16,    4,   18,
 /*    70 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*    80 */    29,   30,   31,   32,   33,   34,   35,   35,   59,   46,
 /*    90 */    39,   39,   63,   64,   65,   66,   67,   68,   69,   70,
 /*   100 */     1,   72,   73,   74,   75,    1,    2,   56,    9,   46,
 /*   110 */    81,   82,   83,    9,    3,   86,   87,    1,   89,   90,
 /*   120 */     9,   13,   93,   15,   16,    9,   18,   19,   20,   21,
 /*   130 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   140 */    32,   33,   34,   35,    3,   41,    2,   39,   40,    3,
 /*   150 */    41,    7,   44,    9,   13,    9,   15,   16,   15,   18,
 /*   160 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   170 */    29,   30,   31,   32,   33,   34,   35,    1,    3,   41,
 /*   180 */    39,   43,    9,   40,   41,    9,   43,   46,   13,    3,
 /*   190 */    15,   16,   44,   18,   19,   20,   21,   22,   23,   24,
 /*   200 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   210 */    35,   46,   40,   41,   39,   43,   46,   13,   69,   15,
 /*   220 */    16,   46,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   230 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   240 */    91,   92,   44,   39,   44,    2,   13,   41,   15,   16,
 /*   250 */    46,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   260 */    27,   28,   29,   30,   31,   32,   33,   34,   35,    5,
 /*   270 */     5,   44,   39,   13,   69,   15,   16,   44,   18,   19,
 /*   280 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   290 */    30,   31,   32,   33,   34,   35,   91,   92,   13,   39,
 /*   300 */    15,   16,   42,   18,   19,   20,   21,   22,   23,   24,
 /*   310 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   320 */    35,   44,   44,   13,   39,   15,   16,   42,   18,   19,
 /*   330 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   340 */    30,   31,   32,   33,   34,   35,   44,    9,   13,   39,
 /*   350 */    15,   16,   42,   18,   19,   20,   21,   22,   23,   24,
 /*   360 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   370 */    35,   41,   44,   44,   39,   20,   21,   22,   23,   24,
 /*   380 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   390 */    35,   56,   54,   44,   39,   28,   29,   30,   31,   32,
 /*   400 */    33,   34,   35,    3,    5,   13,   39,   15,   16,    9,
 /*   410 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   420 */    28,   29,   30,   31,   32,   33,   34,   35,    5,    5,
 /*   430 */     9,   39,   13,    9,   15,   16,   44,   18,   19,   20,
 /*   440 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   450 */    31,   32,   33,   34,   35,   42,   58,   11,   39,   61,
 /*   460 */    62,   13,    9,   15,   16,   46,   18,   19,   20,   21,
 /*   470 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   480 */    32,   33,   34,   35,    2,    5,    3,   39,   13,    9,
 /*   490 */    15,   16,   44,   18,   19,   20,   21,   22,   23,   24,
 /*   500 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   510 */    35,    1,    9,   15,   39,   13,    9,   15,   16,   44,
 /*   520 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   530 */    28,   29,   30,   31,   32,   33,   34,   35,   42,    1,
 /*   540 */     3,   39,   13,   11,   15,   16,   44,   18,   19,   20,
 /*   550 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   560 */    31,   32,   33,   34,   35,    1,    3,   51,   39,   13,
 /*   570 */    69,   15,   16,   44,   18,   19,   20,   21,   22,   23,
 /*   580 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   590 */    34,   35,   80,    9,    8,   39,   13,   80,   15,   16,
 /*   600 */    44,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   610 */    27,   28,   29,   30,   31,   32,   33,   34,   35,    1,
 /*   620 */    80,   69,   39,   32,   33,   34,   35,   44,   82,    9,
 /*   630 */    39,   13,   57,   15,   16,   94,   18,   19,   20,   21,
 /*   640 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   650 */    32,   33,   34,   35,   94,   94,   13,   39,   15,   16,
 /*   660 */    94,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   670 */    27,   28,   29,   30,   31,   32,   33,   34,   35,    1,
 /*   680 */    94,   94,   39,   94,   94,   94,   94,   94,   94,   46,
 /*   690 */    94,   13,   94,   15,   16,   94,   18,   19,   20,   21,
 /*   700 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   710 */    32,   33,   34,   35,   94,   94,   13,   39,   15,   16,
 /*   720 */    94,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   730 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   94,
 /*   740 */    94,   94,   39,   94,   94,   94,   94,   94,   13,   94,
 /*   750 */    15,   16,   49,   18,   19,   20,   21,   22,   23,   24,
 /*   760 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   770 */    35,   94,   15,   16,   39,   18,   19,   20,   21,   22,
 /*   780 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   790 */    33,   34,   35,   94,   94,   94,   39,   94,   94,   15,
 /*   800 */    16,   44,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   810 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   820 */    94,   94,   94,   39,   94,   94,   15,   16,   44,   18,
 /*   830 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   840 */    29,   30,   31,   32,   33,   34,   35,   94,   94,   94,
 /*   850 */    39,   94,   94,   15,   16,   44,   18,   19,   20,   21,
 /*   860 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   870 */    32,   33,   34,   35,   94,   94,   94,   39,   18,   19,
 /*   880 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   890 */    30,   31,   32,   33,   34,   35,   94,   94,   94,   39,
 /*   900 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   910 */    29,   30,   31,   32,   33,   34,   35,   94,   94,   94,
 /*   920 */    39,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   930 */    30,   31,   32,   33,   34,   35,   94,   94,   94,   39,
 /*   940 */    94,   94,   94,   22,   23,   24,   25,   26,   27,   28,
 /*   950 */    29,   30,   31,   32,   33,   34,   35,    0,   94,   94,
 /*   960 */    39,    4,   94,   94,    7,   94,    9,   94,   24,   25,
 /*   970 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   980 */    94,    1,    2,   39,    4,   94,   94,   94,   94,    9,
 /*   990 */    94,   94,   94,   36,   37,   94,   94,   94,   41,   94,
 /*  1000 */    43,   94,   94,   46,   94,   48,   94,   50,   94,   52,
 /*  1010 */    53,   54,   55,   94,    4,   94,   94,    7,   94,    9,
 /*  1020 */    40,   41,   69,   43,   94,   15,   94,   69,   94,   76,
 /*  1030 */    77,   78,   79,   94,   76,   77,   78,   79,   94,   94,
 /*  1040 */    94,   94,   94,   94,   94,   94,   36,   37,   94,   94,
 /*  1050 */    40,   41,   94,   43,   44,   94,   94,   94,   59,   94,
 /*  1060 */    94,   94,   52,   53,   54,   55,   94,   68,   94,   70,
 /*  1070 */    94,   72,    4,   94,   94,    7,   94,    9,   94,   94,
 /*  1080 */    81,   82,   83,   84,   85,   86,   87,   69,   89,   90,
 /*  1090 */    94,   69,   93,   94,   76,   77,   78,   79,   76,   77,
 /*  1100 */    78,   79,   34,   94,   36,   37,   59,   94,   94,   41,
 /*  1110 */    94,   43,   44,   94,   94,   68,   94,   70,   71,   72,
 /*  1120 */    52,   53,   54,   55,   94,   94,   94,   94,   81,   82,
 /*  1130 */    83,   94,   59,   86,   87,   88,   89,   90,   94,   94,
 /*  1140 */    93,   68,   94,   70,   71,   72,   94,   94,   94,   94,
 /*  1150 */    94,   94,   94,   94,   81,   82,   83,   94,   94,   86,
 /*  1160 */    87,   94,   89,   90,   59,   94,   93,   94,   94,   94,
 /*  1170 */    94,   94,   94,   68,   94,   70,   71,   72,   94,   94,
 /*  1180 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   94,
 /*  1190 */    59,   86,   87,   94,   89,   90,   94,   94,   93,   68,
 /*  1200 */    94,   70,   71,   72,   94,   94,   94,   94,   94,   94,
 /*  1210 */    94,   94,   81,   82,   83,   94,   59,   86,   87,   94,
 /*  1220 */    89,   90,   94,   94,   93,   68,   94,   70,   71,   72,
 /*  1230 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  1240 */    83,   94,   94,   86,   87,   94,   89,   90,   59,   94,
 /*  1250 */    93,   94,   94,    4,   94,   94,    7,   68,    9,   70,
 /*  1260 */    71,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1270 */    81,   82,   83,   94,   94,   86,   87,   94,   89,   90,
 /*  1280 */    31,   94,   93,   94,    4,   36,   37,    7,   94,    9,
 /*  1290 */    41,   94,   43,   94,   94,   94,   94,   94,   94,   94,
 /*  1300 */    94,   52,   53,   54,   55,   94,    4,   94,   94,    7,
 /*  1310 */    94,    9,   94,   94,   34,   94,   36,   37,   94,   94,
 /*  1320 */    94,   41,   94,   43,   94,   94,   94,   94,   94,   94,
 /*  1330 */    94,   94,   52,   53,   54,   55,   34,    4,   36,   37,
 /*  1340 */     7,   94,    9,   41,   94,   43,   94,   94,   94,   94,
 /*  1350 */    94,   94,   94,   94,   52,   53,   54,   55,   94,    4,
 /*  1360 */    94,   94,    7,   94,    9,   94,   94,   34,   94,   36,
 /*  1370 */    37,   94,   94,   94,   41,   94,   43,   94,   94,   94,
 /*  1380 */    94,   94,   94,   94,   94,   52,   53,   54,   55,   34,
 /*  1390 */     4,   36,   37,    7,   94,    9,   41,   94,   43,   94,
 /*  1400 */    94,   94,   94,   94,   94,   94,   94,   52,   53,   54,
 /*  1410 */    55,   94,    4,   94,   94,    7,   94,    9,   94,   94,
 /*  1420 */    34,   94,   36,   37,   94,   94,   94,   41,   94,   43,
 /*  1430 */    94,   94,    4,   94,   94,    7,   94,    9,   52,   53,
 /*  1440 */    54,   55,   34,   94,   36,   37,   94,   94,   94,   41,
 /*  1450 */    94,   43,   94,   94,    4,   94,   94,    7,   94,    9,
 /*  1460 */    52,   53,   54,   55,   36,   37,   94,   94,   94,   41,
 /*  1470 */    94,   43,   44,   94,   94,   94,   94,   94,   94,   94,
 /*  1480 */    52,   53,   54,   55,   94,   94,   36,   37,   94,   94,
 /*  1490 */    94,   41,   94,   43,   94,   94,   94,   47,   59,   94,
 /*  1500 */    94,   94,   52,   53,   54,   55,   94,   68,   94,   70,
 /*  1510 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1520 */    81,   82,   83,   94,   59,   86,   87,   94,   89,   90,
 /*  1530 */    94,    4,   93,   68,    7,   70,    9,   72,   94,    4,
 /*  1540 */    94,   94,    7,   94,    9,   94,   81,   82,   83,   94,
 /*  1550 */    94,   86,   87,   94,   89,   90,   94,   94,   93,   94,
 /*  1560 */    94,   94,   94,   36,   37,   94,   94,   94,   41,   42,
 /*  1570 */    43,   36,   37,   94,   94,   94,   41,   42,   43,   52,
 /*  1580 */    53,   54,   55,   94,   94,   59,   94,   52,   53,   54,
 /*  1590 */    55,   94,    4,   94,   94,    7,   70,    9,   72,   94,
 /*  1600 */     4,   94,   94,    7,   94,    9,   94,   81,   82,   83,
 /*  1610 */    94,   94,   86,   87,   94,   89,   90,   94,   94,   93,
 /*  1620 */    94,   94,   94,   94,   36,   37,   94,   94,   94,   41,
 /*  1630 */    42,   43,   36,   37,   94,   94,   94,   41,   42,   43,
 /*  1640 */    52,   53,   54,   55,   94,   94,   94,   94,   52,   53,
 /*  1650 */    54,   55,   94,    4,   94,   94,    7,   94,    9,   94,
 /*  1660 */    94,    4,   94,   94,    7,   94,    9,   94,   94,   94,
 /*  1670 */    94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1680 */    94,   94,   94,   94,   94,   36,   37,   94,   94,   94,
 /*  1690 */    41,   42,   43,   36,   37,   94,   94,   94,   41,   42,
 /*  1700 */    43,   52,   53,   54,   55,   94,   94,   94,   94,   52,
 /*  1710 */    53,   54,   55,   94,    4,   94,   94,    7,   94,    9,
 /*  1720 */    94,   94,    4,   94,   94,    7,   94,    9,   94,   94,
 /*  1730 */    94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1740 */    94,   94,   94,   94,   94,   94,   36,   37,   94,   94,
 /*  1750 */    94,   41,   42,   43,   36,   37,   94,   94,   94,   41,
 /*  1760 */    42,   43,   52,   53,   54,   55,   94,   94,   94,   94,
 /*  1770 */    52,   53,   54,   55,    2,   94,    4,   94,   94,    7,
 /*  1780 */    94,    9,   94,   94,    4,   94,   94,    7,   94,    9,
 /*  1790 */    94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1800 */    94,   94,   94,   94,   94,   94,   94,   94,   36,   37,
 /*  1810 */    94,   94,   94,   41,   94,   43,   36,   37,   94,   94,
 /*  1820 */    94,   41,   94,   43,   52,   53,   54,   55,   94,   94,
 /*  1830 */    59,   94,   52,   53,   54,   55,   94,   94,   94,   94,
 /*  1840 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  1850 */    94,   94,   81,   82,   83,   94,   94,   86,   87,   94,
 /*  1860 */    89,   90,   94,   94,   93,   94,   94,   94,   59,   94,
 /*  1870 */    94,   94,   94,   94,   94,   94,   94,   94,   94,   70,
 /*  1880 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1890 */    81,   82,   83,   59,   94,   86,   87,   94,   89,   90,
 /*  1900 */    94,   94,   93,   94,   70,   94,   72,   94,   94,   94,
 /*  1910 */    94,   94,   94,   94,   94,   81,   82,   83,   59,   94,
 /*  1920 */    86,   87,   94,   89,   90,   94,   94,   93,   94,   70,
 /*  1930 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  1940 */    81,   82,   83,   94,   94,   86,   87,   94,   89,   90,
 /*  1950 */    59,   94,   93,   94,   94,   94,   94,   94,   94,   94,
 /*  1960 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  1970 */    94,   94,   81,   82,   83,   59,   94,   86,   87,   94,
 /*  1980 */    89,   90,   94,   94,   93,   94,   70,   94,   72,   94,
 /*  1990 */    94,   94,   94,   94,   94,   94,   94,   81,   82,   83,
 /*  2000 */    59,   94,   86,   87,   94,   89,   90,   94,   94,   93,
 /*  2010 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  2020 */    94,   94,   81,   82,   83,   94,   94,   86,   87,   94,
 /*  2030 */    89,   90,   59,   94,   93,   94,   94,   94,   94,   94,
 /*  2040 */    94,   94,   94,   70,   94,   72,   94,   94,   94,   94,
 /*  2050 */    94,   94,   94,   94,   81,   82,   83,   59,   94,   86,
 /*  2060 */    87,   94,   89,   90,   94,   94,   93,   94,   70,   94,
 /*  2070 */    72,   94,   94,   94,   94,   94,   94,   94,   94,   81,
 /*  2080 */    82,   83,   59,   94,   86,   87,   94,   89,   90,   94,
 /*  2090 */    94,   93,   94,   70,   94,   72,   94,   94,   94,   94,
 /*  2100 */    94,   94,   94,   94,   81,   82,   83,   94,   94,   86,
 /*  2110 */    87,   94,   89,   90,   59,   94,   93,   94,   94,   94,
 /*  2120 */    94,   94,   94,   94,   94,   70,   94,   72,   94,   94,
 /*  2130 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   59,
 /*  2140 */    94,   86,   87,   94,   89,   90,   94,   94,   93,   94,
 /*  2150 */    70,   94,   72,   94,   94,   94,   94,   94,   94,   94,
 /*  2160 */    94,   81,   82,   83,   59,   94,   86,   87,   94,   89,
 /*  2170 */    90,   94,   94,   93,   94,   70,   94,   72,   94,   94,
 /*  2180 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   94,
 /*  2190 */    94,   86,   87,   94,   89,   90,   59,   94,   93,   94,
 /*  2200 */    94,   94,   94,   94,   94,   94,   94,   70,   94,   72,
 /*  2210 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  2220 */    83,   59,   94,   86,   87,   94,   89,   90,   94,   94,
 /*  2230 */    93,   94,   70,   94,   72,   94,   94,   94,   94,   94,
 /*  2240 */    94,   94,   94,   81,   82,   83,   59,   94,   86,   87,
 /*  2250 */    94,   89,   90,   94,   94,   93,   94,   70,   94,   72,
 /*  2260 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  2270 */    83,   94,   94,   86,   87,   94,   89,   90,   59,   94,
 /*  2280 */    93,   94,   94,   94,   94,   94,   94,   94,   94,   70,
 /*  2290 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  2300 */    81,   82,   83,   59,   94,   86,   87,   94,   89,   90,
 /*  2310 */    94,   94,   93,   94,   70,   94,   72,   94,   94,   94,
 /*  2320 */    94,   94,   94,   94,   94,   81,   82,   83,   59,   94,
 /*  2330 */    86,   87,   94,   89,   90,   94,   94,   93,   94,   70,
 /*  2340 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  2350 */    81,   82,   83,   94,   94,   86,   87,   94,   89,   90,
 /*  2360 */    59,   94,   93,   94,   94,   94,   94,   94,   94,   94,
 /*  2370 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  2380 */    94,   94,   81,   82,   83,   59,   94,   86,   87,   94,
 /*  2390 */    89,   90,   94,   94,   93,   94,   70,   94,   72,   94,
 /*  2400 */    94,   94,   94,   94,   94,   94,   94,   81,   82,   83,
 /*  2410 */    59,   94,   86,   87,   94,   89,   90,   94,   94,   93,
 /*  2420 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  2430 */    94,   94,   81,   82,   83,   94,   94,   86,   87,   94,
 /*  2440 */    89,   90,   59,   94,   93,   94,   94,   94,   94,   94,
 /*  2450 */    94,   94,   94,   70,   94,   72,   94,   94,   94,   94,
 /*  2460 */    94,   94,   94,   94,   81,   82,   83,   59,   94,   86,
 /*  2470 */    87,   94,   89,   90,   94,   94,   93,   94,   70,   94,
 /*  2480 */    72,   94,   94,   94,   94,   94,   94,   94,   94,   81,
 /*  2490 */    82,   83,   59,   94,   86,   87,   94,   89,   90,   94,
 /*  2500 */    94,   93,   94,   70,   94,   72,   94,   94,   94,   94,
 /*  2510 */    94,   94,   94,   94,   81,   82,   83,   94,   94,   86,
 /*  2520 */    87,   94,   89,   90,   59,   94,   93,   94,   94,   94,
 /*  2530 */    94,   94,   94,   94,   94,   70,   94,   72,   94,   94,
 /*  2540 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   59,
 /*  2550 */    94,   86,   87,   94,   89,   90,   94,   94,   93,   94,
 /*  2560 */    70,   94,   72,   94,   94,   94,   94,   94,   94,   94,
 /*  2570 */    94,   81,   82,   83,   59,   94,   86,   87,   94,   89,
 /*  2580 */    90,   94,   94,   93,   94,   70,   94,   72,   94,   94,
 /*  2590 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   94,
 /*  2600 */    94,   86,   87,   94,   89,   90,   59,   94,   93,   94,
 /*  2610 */    94,   94,   94,   94,   94,   94,   94,   70,   94,   72,
 /*  2620 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  2630 */    83,   59,   94,   86,   87,   94,   89,   90,   94,   94,
 /*  2640 */    93,   94,   70,   94,   72,   94,   94,   94,   94,   94,
 /*  2650 */    94,   94,   94,   81,   82,   83,   59,   94,   86,   87,
 /*  2660 */    94,   89,   90,   94,   94,   93,   94,   70,   94,   72,
 /*  2670 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  2680 */    83,   94,   94,   86,   87,   94,   89,   90,   59,   94,
 /*  2690 */    93,   94,   94,   94,   94,   94,   94,   94,   94,   70,
 /*  2700 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  2710 */    81,   82,   83,   59,   94,   86,   87,   94,   89,   90,
 /*  2720 */    94,   94,   93,   94,   70,   94,   72,   94,   94,   94,
 /*  2730 */    94,   94,   94,   94,   94,   81,   82,   83,   59,   94,
 /*  2740 */    86,   87,   94,   89,   90,   94,   94,   93,   94,   70,
 /*  2750 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  2760 */    81,   82,   83,   94,   94,   86,   87,   94,   89,   90,
 /*  2770 */    59,   94,   93,   94,   94,   94,   94,   94,   94,   94,
 /*  2780 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  2790 */    94,   94,   81,   82,   83,   59,   94,   86,   87,   94,
 /*  2800 */    89,   90,   94,   94,   93,   94,   70,   94,   72,   94,
 /*  2810 */    94,   94,   94,   94,   94,   94,   94,   81,   82,   83,
 /*  2820 */    59,   94,   86,   87,   94,   89,   90,   94,   94,   93,
 /*  2830 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  2840 */    94,   94,   81,   82,   83,   94,   94,   86,   87,   94,
 /*  2850 */    89,   90,   59,   94,   93,   94,   94,   94,   94,   94,
 /*  2860 */    94,   94,   94,   70,   94,   72,   94,   94,   94,   94,
 /*  2870 */    94,   94,   94,   94,   81,   82,   83,   59,   94,   86,
 /*  2880 */    87,   94,   89,   90,   94,   94,   93,   94,   70,   94,
 /*  2890 */    72,   94,   94,   94,   94,   94,   94,   94,   94,   81,
 /*  2900 */    82,   83,   59,   94,   86,   87,   94,   89,   90,   94,
 /*  2910 */    94,   93,   94,   70,   94,   72,   94,   94,   94,   94,
 /*  2920 */    94,   94,   94,   94,   81,   82,   83,   94,   94,   86,
 /*  2930 */    87,   94,   89,   90,   59,   94,   93,   94,   94,   94,
 /*  2940 */    94,   94,   94,   94,   94,   70,   94,   72,   94,   94,
 /*  2950 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   59,
 /*  2960 */    94,   86,   87,   94,   89,   90,   94,   94,   93,   94,
 /*  2970 */    70,   94,   72,   94,   94,   94,   94,   94,   94,   94,
 /*  2980 */    94,   81,   82,   83,   59,   94,   86,   87,   94,   89,
 /*  2990 */    90,   94,   94,   93,   94,   70,   94,   72,   94,   94,
 /*  3000 */    94,   94,   94,   94,   94,   94,   81,   82,   83,   94,
 /*  3010 */    94,   86,   87,   94,   89,   90,   59,   94,   93,   94,
 /*  3020 */    94,   94,   94,   94,   94,   94,   94,   70,   94,   72,
 /*  3030 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  3040 */    83,   59,   94,   86,   87,   94,   89,   90,   94,   94,
 /*  3050 */    93,   94,   70,   94,   72,   94,   94,   94,   94,   94,
 /*  3060 */    94,   94,   94,   81,   82,   83,   59,   94,   86,   87,
 /*  3070 */    94,   89,   90,   94,   94,   93,   94,   70,   94,   72,
 /*  3080 */    94,   94,   94,   94,   94,   94,   94,   94,   81,   82,
 /*  3090 */    83,   94,   94,   86,   87,   94,   89,   90,   59,   94,
 /*  3100 */    93,   94,   94,   94,   94,   94,   94,   94,   94,   70,
 /*  3110 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  3120 */    81,   82,   83,   59,   94,   86,   87,   94,   89,   90,
 /*  3130 */    94,   94,   93,   94,   70,   94,   72,   94,   94,   94,
 /*  3140 */    94,   94,   94,   94,   94,   81,   82,   83,   59,   94,
 /*  3150 */    86,   87,   94,   89,   90,   94,   94,   93,   94,   70,
 /*  3160 */    94,   72,   94,   94,   94,   94,   94,   94,   94,   94,
 /*  3170 */    81,   82,   83,   94,   94,   86,   87,   94,   89,   90,
 /*  3180 */    59,   94,   93,   94,   94,   94,   94,   94,   94,   94,
 /*  3190 */    94,   70,   94,   72,   94,   94,   94,   94,   94,   94,
 /*  3200 */    94,   94,   81,   82,   83,   59,   94,   86,   87,   94,
 /*  3210 */    89,   90,   94,   94,   93,   94,   70,   94,   72,   94,
 /*  3220 */    94,   94,   94,   94,   94,   94,   94,   81,   82,   83,
 /*  3230 */    94,   94,   86,   87,   94,   89,   90,   94,   94,   93,
};
#define YY_SHIFT_USE_DFLT (-39)
#define YY_SHIFT_COUNT (200)
#define YY_SHIFT_MIN   (-38)
#define YY_SHIFT_MAX   (1780)
static const short yy_shift_ofst[] = {
 /*     0 */   575,  957, 1772, 1780, 1718, 1710, 1657, 1780, 1780, 1780,
 /*    10 */  1649, 1596, 1588, 1535, 1527, 1780, 1780,   -2, 1010, 1068,
 /*    20 */  1450, 1428, 1408, 1386, 1355, 1333, 1302, 1280, 1249, 1780,
 /*    30 */  1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
 /*    40 */  1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
 /*    50 */  1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
 /*    60 */  1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
 /*    70 */  1780, 1780, 1780,  144,  584,  584,  584,  584,  980,  104,
 /*    80 */   620,  400,  338,  480,  146,  111,  424,  586,  586,  586,
 /*    90 */   584,  175,  141,  108,   51,  703,  678,  643,  618,  583,
 /*   100 */   556,  529,  502,  475,  448,  419,  392,  335,  310,  285,
 /*   110 */   260,  233,  204,  735,  735,  735,  811,  784,  757,  735,
 /*   120 */   735,  838,  860,  860,  881,  355,  900,  921,  944,  944,
 /*   130 */   367,  367,  367,  367,   24,   24,  591,  591,  143,  -31,
 /*   140 */   172,  -31,  -37,  138,   43,   -4,  176,   52,   52,  116,
 /*   150 */    52,   52,   52,   52,   99,   22,   -3,   22,  516,  563,
 /*   160 */   564,  537,  532,  538,  496,  507,  498,  503,  510,  483,
 /*   170 */   482,  446,  453,  413,  421,  423,  399,  349,  329,  328,
 /*   180 */   330,  302,  278,  277,  227,  265,  264,  243,  206,  200,
 /*   190 */   198,  148,  186,  170,  165,  109,  173,   64,    6,   63,
 /*   200 */   -38,
};
#define YY_REDUCE_USE_DFLT (-34)
#define YY_REDUCE_COUNT (90)
#define YY_REDUCE_MIN   (-33)
#define YY_REDUCE_MAX   (3146)
static const short yy_reduce_ofst[] = {
 /*     0 */   398,   29, 1047,  999, 1157, 1189, 1157, 1131, 1105, 1073,
 /*    10 */  1465, 1465, 1465, 1465, 1465, 1465, 1439, 3146, 3121, 3089,
 /*    20 */  3064, 3039, 1809, 1809, 3007, 1809, 1809, 2982, 2957, 2925,
 /*    30 */  2900, 2875, 2843, 2818, 2793, 2761, 2736, 2711, 2679, 2654,
 /*    40 */  2629, 2597, 2572, 2547, 2515, 2490, 2465, 2433, 2408, 2383,
 /*    50 */  2351, 2326, 2301, 2269, 2244, 2219, 2187, 2162, 2137, 2105,
 /*    60 */  2080, 2055, 2023, 1998, 1973, 1941, 1916, 1891, 1859, 1834,
 /*    70 */  1809, 1771, 1526, 1022, 1018,  958,  953,  -33,  205,  149,
 /*    80 */   -23,  552,  546,  552,  552,  552,  552,  540,  517,  512,
 /*    90 */   501,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   287,  415,  353,  415,  415,  415,  415,  415,  415,  415,
 /*    10 */   415,  415,  415,  415,  415,  354,  415,  313,  415,  415,
 /*    20 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*    30 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*    40 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*    50 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*    60 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*    70 */   415,  415,  415,  415,  415,  415,  415,  415,  298,  415,
 /*    80 */   415,  415,  415,  415,  415,  415,  415,  415,  309,  415,
 /*    90 */   319,  415,  415,  415,  295,  415,  415,  415,  415,  415,
 /*   100 */   415,  415,  415,  415,  415,  318,  415,  415,  415,  415,
 /*   110 */   415,  415,  314,  366,  365,  323,  368,  368,  368,  315,
 /*   120 */   295,  368,  370,  369,  384,  383,  391,  390,  378,  377,
 /*   130 */   382,  381,  380,  379,  389,  388,  372,  371,  298,  415,
 /*   140 */   300,  343,  298,  415,  415,  415,  415,  387,  385,  415,
 /*   150 */   376,  375,  374,  373,  415,  306,  395,  299,  415,  415,
 /*   160 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*   170 */   415,  415,  363,  415,  415,  415,  415,  415,  415,  415,
 /*   180 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*   190 */   415,  415,  415,  346,  415,  415,  415,  415,  415,  415,
 /*   200 */   415,  414,  413,  328,  327,  312,  326,  311,  310,  325,
 /*   210 */   307,  367,  364,  324,  322,  308,  296,  392,  338,  337,
 /*   220 */   336,  399,  409,  396,  404,  401,  407,  302,  400,  406,
 /*   230 */   393,  403,  397,  398,  405,  402,  408,  304,  394,  305,
 /*   240 */   329,  334,  333,  331,  330,  321,  320,  317,  332,  342,
 /*   250 */   351,  350,  349,  347,  345,  344,  412,  386,  410,  362,
 /*   260 */   361,  360,  359,  358,  357,  356,  355,  352,  348,  411,
 /*   270 */   341,  340,  335,  297,  316,  296,  303,  301,  339,  294,
 /*   280 */   293,  292,  291,  290,  289,  288,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSIGN",        "LCBLOCK",       "RCBLOCK",     
  "LCURL",         "RCURL",         "COLON",         "DICT",        
  "WHERE",         "NAME",          "COMMA",         "BITOR",       
  "FUNCTION_DEC",  "COMPOSITION",   "FUNCTION_CALL",  "PREPEND",     
  "APPEND",        "INDEX",         "OR",            "AND",         
  "BITXOR",        "BITAND",        "EQUALTO",       "NOTEQUALTO",  
  "GREATERTHAN",   "GORE",          "LESSTHAN",      "LORE",        
  "SHIFTL",        "SHIFTR",        "PLUS",          "MINUS",       
  "DIVIDE",        "TIMES",         "MODULO",        "POW",         
  "NOT",           "BITNOT",        "UMINUS",        "PLUSPLUS",    
  "COLONCOLON",    "LPAREN",        "RPAREN",        "LBRAC",       
  "RBRAC",         "COLLECTARRAY",  "DELIMITER",     "WILDCARD",    
  "CASE",          "OF",            "LET",           "IN",          
  "PRINT",         "NUM",           "STRING",        "BOOLEAN",     
  "RANGE",         "OPENQUOTEERROR",  "error",         "expr",        
  "id",            "main",          "in",            "start",       
  "test",          "spec",          "assignment",    "top_stmt",    
  "stmt",          "name_chain",    "function_call",  "stmt_list",   
  "array_index",   "case_statement",  "guard_statement",  "final_guard_statement",
  "horizontal_assignment_list",  "assignment_list",  "vertical_assignment_list",  "final_vertical_assignment_list",
  "where",         "dict",          "string",        "name_space",  
  "vert_stmt_list",  "final_vert_stmt_list",  "vertical_array",  "array",       
  "maybe_empty_stmt_list",  "num",           "bool",          "maybe_empty_name_chain",
  "pattern",       "array_slice", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "main ::= in",
 /*   1 */ "in ::=",
 /*   2 */ "in ::= in DELIMITER",
 /*   3 */ "in ::= in start DELIMITER",
 /*   4 */ "in ::= in test DELIMITER",
 /*   5 */ "start ::= spec",
 /*   6 */ "spec ::= assignment",
 /*   7 */ "spec ::= top_stmt",
 /*   8 */ "top_stmt ::= stmt",
 /*   9 */ "stmt ::= expr",
 /*  10 */ "name_chain ::= name_chain NAME",
 /*  11 */ "name_chain ::= NAME",
 /*  12 */ "expr ::= NAME",
 /*  13 */ "expr ::= expr COMPOSITION function_call",
 /*  14 */ "expr ::= expr COMPOSITION NAME",
 /*  15 */ "function_call ::= NAME LPAREN stmt_list RPAREN",
 /*  16 */ "function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  17 */ "expr ::= array_index LPAREN stmt_list RPAREN",
 /*  18 */ "function_call ::= NAME LPAREN RPAREN",
 /*  19 */ "function_call ::= array_index LPAREN RPAREN",
 /*  20 */ "expr ::= function_call",
 /*  21 */ "test ::= case_statement",
 /*  22 */ "guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER",
 /*  23 */ "guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER",
 /*  24 */ "final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK",
 /*  25 */ "final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK",
 /*  26 */ "assignment ::= final_guard_statement",
 /*  27 */ "assignment ::= name_chain ASSIGN expr",
 /*  28 */ "horizontal_assignment_list ::= name_chain ASSIGN expr",
 /*  29 */ "horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr",
 /*  30 */ "vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER",
 /*  31 */ "vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER",
 /*  32 */ "final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr",
 /*  33 */ "assignment_list ::= vertical_assignment_list",
 /*  34 */ "assignment_list ::= final_vertical_assignment_list",
 /*  35 */ "assignment_list ::= horizontal_assignment_list",
 /*  36 */ "where ::= WHERE LCBLOCK assignment_list RCBLOCK",
 /*  37 */ "assignment ::= name_chain ASSIGN expr expr",
 /*  38 */ "assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK",
 /*  39 */ "assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK",
 /*  40 */ "assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK",
 /*  41 */ "case_statement ::= CASE expr OF",
 /*  42 */ "test ::= LET IN",
 /*  43 */ "dict ::= DICT LCURL assignment_list RCURL",
 /*  44 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /*  45 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL",
 /*  46 */ "dict ::= LCURL assignment_list RCURL",
 /*  47 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /*  48 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL",
 /*  49 */ "expr ::= dict",
 /*  50 */ "expr ::= NAME LCURL NAME RCURL",
 /*  51 */ "expr ::= NAME LCURL string RCURL",
 /*  52 */ "name_space ::= NAME COLONCOLON NAME",
 /*  53 */ "name_space ::= function_call COLONCOLON NAME",
 /*  54 */ "name_space ::= name_space COLONCOLON NAME",
 /*  55 */ "function_call ::= name_space LPAREN stmt_list RPAREN",
 /*  56 */ "function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  57 */ "expr ::= name_space",
 /*  58 */ "vert_stmt_list ::= stmt DELIMITER",
 /*  59 */ "vert_stmt_list ::= vert_stmt_list stmt DELIMITER",
 /*  60 */ "final_vert_stmt_list ::= vert_stmt_list stmt",
 /*  61 */ "vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC",
 /*  62 */ "array ::= vertical_array",
 /*  63 */ "array ::= LBRAC maybe_empty_stmt_list RBRAC",
 /*  64 */ "stmt_list ::= stmt",
 /*  65 */ "stmt_list ::= stmt_list stmt",
 /*  66 */ "expr ::= array",
 /*  67 */ "maybe_empty_stmt_list ::=",
 /*  68 */ "maybe_empty_stmt_list ::= stmt_list",
 /*  69 */ "expr ::= num",
 /*  70 */ "expr ::= string",
 /*  71 */ "expr ::= bool",
 /*  72 */ "expr ::= PRINT LPAREN expr RPAREN",
 /*  73 */ "expr ::= LPAREN expr RPAREN",
 /*  74 */ "num ::= NUM",
 /*  75 */ "string ::= STRING",
 /*  76 */ "bool ::= BOOLEAN",
 /*  77 */ "maybe_empty_name_chain ::= name_chain",
 /*  78 */ "maybe_empty_name_chain ::= pattern",
 /*  79 */ "assignment ::= name_chain maybe_empty_name_chain ASSIGN expr",
 /*  80 */ "assignment ::= NAME maybe_empty_name_chain ASSIGN expr",
 /*  81 */ "pattern ::= LPAREN NAME PREPEND NAME RPAREN",
 /*  82 */ "expr ::= expr PREPEND expr",
 /*  83 */ "expr ::= expr APPEND expr",
 /*  84 */ "expr ::= expr PLUSPLUS expr",
 /*  85 */ "expr ::= expr PLUS expr",
 /*  86 */ "expr ::= expr MINUS expr",
 /*  87 */ "expr ::= expr DIVIDE expr",
 /*  88 */ "expr ::= expr TIMES expr",
 /*  89 */ "expr ::= expr MODULO expr",
 /*  90 */ "expr ::= expr POW expr",
 /*  91 */ "expr ::= expr EQUALTO expr",
 /*  92 */ "expr ::= expr NOTEQUALTO expr",
 /*  93 */ "expr ::= expr LESSTHAN expr",
 /*  94 */ "expr ::= expr GREATERTHAN expr",
 /*  95 */ "expr ::= expr LORE expr",
 /*  96 */ "expr ::= expr GORE expr",
 /*  97 */ "expr ::= expr AND expr",
 /*  98 */ "expr ::= expr OR expr",
 /*  99 */ "expr ::= BITNOT expr",
 /* 100 */ "expr ::= LPAREN MINUS expr RPAREN",
 /* 101 */ "expr ::= NOT expr",
 /* 102 */ "expr ::= expr SHIFTL expr",
 /* 103 */ "expr ::= expr SHIFTR expr",
 /* 104 */ "expr ::= expr BITAND expr",
 /* 105 */ "expr ::= expr BITXOR expr",
 /* 106 */ "array_index ::= function_call LBRAC expr RBRAC",
 /* 107 */ "array_index ::= NAME LBRAC expr RBRAC",
 /* 108 */ "array_index ::= array_index LBRAC expr RBRAC",
 /* 109 */ "expr ::= array_index",
 /* 110 */ "array_slice ::= NAME LBRAC PREPEND expr RBRAC",
 /* 111 */ "array_slice ::= NAME LBRAC expr PREPEND RBRAC",
 /* 112 */ "array_slice ::= NAME LBRAC expr PREPEND expr RBRAC",
 /* 113 */ "array_slice ::= NAME LBRAC COLONCOLON expr RBRAC",
 /* 114 */ "array_slice ::= NAME LBRAC expr COLONCOLON expr RBRAC",
 /* 115 */ "array_slice ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 116 */ "array_slice ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 117 */ "array_slice ::= NAME LBRAC expr PREPEND MODULO RBRAC",
 /* 118 */ "array_slice ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 119 */ "array_slice ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 120 */ "array_slice ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 121 */ "array_slice ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 122 */ "array_slice ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 123 */ "array_slice ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 124 */ "expr ::= array_slice",
 /* 125 */ "expr ::= LBRAC expr RANGE expr RBRAC",
 /* 126 */ "expr ::= LBRAC expr COMMA expr RANGE expr RBRAC",
 /* 127 */ "in ::= error",
 /* 128 */ "error ::= OPENQUOTEERROR",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* ASSIGN */
    case 2: /* LCBLOCK */
    case 3: /* RCBLOCK */
    case 4: /* LCURL */
    case 5: /* RCURL */
    case 6: /* COLON */
    case 7: /* DICT */
    case 8: /* WHERE */
    case 9: /* NAME */
    case 10: /* COMMA */
    case 11: /* BITOR */
    case 12: /* FUNCTION_DEC */
    case 13: /* COMPOSITION */
    case 14: /* FUNCTION_CALL */
    case 15: /* PREPEND */
    case 16: /* APPEND */
    case 17: /* INDEX */
    case 18: /* OR */
    case 19: /* AND */
    case 20: /* BITXOR */
    case 21: /* BITAND */
    case 22: /* EQUALTO */
    case 23: /* NOTEQUALTO */
    case 24: /* GREATERTHAN */
    case 25: /* GORE */
    case 26: /* LESSTHAN */
    case 27: /* LORE */
    case 28: /* SHIFTL */
    case 29: /* SHIFTR */
    case 30: /* PLUS */
    case 31: /* MINUS */
    case 32: /* DIVIDE */
    case 33: /* TIMES */
    case 34: /* MODULO */
    case 35: /* POW */
    case 36: /* NOT */
    case 37: /* BITNOT */
    case 38: /* UMINUS */
    case 39: /* PLUSPLUS */
    case 40: /* COLONCOLON */
    case 41: /* LPAREN */
    case 42: /* RPAREN */
    case 43: /* LBRAC */
    case 44: /* RBRAC */
    case 45: /* COLLECTARRAY */
    case 46: /* DELIMITER */
    case 47: /* WILDCARD */
    case 48: /* CASE */
    case 49: /* OF */
    case 50: /* LET */
    case 51: /* IN */
    case 52: /* PRINT */
    case 53: /* NUM */
    case 54: /* STRING */
    case 55: /* BOOLEAN */
    case 56: /* RANGE */
    case 57: /* OPENQUOTEERROR */
{
#line 45 "./src/Grammar/grammar.y"
 token_destructor((yypminor->yy0)); 
#line 1301 "./src/Grammar/grammar.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 61, 1 },
  { 62, 0 },
  { 62, 2 },
  { 62, 3 },
  { 62, 3 },
  { 63, 1 },
  { 65, 1 },
  { 65, 1 },
  { 67, 1 },
  { 68, 1 },
  { 69, 2 },
  { 69, 1 },
  { 59, 1 },
  { 59, 3 },
  { 59, 3 },
  { 70, 4 },
  { 70, 6 },
  { 59, 4 },
  { 70, 3 },
  { 70, 3 },
  { 59, 1 },
  { 64, 1 },
  { 74, 7 },
  { 74, 6 },
  { 75, 6 },
  { 75, 6 },
  { 66, 1 },
  { 66, 3 },
  { 76, 3 },
  { 76, 4 },
  { 78, 4 },
  { 78, 5 },
  { 79, 4 },
  { 77, 1 },
  { 77, 1 },
  { 77, 1 },
  { 80, 4 },
  { 66, 4 },
  { 66, 6 },
  { 66, 8 },
  { 66, 8 },
  { 73, 3 },
  { 64, 2 },
  { 81, 4 },
  { 81, 7 },
  { 81, 6 },
  { 81, 3 },
  { 81, 6 },
  { 81, 5 },
  { 59, 1 },
  { 59, 4 },
  { 59, 4 },
  { 83, 3 },
  { 83, 3 },
  { 83, 3 },
  { 70, 4 },
  { 70, 6 },
  { 59, 1 },
  { 84, 2 },
  { 84, 3 },
  { 85, 2 },
  { 86, 5 },
  { 87, 1 },
  { 87, 3 },
  { 71, 1 },
  { 71, 2 },
  { 59, 1 },
  { 88, 0 },
  { 88, 1 },
  { 59, 1 },
  { 59, 1 },
  { 59, 1 },
  { 59, 4 },
  { 59, 3 },
  { 89, 1 },
  { 82, 1 },
  { 90, 1 },
  { 91, 1 },
  { 91, 1 },
  { 66, 4 },
  { 66, 4 },
  { 92, 5 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 2 },
  { 59, 4 },
  { 59, 2 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 59, 3 },
  { 72, 4 },
  { 72, 4 },
  { 72, 4 },
  { 59, 1 },
  { 93, 5 },
  { 93, 5 },
  { 93, 6 },
  { 93, 5 },
  { 93, 6 },
  { 93, 7 },
  { 93, 8 },
  { 93, 6 },
  { 93, 7 },
  { 93, 8 },
  { 93, 8 },
  { 93, 9 },
  { 93, 10 },
  { 93, 7 },
  { 59, 1 },
  { 59, 5 },
  { 59, 7 },
  { 62, 1 },
  { 58, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 2: /* in ::= in DELIMITER */
      case 3: /* in ::= in start DELIMITER */ yytestcase(yyruleno==3);
      case 4: /* in ::= in test DELIMITER */ yytestcase(yyruleno==4);
#line 95 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 1729 "./src/Grammar/grammar.c"
        break;
      case 5: /* start ::= spec */
#line 101 "./src/Grammar/grammar.y"
{
/*    std::cout << "Object of type: " << yymsp[0].minor.yy0.type << " hit the stack!" << std::endl;*/
    optic::out() << "Object at end of parser: ";
    print_object(yymsp[0].minor.yy0);
    if(yymsp[0].minor.yy0.type!=optic::OPERATION_TREE)
    {
        optic::object a = mem_alloc(optic::OPERATION_TREE);
        a.data.array->push_back(yymsp[0].minor.yy0);
        optic::resolve_stack_from_parser(a, true);
    }
    else
    {
        optic::resolve_stack_from_parser(yymsp[0].minor.yy0, true);
/*        optic::resolve_stack_from_parser(flatten_tree(yymsp[0].minor.yy0), true);*/
    }
}
#line 1749 "./src/Grammar/grammar.c"
        break;
      case 6: /* spec ::= assignment */
      case 21: /* test ::= case_statement */ yytestcase(yyruleno==21);
#line 119 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;
}
#line 1757 "./src/Grammar/grammar.c"
        break;
      case 7: /* spec ::= top_stmt */
      case 8: /* top_stmt ::= stmt */ yytestcase(yyruleno==8);
#line 124 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;

}
#line 1766 "./src/Grammar/grammar.c"
        break;
      case 9: /* stmt ::= expr */
#line 136 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;

}
#line 1774 "./src/Grammar/grammar.c"
        break;
      case 10: /* name_chain ::= name_chain NAME */
#line 142 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type!=optic::ARRAY)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);

        yymsp[-1].minor.yy0.type = optic::STRING;
        yymsp[0].minor.yy0.type = optic::STRING;

        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0 = yymsp[-1].minor.yy0;
        yymsp[0].minor.yy0.type = optic::STRING;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 1796 "./src/Grammar/grammar.c"
        break;
      case 11: /* name_chain ::= NAME */
#line 162 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
    yygotominor.yy0.type = optic::STRING;
}
#line 1804 "./src/Grammar/grammar.c"
        break;
      case 12: /* expr ::= NAME */
#line 168 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
    yygotominor.yy0.type = optic::UNDECLARED_VARIABLE;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 1817 "./src/Grammar/grammar.c"
        break;
      case 13: /* expr ::= expr COMPOSITION function_call */
#line 179 "./src/Grammar/grammar.y"
{
    if(yymsp[0].minor.yy0.type==optic::OPERATION_TREE)
    {
        yymsp[0].minor.yy0.data.array->at(2).data.array->push_front(yymsp[-2].minor.yy0);
        yygotominor.yy0 = yymsp[0].minor.yy0;
    }
    else
    {
        optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        function_body.data.array->push_back(yymsp[-2].minor.yy0);
        yymsp[0].minor.yy0.type = optic::STRING;
        optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
    }
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 1836 "./src/Grammar/grammar.c"
        break;
      case 14: /* expr ::= expr COMPOSITION NAME */
#line 195 "./src/Grammar/grammar.y"
{
    optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);;
    function_body.data.array->push_back(yymsp[-2].minor.yy0);
    yymsp[0].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 1847 "./src/Grammar/grammar.c"
        break;
      case 15: /* function_call ::= NAME LPAREN stmt_list RPAREN */
#line 203 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::object b;
    b.type = optic::STRING;
    b.data.string = yymsp[-3].minor.yy0.data.string;
    optic::store_operations(yygotominor.yy0,b,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 1874 "./src/Grammar/grammar.c"
        break;
      case 16: /* function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 226 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }

    yymsp[-5].minor.yy0.type = optic::VARIABLE;
    optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,44,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 1902 "./src/Grammar/grammar.c"
        break;
      case 17: /* expr ::= array_index LPAREN stmt_list RPAREN */
      case 55: /* function_call ::= name_space LPAREN stmt_list RPAREN */ yytestcase(yyruleno==55);
#line 248 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 1927 "./src/Grammar/grammar.c"
        break;
      case 18: /* function_call ::= NAME LPAREN RPAREN */
#line 269 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 1942 "./src/Grammar/grammar.c"
        break;
      case 19: /* function_call ::= array_index LPAREN RPAREN */
#line 280 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 1956 "./src/Grammar/grammar.c"
        break;
      case 20: /* expr ::= function_call */
      case 33: /* assignment_list ::= vertical_assignment_list */ yytestcase(yyruleno==33);
      case 34: /* assignment_list ::= final_vertical_assignment_list */ yytestcase(yyruleno==34);
      case 35: /* assignment_list ::= horizontal_assignment_list */ yytestcase(yyruleno==35);
      case 57: /* expr ::= name_space */ yytestcase(yyruleno==57);
      case 64: /* stmt_list ::= stmt */ yytestcase(yyruleno==64);
      case 66: /* expr ::= array */ yytestcase(yyruleno==66);
      case 109: /* expr ::= array_index */ yytestcase(yyruleno==109);
      case 124: /* expr ::= array_slice */ yytestcase(yyruleno==124);
#line 290 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 1971 "./src/Grammar/grammar.c"
        break;
      case 22: /* guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER */
#line 302 "./src/Grammar/grammar.y"
{
    optic::object tree = create_condition_tree(yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0 = create_guard(yymsp[-6].minor.yy0,tree);
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 1983 "./src/Grammar/grammar.c"
        break;
      case 23: /* guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER */
#line 308 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 1994 "./src/Grammar/grammar.c"
        break;
      case 24: /* final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK */
#line 314 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2005 "./src/Grammar/grammar.c"
        break;
      case 25: /* final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK */
#line 320 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-5].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,47,&yymsp[-3].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2017 "./src/Grammar/grammar.c"
        break;
      case 26: /* assignment ::= final_guard_statement */
#line 326 "./src/Grammar/grammar.y"
{

    panopticon::object& b = yymsp[0].minor.yy0.data.array->at(0);
    panopticon::object& c = yymsp[0].minor.yy0.data.array->at(1);

    panopticon::object resolve;
    panopticon::store_operations(resolve, c, &panopticon::resolve_guard,false);

    resolve.type = panopticon::FUNCTION_BODY;
    b.type = optic::FUNCTION_ARG_NAMES;
    panopticon::store_operations(yygotominor.yy0, b, resolve, &panopticon::assign_variable,false);
    optic::shallow_mem_free_array(yymsp[0].minor.yy0.data.array,optic::GUARD);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2039 "./src/Grammar/grammar.c"
        break;
      case 27: /* assignment ::= name_chain ASSIGN expr */
#line 346 "./src/Grammar/grammar.y"
{
    insure_ready_for_assignment(yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    panopticon::store_operations(yygotominor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2053 "./src/Grammar/grammar.c"
        break;
      case 28: /* horizontal_assignment_list ::= name_chain ASSIGN expr */
#line 361 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2063 "./src/Grammar/grammar.c"
        break;
      case 29: /* horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr */
      case 32: /* final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr */ yytestcase(yyruleno==32);
#line 368 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2074 "./src/Grammar/grammar.c"
        break;
      case 30: /* vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER */
#line 375 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2085 "./src/Grammar/grammar.c"
        break;
      case 31: /* vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER */
#line 382 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-4].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2096 "./src/Grammar/grammar.c"
        break;
      case 36: /* where ::= WHERE LCBLOCK assignment_list RCBLOCK */
#line 411 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    optic::object serial_result;
    optic::object result;
    optic::object previous_result;
    for(int i=0;i<yymsp[-1].minor.yy0.data.array->size(); i+=2)
    {
        insure_ready_for_assignment(
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1)
        );
        panopticon::store_operations(
            result,
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1),
            panopticon::assign_variable
        );
        optic::store_operations(serial_result,previous_result,result);
        previous_result = serial_result;
    }
    optic::shallow_mem_free_array(yymsp[-1].minor.yy0.data.array,optic::ARRAY);
    yygotominor.yy0 = serial_result;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2131 "./src/Grammar/grammar.c"
        break;
      case 37: /* assignment ::= name_chain ASSIGN expr expr */
#line 441 "./src/Grammar/grammar.y"
{
    optic::out() << "Error: Cannot declare two statements in a single assignment." << std::endl;
    optic::correct_parsing = false;
    while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
    ParseARG_STORE;
  yy_destructor(yypParser,1,&yymsp[-2].minor);
}
#line 2142 "./src/Grammar/grammar.c"
        break;
      case 38: /* assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK */
#line 449 "./src/Grammar/grammar.y"
{
    panopticon::object body;
    panopticon::store_operations(body,yymsp[-1].minor.yy0,yymsp[-3].minor.yy0,false);
    insure_ready_for_assignment(yymsp[-5].minor.yy0,body);
    panopticon::store_operations(yygotominor.yy0, yymsp[-5].minor.yy0, body, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2160 "./src/Grammar/grammar.c"
        break;
      case 39: /* assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK */
#line 462 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-7].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    panopticon::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(yymsp[-7].minor.yy0,combined);
    panopticon::store_operations(yygotominor.yy0, yymsp[-7].minor.yy0, combined, panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,11,&yymsp[-6].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,46,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2186 "./src/Grammar/grammar.c"
        break;
      case 40: /* assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK */
#line 482 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-7].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    optic::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(b,combined);
    panopticon::store_operations(yygotominor.yy0, b, combined, &panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,11,&yymsp[-6].minor);
  yy_destructor(yypParser,47,&yymsp[-5].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,46,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2213 "./src/Grammar/grammar.c"
        break;
      case 41: /* case_statement ::= CASE expr OF */
#line 506 "./src/Grammar/grammar.y"
{
/*    yygotominor.yy0=B;*/
    yygotominor.yy0.type = optic::GUARD;
  yy_destructor(yypParser,48,&yymsp[-2].minor);
  yy_destructor(yypParser,49,&yymsp[0].minor);
}
#line 2223 "./src/Grammar/grammar.c"
        break;
      case 42: /* test ::= LET IN */
#line 511 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,50,&yymsp[-1].minor);
  yy_destructor(yypParser,51,&yymsp[0].minor);
}
#line 2231 "./src/Grammar/grammar.c"
        break;
      case 43: /* dict ::= DICT LCURL assignment_list RCURL */
#line 523 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2241 "./src/Grammar/grammar.c"
        break;
      case 44: /* dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL */
#line 528 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-6].minor);
  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2254 "./src/Grammar/grammar.c"
        break;
      case 45: /* dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL */
#line 533 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2266 "./src/Grammar/grammar.c"
        break;
      case 46: /* dict ::= LCURL assignment_list RCURL */
#line 538 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2275 "./src/Grammar/grammar.c"
        break;
      case 47: /* dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL */
#line 543 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2287 "./src/Grammar/grammar.c"
        break;
      case 48: /* dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL */
#line 548 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2298 "./src/Grammar/grammar.c"
        break;
      case 49: /* expr ::= dict */
#line 553 "./src/Grammar/grammar.y"
{
    optic::object dict;
    optic::store_operations(dict,yymsp[0].minor.yy0,&optic::create_dictionary,false);

    optic::optic_stack.push_back(dict);
    optic::evaluate_top();
    yygotominor.yy0 = optic::mem_copy(optic::optic_stack.back());
    optic::optic_stack.pop_back();
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 2316 "./src/Grammar/grammar.c"
        break;
      case 50: /* expr ::= NAME LCURL NAME RCURL */
      case 51: /* expr ::= NAME LCURL string RCURL */ yytestcase(yyruleno==51);
#line 570 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 2331 "./src/Grammar/grammar.c"
        break;
      case 52: /* name_space ::= NAME COLONCOLON NAME */
#line 590 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-1].minor);
}
#line 2346 "./src/Grammar/grammar.c"
        break;
      case 53: /* name_space ::= function_call COLONCOLON NAME */
      case 54: /* name_space ::= name_space COLONCOLON NAME */ yytestcase(yyruleno==54);
#line 602 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-1].minor);
}
#line 2361 "./src/Grammar/grammar.c"
        break;
      case 56: /* function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 645 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }

    optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,44,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2388 "./src/Grammar/grammar.c"
        break;
      case 58: /* vert_stmt_list ::= stmt DELIMITER */
#line 674 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2396 "./src/Grammar/grammar.c"
        break;
      case 59: /* vert_stmt_list ::= vert_stmt_list stmt DELIMITER */
#line 679 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-2].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
        yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-2].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 2415 "./src/Grammar/grammar.c"
        break;
      case 60: /* final_vert_stmt_list ::= vert_stmt_list stmt */
      case 65: /* stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==65);
#line 695 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-1].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-1].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 2434 "./src/Grammar/grammar.c"
        break;
      case 61: /* vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC */
#line 711 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2446 "./src/Grammar/grammar.c"
        break;
      case 62: /* array ::= vertical_array */
#line 717 "./src/Grammar/grammar.y"
{
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2453 "./src/Grammar/grammar.c"
        break;
      case 63: /* array ::= LBRAC maybe_empty_stmt_list RBRAC */
#line 722 "./src/Grammar/grammar.y"
{
    yymsp[-1].minor.yy0.type = optic::ARRAY;
    create_tree(yygotominor.yy0,yymsp[-1].minor.yy0);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2463 "./src/Grammar/grammar.c"
        break;
      case 67: /* maybe_empty_stmt_list ::= */
#line 754 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
}
#line 2470 "./src/Grammar/grammar.c"
        break;
      case 68: /* maybe_empty_stmt_list ::= stmt_list */
#line 759 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[0].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[0].minor.yy0.data.array;
    }
}
#line 2486 "./src/Grammar/grammar.c"
        break;
      case 69: /* expr ::= num */
      case 71: /* expr ::= bool */ yytestcase(yyruleno==71);
#line 777 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
/*    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);*/
}
#line 2495 "./src/Grammar/grammar.c"
        break;
      case 70: /* expr ::= string */
#line 783 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
/*   create_tree(yygotominor.yy0,yymsp[0].minor.yy0);*/
}
#line 2503 "./src/Grammar/grammar.c"
        break;
      case 72: /* expr ::= PRINT LPAREN expr RPAREN */
#line 799 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&optic::unary_print_object,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,52,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2518 "./src/Grammar/grammar.c"
        break;
      case 73: /* expr ::= LPAREN expr RPAREN */
#line 809 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2527 "./src/Grammar/grammar.c"
        break;
      case 74: /* num ::= NUM */
#line 814 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2535 "./src/Grammar/grammar.c"
        break;
      case 75: /* string ::= STRING */
#line 820 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::STRING;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2543 "./src/Grammar/grammar.c"
        break;
      case 76: /* bool ::= BOOLEAN */
#line 827 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::BOOL;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2551 "./src/Grammar/grammar.c"
        break;
      case 77: /* maybe_empty_name_chain ::= name_chain */
#line 838 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yymsp[0].minor.yy0.type = optic::STRING;
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2560 "./src/Grammar/grammar.c"
        break;
      case 78: /* maybe_empty_name_chain ::= pattern */
#line 844 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2568 "./src/Grammar/grammar.c"
        break;
      case 79: /* assignment ::= name_chain maybe_empty_name_chain ASSIGN expr */
      case 80: /* assignment ::= NAME maybe_empty_name_chain ASSIGN expr */ yytestcase(yyruleno==80);
#line 850 "./src/Grammar/grammar.y"
{
    optic::out() << "Pattern assignment" << std::endl;
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2578 "./src/Grammar/grammar.c"
        break;
      case 81: /* pattern ::= LPAREN NAME PREPEND NAME RPAREN */
#line 862 "./src/Grammar/grammar.y"
{
    std::cout << "PATTERN_ARGUMENT" << std::endl;
    yymsp[-3].minor.yy0.type = optic::PATTERN;
    yymsp[-1].minor.yy0.type = optic::PATTERN;
    yygotominor.yy0.type = optic::PATTERN;

  yy_destructor(yypParser,41,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2592 "./src/Grammar/grammar.c"
        break;
      case 82: /* expr ::= expr PREPEND expr */
#line 871 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::prepend,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2605 "./src/Grammar/grammar.c"
        break;
      case 83: /* expr ::= expr APPEND expr */
#line 881 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::append,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2618 "./src/Grammar/grammar.c"
        break;
      case 84: /* expr ::= expr PLUSPLUS expr */
#line 891 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::concat,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,39,&yymsp[-1].minor);
}
#line 2631 "./src/Grammar/grammar.c"
        break;
      case 85: /* expr ::= expr PLUS expr */
#line 901 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::plus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,30,&yymsp[-1].minor);
}
#line 2644 "./src/Grammar/grammar.c"
        break;
      case 86: /* expr ::= expr MINUS expr */
#line 911 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,31,&yymsp[-1].minor);
}
#line 2657 "./src/Grammar/grammar.c"
        break;
      case 87: /* expr ::= expr DIVIDE expr */
#line 921 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::divide);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
#line 2670 "./src/Grammar/grammar.c"
        break;
      case 88: /* expr ::= expr TIMES expr */
#line 931 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::multiply);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
#line 2683 "./src/Grammar/grammar.c"
        break;
      case 89: /* expr ::= expr MODULO expr */
#line 941 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::modulo);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
#line 2696 "./src/Grammar/grammar.c"
        break;
      case 90: /* expr ::= expr POW expr */
#line 951 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_pow);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,35,&yymsp[-1].minor);
}
#line 2709 "./src/Grammar/grammar.c"
        break;
      case 91: /* expr ::= expr EQUALTO expr */
#line 961 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,22,&yymsp[-1].minor);
}
#line 2722 "./src/Grammar/grammar.c"
        break;
      case 92: /* expr ::= expr NOTEQUALTO expr */
#line 971 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::not_equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,23,&yymsp[-1].minor);
}
#line 2735 "./src/Grammar/grammar.c"
        break;
      case 93: /* expr ::= expr LESSTHAN expr */
#line 981 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::less_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 2748 "./src/Grammar/grammar.c"
        break;
      case 94: /* expr ::= expr GREATERTHAN expr */
#line 991 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::greater_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,24,&yymsp[-1].minor);
}
#line 2761 "./src/Grammar/grammar.c"
        break;
      case 95: /* expr ::= expr LORE expr */
#line 1001 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::lore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2774 "./src/Grammar/grammar.c"
        break;
      case 96: /* expr ::= expr GORE expr */
#line 1011 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::gore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,25,&yymsp[-1].minor);
}
#line 2787 "./src/Grammar/grammar.c"
        break;
      case 97: /* expr ::= expr AND expr */
#line 1021 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 2800 "./src/Grammar/grammar.c"
        break;
      case 98: /* expr ::= expr OR expr */
#line 1031 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_or);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2813 "./src/Grammar/grammar.c"
        break;
      case 99: /* expr ::= BITNOT expr */
#line 1041 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&optic::bit_not);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-1].minor);
}
#line 2826 "./src/Grammar/grammar.c"
        break;
      case 100: /* expr ::= LPAREN MINUS expr RPAREN */
#line 1051 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&panopticon::u_minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-3].minor);
  yy_destructor(yypParser,31,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
#line 2841 "./src/Grammar/grammar.c"
        break;
      case 101: /* expr ::= NOT expr */
#line 1061 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&panopticon::not_value);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
#line 2854 "./src/Grammar/grammar.c"
        break;
      case 102: /* expr ::= expr SHIFTL expr */
#line 1071 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_left);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,28,&yymsp[-1].minor);
}
#line 2867 "./src/Grammar/grammar.c"
        break;
      case 103: /* expr ::= expr SHIFTR expr */
#line 1081 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_right);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
#line 2880 "./src/Grammar/grammar.c"
        break;
      case 104: /* expr ::= expr BITAND expr */
#line 1091 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,21,&yymsp[-1].minor);
}
#line 2893 "./src/Grammar/grammar.c"
        break;
      case 105: /* expr ::= expr BITXOR expr */
#line 1101 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_xor);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 2906 "./src/Grammar/grammar.c"
        break;
      case 106: /* array_index ::= function_call LBRAC expr RBRAC */
      case 108: /* array_index ::= array_index LBRAC expr RBRAC */ yytestcase(yyruleno==108);
#line 1111 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2921 "./src/Grammar/grammar.c"
        break;
      case 107: /* array_index ::= NAME LBRAC expr RBRAC */
#line 1121 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2936 "./src/Grammar/grammar.c"
        break;
      case 110: /* array_slice ::= NAME LBRAC PREPEND expr RBRAC */
#line 1154 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-1].minor.yy0,optic::slice_beginning_to,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2946 "./src/Grammar/grammar.c"
        break;
      case 111: /* array_slice ::= NAME LBRAC expr PREPEND RBRAC */
#line 1160 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,optic::slice_to_end,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2956 "./src/Grammar/grammar.c"
        break;
      case 112: /* array_slice ::= NAME LBRAC expr PREPEND expr RBRAC */
#line 1166 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,range,optic::slice,false);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2969 "./src/Grammar/grammar.c"
        break;
      case 113: /* array_slice ::= NAME LBRAC COLONCOLON expr RBRAC */
#line 1177 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-1].minor.yy0,optic::slice_all_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2979 "./src/Grammar/grammar.c"
        break;
      case 114: /* array_slice ::= NAME LBRAC expr COLONCOLON expr RBRAC */
#line 1183 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,range,optic::slice_beginning_to_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2992 "./src/Grammar/grammar.c"
        break;
      case 115: /* array_slice ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC */
#line 1192 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,range,optic::slice_to_end_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3006 "./src/Grammar/grammar.c"
        break;
      case 116: /* array_slice ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC */
#line 1201 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3021 "./src/Grammar/grammar.c"
        break;
      case 117: /* array_slice ::= NAME LBRAC expr PREPEND MODULO RBRAC */
#line 1212 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,optic::slice_beginning_to_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3032 "./src/Grammar/grammar.c"
        break;
      case 118: /* array_slice ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC */
#line 1218 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,optic::slice_to_end_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3044 "./src/Grammar/grammar.c"
        break;
      case 119: /* array_slice ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC */
#line 1224 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_with_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3059 "./src/Grammar/grammar.c"
        break;
      case 120: /* array_slice ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */
#line 1233 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_beginning_to_with_step_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,40,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3074 "./src/Grammar/grammar.c"
        break;
      case 121: /* array_slice ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */
#line 1242 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-8].minor.yy0,range,optic::slice_to_end_with_step_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-7].minor);
  yy_destructor(yypParser,15,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3090 "./src/Grammar/grammar.c"
        break;
      case 122: /* array_slice ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */
#line 1251 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-7].minor.yy0);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-9].minor.yy0,range,optic::slice_with_step_wrapping,false);
  yy_destructor(yypParser,43,&yymsp[-8].minor);
  yy_destructor(yypParser,15,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3107 "./src/Grammar/grammar.c"
        break;
      case 123: /* array_slice ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC */
#line 1261 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,optic::slice_all_with_step,false);
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,40,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3119 "./src/Grammar/grammar.c"
        break;
      case 125: /* expr ::= LBRAC expr RANGE expr RBRAC */
#line 1271 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::range_from_to);
  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,56,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3129 "./src/Grammar/grammar.c"
        break;
      case 126: /* expr ::= LBRAC expr COMMA expr RANGE expr RBRAC */
#line 1276 "./src/Grammar/grammar.y"
{
    optic::object start_step = optic::mem_alloc(optic::ARRAY);
    start_step.data.array->push_back(yymsp[-5].minor.yy0);
    start_step.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,start_step,yymsp[-1].minor.yy0,optic::range_from_step_to,false);
  yy_destructor(yypParser,43,&yymsp[-6].minor);
  yy_destructor(yypParser,10,&yymsp[-4].minor);
  yy_destructor(yypParser,56,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3143 "./src/Grammar/grammar.c"
        break;
      case 127: /* in ::= error */
#line 1289 "./src/Grammar/grammar.y"
{
    switch(yymsp[0].minor.yy189)
    {
    case panopticon::OpenQuoteError:
/*        panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;*/
        break;
    default:
/*        panopticon::out() << "ERROR p0000: UnknownError" << std::endl;*/
        break;
    }
}
#line 3158 "./src/Grammar/grammar.c"
        break;
      case 128: /* error ::= OPENQUOTEERROR */
#line 1302 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy189 = panopticon::OpenQuoteError;
    panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;
}
#line 3167 "./src/Grammar/grammar.c"
        break;
      default:
      /* (0) main ::= in */ yytestcase(yyruleno==0);
      /* (1) in ::= */ yytestcase(yyruleno==1);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 89 "./src/Grammar/grammar.y"

panopticon::out() << "Syntax error!" << std::endl;
#line 3234 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 84 "./src/Grammar/grammar.y"

printf("parsing complete!\n\n\n");
#line 3256 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
