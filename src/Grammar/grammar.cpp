/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 3 "./src/Grammar/grammar.y"

#include <iostream>
#include "../../include/Grammar/tokens.h"
#include "../../include/Grammar/grammar.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
/*#include "lexglobal.h"*/
#include <assert.h>
#include <math.h>
#define BUFS 1024
#include <stdio.h>
#include <string.h>
#include "core/operators.h"
#include "../../include/Grammar/parsingutilities.h"
#include "../../include/core/types.h"
#include "../../include/Grammar/parse.h"
#include "../../include/core/errors.h"
#include "../../include/core/heap.h"
#include "include/core/stack.h"

#undef STRING
#undef NUM
#undef BOOL
#undef panopticon::ARRAY

/*using namespace panopticon;*/

    void token_destructor(Token t)
    {
/*    panopticon::out() << "In token_destructor t.expr= " << t.expr << std::endl;*/
/*    panopticon::out() << "In token_destructor t.n= " << t.n << std::endl;*/
    }
#line 44 "./src/Grammar/grammar.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 92
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy183;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 232
#define YYNRULE 108
#define YYERRORSYMBOL 56
#define YYERRSYMDT yy183
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2088)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    55,   59,  230,   19,  163,  152,  114,  220,    5,   65,
 /*    10 */    25,   52,   51,  229,   36,   37,   32,   33,   43,   42,
 /*    20 */    40,   38,   41,   39,   35,   34,   49,   48,   47,   46,
 /*    30 */    45,   44,   28,   29,   62,   50,   14,   54,    3,  134,
 /*    40 */    49,   48,   47,   46,   45,   44,  161,  218,  206,   50,
 /*    50 */   159,  207,  205,    6,  175,   15,   47,   46,   45,   44,
 /*    60 */     7,   30,   65,   50,   52,   51,  156,   36,   37,   32,
 /*    70 */    33,   43,   42,   40,   38,   41,   39,   35,   34,   49,
 /*    80 */    48,   47,   46,   45,   44,   44,  174,   59,   50,   50,
 /*    90 */   157,  152,  143,  220,   65,   74,   52,   51,  202,   36,
 /*   100 */    37,   32,   33,   43,   42,   40,   38,   41,   39,   35,
 /*   110 */    34,   49,   48,   47,   46,   45,   44,    6,   61,   15,
 /*   120 */    50,  201,  197,   65,  145,   52,   51,   73,   36,   37,
 /*   130 */    32,   33,   43,   42,   40,   38,   41,   39,   35,   34,
 /*   140 */    49,   48,   47,   46,   45,   44,  141,  179,  146,   50,
 /*   150 */    25,  195,   65,   60,   52,   51,  221,   36,   37,   32,
 /*   160 */    33,   43,   42,   40,   38,   41,   39,   35,   34,   49,
 /*   170 */    48,   47,   46,   45,   44,  189,  193,  165,   50,  116,
 /*   180 */   220,   65,  217,   52,   51,  148,   36,   37,   32,   33,
 /*   190 */    43,   42,   40,   38,   41,   39,   35,   34,   49,   48,
 /*   200 */    47,   46,   45,   44,  192,   53,  191,   50,   65,  209,
 /*   210 */    52,   51,  222,   36,   37,   32,   33,   43,   42,   40,
 /*   220 */    38,   41,   39,   35,   34,   49,   48,   47,   46,   45,
 /*   230 */    44,  190,   31,  187,   50,   65,  208,   52,   51,  222,
 /*   240 */    36,   37,   32,   33,   43,   42,   40,   38,   41,   39,
 /*   250 */    35,   34,   49,   48,   47,   46,   45,   44,  222,   26,
 /*   260 */   180,   50,   65,  204,   52,   51,  222,   36,   37,   32,
 /*   270 */    33,   43,   42,   40,   38,   41,   39,   35,   34,   49,
 /*   280 */    48,   47,   46,   45,   44,   24,  169,   58,   50,  341,
 /*   290 */     1,   65,  145,   52,   51,  200,   36,   37,   32,   33,
 /*   300 */    43,   42,   40,   38,   41,   39,   35,   34,   49,   48,
 /*   310 */    47,   46,   45,   44,  136,  179,  196,   50,   21,  121,
 /*   320 */    65,  186,   52,   51,  220,   36,   37,   32,   33,   43,
 /*   330 */    42,   40,   38,   41,   39,   35,   34,   49,   48,   47,
 /*   340 */    46,   45,   44,   23,  120,  139,   50,  119,  138,  220,
 /*   350 */   184,  137,  220,   65,  178,   52,   51,  154,   36,   37,
 /*   360 */    32,   33,   43,   42,   40,   38,   41,   39,   35,   34,
 /*   370 */    49,   48,   47,   46,   45,   44,   20,  118,   65,   50,
 /*   380 */    52,   51,  220,   36,   37,   32,   33,   43,   42,   40,
 /*   390 */    38,   41,   39,   35,   34,   49,   48,   47,   46,   45,
 /*   400 */    44,  188,   18,  181,   50,  176,  220,   17,  220,  170,
 /*   410 */   173,  182,   65,  122,   52,   51,  220,   36,   37,   32,
 /*   420 */    33,   43,   42,   40,   38,   41,   39,   35,   34,   49,
 /*   430 */    48,   47,   46,   45,   44,  135,  143,   65,   50,   52,
 /*   440 */    51,  133,   36,   37,   32,   33,   43,   42,   40,   38,
 /*   450 */    41,   39,   35,   34,   49,   48,   47,   46,   45,   44,
 /*   460 */   125,  117,  342,   50,  168,  342,  342,  342,  342,   65,
 /*   470 */   342,   52,   51,  171,   36,   37,   32,   33,   43,   42,
 /*   480 */    40,   38,   41,   39,   35,   34,   49,   48,   47,   46,
 /*   490 */    45,   44,  194,   52,   51,   50,   36,   37,   32,   33,
 /*   500 */    43,   42,   40,   38,   41,   39,   35,   34,   49,   48,
 /*   510 */    47,   46,   45,   44,   94,  342,  342,   50,  167,  166,
 /*   520 */   228,  227,  226,  225,   64,  164,  342,  131,  177,  115,
 /*   530 */   172,  342,  342,  153,  342,  342,  219,  162,  342,  342,
 /*   540 */   215,  213,  342,  212,  211,  210,   36,   37,   32,   33,
 /*   550 */    43,   42,   40,   38,   41,   39,   35,   34,   49,   48,
 /*   560 */    47,   46,   45,   44,  342,  342,  342,   50,   37,   32,
 /*   570 */    33,   43,   42,   40,   38,   41,   39,   35,   34,   49,
 /*   580 */    48,   47,   46,   45,   44,   94,  342,  342,   50,  342,
 /*   590 */   342,  342,  342,  342,  151,  130,  164,  342,  131,  342,
 /*   600 */   342,  342,  198,   72,   75,  199,  342,  219,  162,   12,
 /*   610 */   149,  215,  213,  342,  212,  211,  210,   32,   33,   43,
 /*   620 */    42,   40,   38,   41,   39,   35,   34,   49,   48,   47,
 /*   630 */    46,   45,   44,  342,  342,  342,   50,   33,   43,   42,
 /*   640 */    40,   38,   41,   39,   35,   34,   49,   48,   47,   46,
 /*   650 */    45,   44,  342,  342,  342,   50,  342,   43,   42,   40,
 /*   660 */    38,   41,   39,   35,   34,   49,   48,   47,   46,   45,
 /*   670 */    44,  232,  342,   57,   50,  342,  342,  163,  342,   63,
 /*   680 */    40,   38,   41,   39,   35,   34,   49,   48,   47,   46,
 /*   690 */    45,   44,  342,  342,  342,   50,   35,   34,   49,   48,
 /*   700 */    47,   46,   45,   44,  342,   28,   29,   50,  342,   14,
 /*   710 */   342,    3,  342,  342,  342,  231,  342,   16,   94,  132,
 /*   720 */   342,  206,   57,  159,  207,  205,  163,  203,  114,  164,
 /*   730 */    11,  131,  342,  342,  342,  342,  342,  342,  342,  342,
 /*   740 */   219,  162,  342,  342,  215,  213,  147,  212,  211,  210,
 /*   750 */   243,  158,  342,   94,   28,   29,  342,  243,   14,  342,
 /*   760 */     3,  160,  203,   57,  164,    8,  131,  163,  342,  114,
 /*   770 */   206,  342,  159,  207,  205,  219,  162,  342,  342,  215,
 /*   780 */   213,  342,  212,  211,  210,   22,  144,    6,  342,   15,
 /*   790 */    27,  342,  183,  342,  342,   28,   29,  342,   57,   14,
 /*   800 */   156,    3,  163,  342,  114,  342,  342,  342,  342,  130,
 /*   810 */   342,  206,  342,  159,  207,  205,  198,   72,   75,  199,
 /*   820 */   142,  342,  140,  342,  342,  342,  342,  342,  342,  342,
 /*   830 */    28,   29,   94,   57,   14,  224,    3,  163,  342,  114,
 /*   840 */   342,  203,  342,  164,   10,  131,  206,  342,  159,  207,
 /*   850 */   205,  342,  342,  138,  219,  162,  342,  342,  215,  213,
 /*   860 */   342,  212,  211,  210,  342,   28,   29,  342,   57,   14,
 /*   870 */   223,    3,  163,  342,  114,  342,  342,  342,    6,  130,
 /*   880 */    15,  206,  342,  159,  207,  205,  198,   67,   75,  199,
 /*   890 */   342,  156,  342,  342,  342,  342,  342,  342,  342,   94,
 /*   900 */    28,   29,  342,   57,   14,  216,    3,  163,  203,  114,
 /*   910 */   164,    9,  131,  342,  342,  342,  206,  342,  159,  207,
 /*   920 */   205,  219,  162,  342,  342,  215,  213,  342,  212,  211,
 /*   930 */   210,  342,  342,  342,  342,   28,   29,  342,   57,   14,
 /*   940 */   185,    3,  163,  342,  114,  342,  342,  342,  342,  130,
 /*   950 */   342,  206,  342,  159,  207,  205,  198,   71,   75,  199,
 /*   960 */   342,  342,  342,  342,  342,  342,  342,  342,  342,   94,
 /*   970 */    28,   29,  342,   57,   14,  187,    3,  163,  150,  113,
 /*   980 */   164,  342,  131,  342,  342,  342,  206,  342,  159,  207,
 /*   990 */   205,  219,  162,  342,  130,  215,  213,  342,  212,  211,
 /*  1000 */   210,  198,   69,   75,  199,   28,   29,  342,   57,   14,
 /*  1010 */   185,    3,  163,  342,  114,  342,  342,  342,  342,  130,
 /*  1020 */   342,  206,  342,  159,  207,  205,  198,   68,   75,  199,
 /*  1030 */   342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
 /*  1040 */    28,   29,  342,  342,   14,  342,    3,  342,  243,  243,
 /*  1050 */   342,  342,  342,   94,  342,  243,  206,  342,  159,  207,
 /*  1060 */   205,    2,  214,  342,  164,  163,  131,  114,   56,  342,
 /*  1070 */   342,  342,  155,  342,  110,  219,  162,  342,  342,  215,
 /*  1080 */   213,  342,  212,  211,  210,    4,  342,   15,  342,  342,
 /*  1090 */   342,  342,  342,   28,   29,  342,  342,   14,  156,    3,
 /*  1100 */    28,   29,  342,  342,   14,  342,    3,  342,  342,  206,
 /*  1110 */   342,  159,  207,  205,   82,  342,  206,  342,  159,  207,
 /*  1120 */   205,  130,  342,  342,  342,  164,  342,  131,  198,   66,
 /*  1130 */    75,  199,  342,  342,  342,  342,  219,  162,   89,  342,
 /*  1140 */   215,  213,  342,  212,  211,  210,  342,  130,  342,  164,
 /*  1150 */   342,  131,  342,  342,  198,   72,   75,  199,  342,   95,
 /*  1160 */   219,  162,  342,  342,  215,  213,  130,  212,  211,  210,
 /*  1170 */   164,  342,  131,  198,   70,   75,  199,  342,  342,  342,
 /*  1180 */   342,  219,  162,   97,  342,  215,  213,  342,  212,  211,
 /*  1190 */   210,  342,  342,  342,  164,  342,  131,  342,  342,  342,
 /*  1200 */   342,  342,  342,  342,  342,  219,  162,   96,  342,  215,
 /*  1210 */   213,  342,  212,  211,  210,  342,  342,  342,  164,  342,
 /*  1220 */   131,  342,  342,  342,  342,  342,  342,  342,  112,  219,
 /*  1230 */   162,  342,  342,  215,  213,  342,  212,  211,  210,  164,
 /*  1240 */   342,  131,  342,  342,  342,  342,  342,  342,  342,  342,
 /*  1250 */   219,  162,  111,  342,  215,  213,  342,  212,  211,  210,
 /*  1260 */   342,  342,  342,  164,  342,  131,  342,  342,  342,  342,
 /*  1270 */   342,  342,  342,  342,  219,  162,  129,  342,  215,  213,
 /*  1280 */   342,  212,  211,  210,  342,  342,  342,  164,  342,  131,
 /*  1290 */   342,  342,  342,  342,  342,  342,  342,  128,  219,  162,
 /*  1300 */   342,  342,  215,  213,  342,  212,  211,  210,  164,  342,
 /*  1310 */   131,  342,  342,  342,  342,  342,  342,  342,  342,  219,
 /*  1320 */   162,  127,  342,  215,  213,  342,  212,  211,  210,  342,
 /*  1330 */   342,  342,  164,  342,  131,  342,  342,  342,  342,  342,
 /*  1340 */   342,  342,  342,  219,  162,  126,  342,  215,  213,  342,
 /*  1350 */   212,  211,  210,  342,  342,  342,  164,  342,  131,  342,
 /*  1360 */   342,  342,  342,  342,  342,  342,  103,  219,  162,  342,
 /*  1370 */   342,  215,  213,  342,  212,  211,  210,  164,  342,  131,
 /*  1380 */   342,  342,  342,  342,  342,  342,  342,  342,  219,  162,
 /*  1390 */   102,  342,  215,  213,  342,  212,  211,  210,  342,  342,
 /*  1400 */   342,  164,  342,  131,  342,  342,  342,  342,  342,  342,
 /*  1410 */   342,  342,  219,  162,  107,  342,  215,  213,  342,  212,
 /*  1420 */   211,  210,  342,  342,  342,  164,  342,  131,  342,  342,
 /*  1430 */   342,  342,  342,  342,  342,  106,  219,  162,  342,  342,
 /*  1440 */   215,  213,  342,  212,  211,  210,  164,  342,  131,  342,
 /*  1450 */   342,  342,  342,  342,  342,  342,  342,  219,  162,  105,
 /*  1460 */   342,  215,  213,  342,  212,  211,  210,  342,  342,  342,
 /*  1470 */   164,  342,  131,  342,  342,  342,  342,  342,  342,  342,
 /*  1480 */   342,  219,  162,  104,  342,  215,  213,  342,  212,  211,
 /*  1490 */   210,  342,  342,  342,  164,  342,  131,  342,  342,  342,
 /*  1500 */   342,  342,  342,  342,   99,  219,  162,  342,  342,  215,
 /*  1510 */   213,  342,  212,  211,  210,  164,  342,  131,  342,  342,
 /*  1520 */   342,  342,  342,  342,  342,  342,  219,  162,   98,  342,
 /*  1530 */   215,  213,  342,  212,  211,  210,  342,  342,  342,  164,
 /*  1540 */   342,  131,  342,  342,  342,  342,  342,  342,  342,  342,
 /*  1550 */   219,  162,  109,  342,  215,  213,  342,  212,  211,  210,
 /*  1560 */   342,  342,  342,  164,  342,  131,  342,  342,  342,  342,
 /*  1570 */   342,  342,  342,  108,  219,  162,  342,  342,  215,  213,
 /*  1580 */   342,  212,  211,  210,  164,  342,  131,  342,  342,  342,
 /*  1590 */   342,  342,  342,  342,  342,  219,  162,  101,  342,  215,
 /*  1600 */   213,  342,  212,  211,  210,  342,  342,  342,  164,  342,
 /*  1610 */   131,  342,  342,  342,  342,  342,  342,  342,  342,  219,
 /*  1620 */   162,  100,  342,  215,  213,  342,  212,  211,  210,  342,
 /*  1630 */   342,  342,  164,  342,  131,  342,  342,  342,  342,  342,
 /*  1640 */   342,  342,   93,  219,  162,  342,  342,  215,  213,  342,
 /*  1650 */   212,  211,  210,  164,  342,  131,  342,  342,  342,  342,
 /*  1660 */   342,  342,  342,  342,  219,  162,   87,  342,  215,  213,
 /*  1670 */   342,  212,  211,  210,  342,  342,  342,  164,  342,  131,
 /*  1680 */   342,  342,  342,  342,  342,  342,  342,  342,  219,  162,
 /*  1690 */   124,  342,  215,  213,  342,  212,  211,  210,  342,  342,
 /*  1700 */   342,  164,  342,  131,  342,  342,  342,  342,  342,  342,
 /*  1710 */   342,  123,  219,  162,  342,  342,  215,  213,  342,  212,
 /*  1720 */   211,  210,  164,  342,  131,  342,  342,  342,  342,  342,
 /*  1730 */   342,  342,  342,  219,  162,   85,  342,  215,  213,  342,
 /*  1740 */   212,  211,  210,  342,  342,  342,  164,  342,  131,  342,
 /*  1750 */   342,  342,  342,  342,  342,  342,  342,  219,  162,   84,
 /*  1760 */   342,  215,  213,  342,  212,  211,  210,  342,  342,  342,
 /*  1770 */   164,  342,  131,  342,  342,  342,  342,  342,  342,  342,
 /*  1780 */    83,  219,  162,  342,  342,  215,  213,  342,  212,  211,
 /*  1790 */   210,  164,  342,  131,  342,  342,  342,  342,  342,  342,
 /*  1800 */   342,  342,  219,  162,   81,  342,  215,  213,  342,  212,
 /*  1810 */   211,  210,  342,  342,  342,  164,  342,  131,  342,  342,
 /*  1820 */   342,  342,  342,  342,  342,  342,  219,  162,   80,  342,
 /*  1830 */   215,  213,  342,  212,  211,  210,  342,  342,  342,  164,
 /*  1840 */   342,  131,  342,  342,  342,  342,  342,  342,  342,   13,
 /*  1850 */   219,  162,  342,  342,  215,  213,  342,  212,  211,  210,
 /*  1860 */   164,  342,  131,  342,  342,  342,  342,  342,  342,  342,
 /*  1870 */   342,  219,  162,   91,  342,  215,  213,  342,  212,  211,
 /*  1880 */   210,  342,  342,  342,  164,  342,  131,  342,  342,  342,
 /*  1890 */   342,  342,  342,  342,  342,  219,  162,   90,  342,  215,
 /*  1900 */   213,  342,  212,  211,  210,  342,  342,  342,  164,  342,
 /*  1910 */   131,  342,  342,  342,  342,  342,  342,  342,   79,  219,
 /*  1920 */   162,  342,  342,  215,  213,  342,  212,  211,  210,  164,
 /*  1930 */   342,  131,  342,  342,  342,  342,  342,  342,  342,  342,
 /*  1940 */   219,  162,   77,  342,  215,  213,  342,  212,  211,  210,
 /*  1950 */   342,  342,  342,  164,  342,  131,  342,  342,  342,  342,
 /*  1960 */   342,  342,  342,  342,  219,  162,   76,  342,  215,  213,
 /*  1970 */   342,  212,  211,  210,  342,  342,  342,  164,  342,  131,
 /*  1980 */   342,  342,  342,  342,  342,  342,  342,   78,  219,  162,
 /*  1990 */   342,  342,  215,  213,  342,  212,  211,  210,  164,  342,
 /*  2000 */   131,  342,  342,  342,  342,  342,  342,  342,  342,  219,
 /*  2010 */   162,   88,  342,  215,  213,  342,  212,  211,  210,  342,
 /*  2020 */   342,  342,  164,  342,  131,  342,  342,  342,  342,  342,
 /*  2030 */   342,  342,  342,  219,  162,   86,  342,  215,  213,  342,
 /*  2040 */   212,  211,  210,  342,  342,  342,  164,  342,  131,  342,
 /*  2050 */   342,  342,  342,  342,  342,  342,   92,  219,  162,  342,
 /*  2060 */   342,  215,  213,  342,  212,  211,  210,  164,  342,  131,
 /*  2070 */   342,  342,  342,  342,  342,  342,  342,  342,  219,  162,
 /*  2080 */   342,  342,  215,  213,  342,  212,  211,  210,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     2,    2,   44,    9,    6,    6,    8,    8,   38,   11,
 /*    10 */    40,   13,   14,   44,   16,   17,   18,   19,   20,   21,
 /*    20 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*    30 */    32,   33,   34,   35,    2,   37,   38,   40,   40,   45,
 /*    40 */    28,   29,   30,   31,   32,   33,   51,    8,   50,   37,
 /*    50 */    52,   53,   54,   38,    3,   40,   30,   31,   32,   33,
 /*    60 */    38,   38,   11,   37,   13,   14,   51,   16,   17,   18,
 /*    70 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*    80 */    29,   30,   31,   32,   33,   33,    3,    2,   37,   37,
 /*    90 */    50,    6,    7,    8,   11,   44,   13,   14,    3,   16,
 /*   100 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   110 */    27,   28,   29,   30,   31,   32,   33,   38,    2,   40,
 /*   120 */    37,    8,    3,   11,   67,   13,   14,   44,   16,   17,
 /*   130 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   140 */    28,   29,   30,   31,   32,   33,   89,   90,   38,   37,
 /*   150 */    40,    3,   11,    2,   13,   14,   44,   16,   17,   18,
 /*   160 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   170 */    29,   30,   31,   32,   33,    3,   44,   68,   37,   70,
 /*   180 */     8,   11,   41,   13,   14,    3,   16,   17,   18,   19,
 /*   190 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   200 */    30,   31,   32,   33,   44,    1,   41,   37,   11,   39,
 /*   210 */    13,   14,    8,   16,   17,   18,   19,   20,   21,   22,
 /*   220 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   230 */    33,   41,    1,   39,   37,   11,   39,   13,   14,    8,
 /*   240 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   250 */    26,   27,   28,   29,   30,   31,   32,   33,    8,    1,
 /*   260 */     3,   37,   11,   39,   13,   14,    8,   16,   17,   18,
 /*   270 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   280 */    29,   30,   31,   32,   33,    9,   56,    2,   37,   59,
 /*   290 */    60,   11,   67,   13,   14,   44,   16,   17,   18,   19,
 /*   300 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   310 */    30,   31,   32,   33,   89,   90,    3,   37,    1,    3,
 /*   320 */    11,   41,   13,   14,    8,   16,   17,   18,   19,   20,
 /*   330 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   340 */    31,   32,   33,    1,    3,    8,   37,    3,   13,    8,
 /*   350 */    41,    8,    8,   11,   39,   13,   14,   44,   16,   17,
 /*   360 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   370 */    28,   29,   30,   31,   32,   33,    1,    3,   11,   37,
 /*   380 */    13,   14,    8,   16,   17,   18,   19,   20,   21,   22,
 /*   390 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   400 */    33,    3,    1,    3,   37,    3,    8,    1,    8,   49,
 /*   410 */     3,   44,   11,   67,   13,   14,    8,   16,   17,   18,
 /*   420 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   430 */    29,   30,   31,   32,   33,   78,    7,   11,   37,   13,
 /*   440 */    14,   78,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   450 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   460 */    67,    8,   91,   37,   55,   91,   91,   91,   91,   11,
 /*   470 */    91,   13,   14,   47,   16,   17,   18,   19,   20,   21,
 /*   480 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   490 */    32,   33,    3,   13,   14,   37,   16,   17,   18,   19,
 /*   500 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   510 */    30,   31,   32,   33,   57,   91,   91,   37,   61,   62,
 /*   520 */    63,   64,   65,   66,   67,   68,   91,   70,   71,   72,
 /*   530 */    73,   91,   91,   44,   91,   91,   79,   80,   91,   91,
 /*   540 */    83,   84,   91,   86,   87,   88,   16,   17,   18,   19,
 /*   550 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   560 */    30,   31,   32,   33,   91,   91,   91,   37,   17,   18,
 /*   570 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   580 */    29,   30,   31,   32,   33,   57,   91,   91,   37,   91,
 /*   590 */    91,   91,   91,   91,   66,   67,   68,   91,   70,   91,
 /*   600 */    91,   91,   74,   75,   76,   77,   91,   79,   80,   81,
 /*   610 */    82,   83,   84,   91,   86,   87,   88,   18,   19,   20,
 /*   620 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   630 */    31,   32,   33,   91,   91,   91,   37,   19,   20,   21,
 /*   640 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   650 */    32,   33,   91,   91,   91,   37,   91,   20,   21,   22,
 /*   660 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   670 */    33,    0,   91,    2,   37,   91,   91,    6,   91,    8,
 /*   680 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   690 */    32,   33,   91,   91,   91,   37,   26,   27,   28,   29,
 /*   700 */    30,   31,   32,   33,   91,   34,   35,   37,   91,   38,
 /*   710 */    91,   40,   91,   91,   91,   44,   91,   46,   57,   48,
 /*   720 */    91,   50,    2,   52,   53,   54,    6,   66,    8,   68,
 /*   730 */    69,   70,   91,   91,   91,   91,   91,   91,   91,   91,
 /*   740 */    79,   80,   91,   91,   83,   84,   85,   86,   87,   88,
 /*   750 */     1,    2,   91,   57,   34,   35,   91,    8,   38,   91,
 /*   760 */    40,   41,   66,    2,   68,   69,   70,    6,   91,    8,
 /*   770 */    50,   91,   52,   53,   54,   79,   80,   91,   91,   83,
 /*   780 */    84,   91,   86,   87,   88,    1,    2,   38,   91,   40,
 /*   790 */    29,   91,    8,   91,   91,   34,   35,   91,    2,   38,
 /*   800 */    51,   40,    6,   91,    8,   91,   91,   91,   91,   67,
 /*   810 */    91,   50,   91,   52,   53,   54,   74,   75,   76,   77,
 /*   820 */    78,   91,   38,   91,   91,   91,   91,   91,   91,   91,
 /*   830 */    34,   35,   57,    2,   38,   39,   40,    6,   91,    8,
 /*   840 */    91,   66,   91,   68,   69,   70,   50,   91,   52,   53,
 /*   850 */    54,   91,   91,   13,   79,   80,   91,   91,   83,   84,
 /*   860 */    91,   86,   87,   88,   91,   34,   35,   91,    2,   38,
 /*   870 */    39,   40,    6,   91,    8,   91,   91,   91,   38,   67,
 /*   880 */    40,   50,   91,   52,   53,   54,   74,   75,   76,   77,
 /*   890 */    91,   51,   91,   91,   91,   91,   91,   91,   91,   57,
 /*   900 */    34,   35,   91,    2,   38,   39,   40,    6,   66,    8,
 /*   910 */    68,   69,   70,   91,   91,   91,   50,   91,   52,   53,
 /*   920 */    54,   79,   80,   91,   91,   83,   84,   91,   86,   87,
 /*   930 */    88,   91,   91,   91,   91,   34,   35,   91,    2,   38,
 /*   940 */    39,   40,    6,   91,    8,   91,   91,   91,   91,   67,
 /*   950 */    91,   50,   91,   52,   53,   54,   74,   75,   76,   77,
 /*   960 */    91,   91,   91,   91,   91,   91,   91,   91,   91,   57,
 /*   970 */    34,   35,   91,    2,   38,   39,   40,    6,   66,    8,
 /*   980 */    68,   91,   70,   91,   91,   91,   50,   91,   52,   53,
 /*   990 */    54,   79,   80,   91,   67,   83,   84,   91,   86,   87,
 /*  1000 */    88,   74,   75,   76,   77,   34,   35,   91,    2,   38,
 /*  1010 */    39,   40,    6,   91,    8,   91,   91,   91,   91,   67,
 /*  1020 */    91,   50,   91,   52,   53,   54,   74,   75,   76,   77,
 /*  1030 */    91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
 /*  1040 */    34,   35,   91,   91,   38,   91,   40,   91,    1,    2,
 /*  1050 */    91,   91,   91,   57,   91,    8,   50,   91,   52,   53,
 /*  1060 */    54,    2,   66,   91,   68,    6,   70,    8,    2,   91,
 /*  1070 */    91,   91,    6,   91,    8,   79,   80,   91,   91,   83,
 /*  1080 */    84,   91,   86,   87,   88,   38,   91,   40,   91,   91,
 /*  1090 */    91,   91,   91,   34,   35,   91,   91,   38,   51,   40,
 /*  1100 */    34,   35,   91,   91,   38,   91,   40,   91,   91,   50,
 /*  1110 */    91,   52,   53,   54,   57,   91,   50,   91,   52,   53,
 /*  1120 */    54,   67,   91,   91,   91,   68,   91,   70,   74,   75,
 /*  1130 */    76,   77,   91,   91,   91,   91,   79,   80,   57,   91,
 /*  1140 */    83,   84,   91,   86,   87,   88,   91,   67,   91,   68,
 /*  1150 */    91,   70,   91,   91,   74,   75,   76,   77,   91,   57,
 /*  1160 */    79,   80,   91,   91,   83,   84,   67,   86,   87,   88,
 /*  1170 */    68,   91,   70,   74,   75,   76,   77,   91,   91,   91,
 /*  1180 */    91,   79,   80,   57,   91,   83,   84,   91,   86,   87,
 /*  1190 */    88,   91,   91,   91,   68,   91,   70,   91,   91,   91,
 /*  1200 */    91,   91,   91,   91,   91,   79,   80,   57,   91,   83,
 /*  1210 */    84,   91,   86,   87,   88,   91,   91,   91,   68,   91,
 /*  1220 */    70,   91,   91,   91,   91,   91,   91,   91,   57,   79,
 /*  1230 */    80,   91,   91,   83,   84,   91,   86,   87,   88,   68,
 /*  1240 */    91,   70,   91,   91,   91,   91,   91,   91,   91,   91,
 /*  1250 */    79,   80,   57,   91,   83,   84,   91,   86,   87,   88,
 /*  1260 */    91,   91,   91,   68,   91,   70,   91,   91,   91,   91,
 /*  1270 */    91,   91,   91,   91,   79,   80,   57,   91,   83,   84,
 /*  1280 */    91,   86,   87,   88,   91,   91,   91,   68,   91,   70,
 /*  1290 */    91,   91,   91,   91,   91,   91,   91,   57,   79,   80,
 /*  1300 */    91,   91,   83,   84,   91,   86,   87,   88,   68,   91,
 /*  1310 */    70,   91,   91,   91,   91,   91,   91,   91,   91,   79,
 /*  1320 */    80,   57,   91,   83,   84,   91,   86,   87,   88,   91,
 /*  1330 */    91,   91,   68,   91,   70,   91,   91,   91,   91,   91,
 /*  1340 */    91,   91,   91,   79,   80,   57,   91,   83,   84,   91,
 /*  1350 */    86,   87,   88,   91,   91,   91,   68,   91,   70,   91,
 /*  1360 */    91,   91,   91,   91,   91,   91,   57,   79,   80,   91,
 /*  1370 */    91,   83,   84,   91,   86,   87,   88,   68,   91,   70,
 /*  1380 */    91,   91,   91,   91,   91,   91,   91,   91,   79,   80,
 /*  1390 */    57,   91,   83,   84,   91,   86,   87,   88,   91,   91,
 /*  1400 */    91,   68,   91,   70,   91,   91,   91,   91,   91,   91,
 /*  1410 */    91,   91,   79,   80,   57,   91,   83,   84,   91,   86,
 /*  1420 */    87,   88,   91,   91,   91,   68,   91,   70,   91,   91,
 /*  1430 */    91,   91,   91,   91,   91,   57,   79,   80,   91,   91,
 /*  1440 */    83,   84,   91,   86,   87,   88,   68,   91,   70,   91,
 /*  1450 */    91,   91,   91,   91,   91,   91,   91,   79,   80,   57,
 /*  1460 */    91,   83,   84,   91,   86,   87,   88,   91,   91,   91,
 /*  1470 */    68,   91,   70,   91,   91,   91,   91,   91,   91,   91,
 /*  1480 */    91,   79,   80,   57,   91,   83,   84,   91,   86,   87,
 /*  1490 */    88,   91,   91,   91,   68,   91,   70,   91,   91,   91,
 /*  1500 */    91,   91,   91,   91,   57,   79,   80,   91,   91,   83,
 /*  1510 */    84,   91,   86,   87,   88,   68,   91,   70,   91,   91,
 /*  1520 */    91,   91,   91,   91,   91,   91,   79,   80,   57,   91,
 /*  1530 */    83,   84,   91,   86,   87,   88,   91,   91,   91,   68,
 /*  1540 */    91,   70,   91,   91,   91,   91,   91,   91,   91,   91,
 /*  1550 */    79,   80,   57,   91,   83,   84,   91,   86,   87,   88,
 /*  1560 */    91,   91,   91,   68,   91,   70,   91,   91,   91,   91,
 /*  1570 */    91,   91,   91,   57,   79,   80,   91,   91,   83,   84,
 /*  1580 */    91,   86,   87,   88,   68,   91,   70,   91,   91,   91,
 /*  1590 */    91,   91,   91,   91,   91,   79,   80,   57,   91,   83,
 /*  1600 */    84,   91,   86,   87,   88,   91,   91,   91,   68,   91,
 /*  1610 */    70,   91,   91,   91,   91,   91,   91,   91,   91,   79,
 /*  1620 */    80,   57,   91,   83,   84,   91,   86,   87,   88,   91,
 /*  1630 */    91,   91,   68,   91,   70,   91,   91,   91,   91,   91,
 /*  1640 */    91,   91,   57,   79,   80,   91,   91,   83,   84,   91,
 /*  1650 */    86,   87,   88,   68,   91,   70,   91,   91,   91,   91,
 /*  1660 */    91,   91,   91,   91,   79,   80,   57,   91,   83,   84,
 /*  1670 */    91,   86,   87,   88,   91,   91,   91,   68,   91,   70,
 /*  1680 */    91,   91,   91,   91,   91,   91,   91,   91,   79,   80,
 /*  1690 */    57,   91,   83,   84,   91,   86,   87,   88,   91,   91,
 /*  1700 */    91,   68,   91,   70,   91,   91,   91,   91,   91,   91,
 /*  1710 */    91,   57,   79,   80,   91,   91,   83,   84,   91,   86,
 /*  1720 */    87,   88,   68,   91,   70,   91,   91,   91,   91,   91,
 /*  1730 */    91,   91,   91,   79,   80,   57,   91,   83,   84,   91,
 /*  1740 */    86,   87,   88,   91,   91,   91,   68,   91,   70,   91,
 /*  1750 */    91,   91,   91,   91,   91,   91,   91,   79,   80,   57,
 /*  1760 */    91,   83,   84,   91,   86,   87,   88,   91,   91,   91,
 /*  1770 */    68,   91,   70,   91,   91,   91,   91,   91,   91,   91,
 /*  1780 */    57,   79,   80,   91,   91,   83,   84,   91,   86,   87,
 /*  1790 */    88,   68,   91,   70,   91,   91,   91,   91,   91,   91,
 /*  1800 */    91,   91,   79,   80,   57,   91,   83,   84,   91,   86,
 /*  1810 */    87,   88,   91,   91,   91,   68,   91,   70,   91,   91,
 /*  1820 */    91,   91,   91,   91,   91,   91,   79,   80,   57,   91,
 /*  1830 */    83,   84,   91,   86,   87,   88,   91,   91,   91,   68,
 /*  1840 */    91,   70,   91,   91,   91,   91,   91,   91,   91,   57,
 /*  1850 */    79,   80,   91,   91,   83,   84,   91,   86,   87,   88,
 /*  1860 */    68,   91,   70,   91,   91,   91,   91,   91,   91,   91,
 /*  1870 */    91,   79,   80,   57,   91,   83,   84,   91,   86,   87,
 /*  1880 */    88,   91,   91,   91,   68,   91,   70,   91,   91,   91,
 /*  1890 */    91,   91,   91,   91,   91,   79,   80,   57,   91,   83,
 /*  1900 */    84,   91,   86,   87,   88,   91,   91,   91,   68,   91,
 /*  1910 */    70,   91,   91,   91,   91,   91,   91,   91,   57,   79,
 /*  1920 */    80,   91,   91,   83,   84,   91,   86,   87,   88,   68,
 /*  1930 */    91,   70,   91,   91,   91,   91,   91,   91,   91,   91,
 /*  1940 */    79,   80,   57,   91,   83,   84,   91,   86,   87,   88,
 /*  1950 */    91,   91,   91,   68,   91,   70,   91,   91,   91,   91,
 /*  1960 */    91,   91,   91,   91,   79,   80,   57,   91,   83,   84,
 /*  1970 */    91,   86,   87,   88,   91,   91,   91,   68,   91,   70,
 /*  1980 */    91,   91,   91,   91,   91,   91,   91,   57,   79,   80,
 /*  1990 */    91,   91,   83,   84,   91,   86,   87,   88,   68,   91,
 /*  2000 */    70,   91,   91,   91,   91,   91,   91,   91,   91,   79,
 /*  2010 */    80,   57,   91,   83,   84,   91,   86,   87,   88,   91,
 /*  2020 */    91,   91,   68,   91,   70,   91,   91,   91,   91,   91,
 /*  2030 */    91,   91,   91,   79,   80,   57,   91,   83,   84,   91,
 /*  2040 */    86,   87,   88,   91,   91,   91,   68,   91,   70,   91,
 /*  2050 */    91,   91,   91,   91,   91,   91,   57,   79,   80,   91,
 /*  2060 */    91,   83,   84,   91,   86,   87,   88,   68,   91,   70,
 /*  2070 */    91,   91,   91,   91,   91,   91,   91,   91,   79,   80,
 /*  2080 */    91,   91,   83,   84,   91,   86,   87,   88,
};
#define YY_SHIFT_USE_DFLT (-43)
#define YY_SHIFT_COUNT (167)
#define YY_SHIFT_MIN   (-42)
#define YY_SHIFT_MAX   (1066)
static const short yy_shift_ofst[] = {
 /*     0 */   409,  671, 1066, 1059,  971,  936,  901, 1006,  866,  831,
 /*    10 */   796, 1006, 1006,   -2,  761,  720, 1006, 1006, 1006, 1006,
 /*    20 */  1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
 /*    30 */  1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
 /*    40 */  1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
 /*    50 */  1006, 1006, 1006, 1006, 1006,   85,   -1,   -1,  408,  408,
 /*    60 */   408,  408,  408, 1047,  784,  453,  400,  398,  374,  344,
 /*    70 */   341,  316,  172,  429,  429,  408,   83,   51,  426,  401,
 /*    80 */   367,  342,  309,  280,  251,  224,  197,  170,  141,  112,
 /*    90 */   458,  458,  458,  458,  458,  480,  530,  530,  551,  599,
 /*   100 */   618,  637,  658,  658,  670,  670,  670,  670,   12,   12,
 /*   110 */   749,   26,   26,  840,   15,   -6,  110,   79,  489,  313,
 /*   120 */   489,  313,  258,   52,   52,  231,   52,   52,   52,   52,
 /*   130 */   204,  -30,  360,  407,  406,  402,  375,  315,  343,  335,
 /*   140 */   337,  317,  257,  285,  276,  250,  194,  190,  165,  182,
 /*   150 */   160,  132,  151,  148,  119,  116,  113,   95,   40,   23,
 /*   160 */    22,   39,   -5,   32,   -3,   -3,  -31,  -42,
};
#define YY_REDUCE_USE_DFLT (-1)
#define YY_REDUCE_COUNT (75)
#define YY_REDUCE_MIN   (0)
#define YY_REDUCE_MAX   (1999)
static const short yy_reduce_ofst[] = {
 /*     0 */   230,  457,  528,  661,  775,  842,  775,  696,  996,  996,
 /*    10 */   996,  996,  912, 1999, 1978, 1954, 1930, 1909, 1885, 1861,
 /*    20 */  1840, 1816, 1792, 1771, 1747, 1723, 1702, 1678, 1654, 1633,
 /*    30 */  1609, 1585, 1564, 1540, 1516, 1495, 1471, 1447, 1426, 1402,
 /*    40 */  1378, 1357, 1333, 1309, 1288, 1264, 1240, 1219, 1195, 1171,
 /*    50 */  1150, 1126, 1102, 1081, 1057,  742, 1099, 1080, 1054,  952,
 /*    60 */   927,  882,  812,  225,   57,  109,  393,  393,  393,  393,
 /*    70 */   393,  393,  393,  363,  357,  346,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   233,  340,  340,  295,  340,  340,  340,  340,  340,  340,
 /*    10 */   340,  296,  340,  259,  340,  340,  340,  340,  340,  340,
 /*    20 */   340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
 /*    30 */   340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
 /*    40 */   340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
 /*    50 */   340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
 /*    60 */   340,  340,  340,  244,  340,  340,  340,  340,  340,  340,
 /*    70 */   340,  340,  340,  340,  255,  265,  340,  340,  340,  340,
 /*    80 */   340,  340,  340,  340,  264,  340,  340,  340,  340,  260,
 /*    90 */   308,  307,  269,  261,  241,  310,  312,  311,  326,  325,
 /*   100 */   333,  332,  320,  319,  324,  323,  322,  321,  331,  330,
 /*   110 */   244,  314,  313,  244,  244,  340,  340,  246,  340,  340,
 /*   120 */   278,  275,  340,  329,  327,  340,  318,  317,  316,  315,
 /*   130 */   340,  337,  340,  340,  340,  340,  340,  340,  340,  340,
 /*   140 */   340,  340,  340,  340,  340,  305,  340,  340,  340,  340,
 /*   150 */   288,  340,  340,  340,  340,  340,  340,  340,  340,  340,
 /*   160 */   340,  340,  285,  340,  252,  245,  340,  340,  339,  338,
 /*   170 */   274,  273,  258,  272,  257,  256,  271,  253,  309,  306,
 /*   180 */   270,  268,  254,  242,  334,  250,  336,  251,  275,  278,
 /*   190 */   294,  289,  287,  286,  280,  279,  277,  276,  267,  266,
 /*   200 */   263,  283,  282,  291,  328,  304,  303,  302,  301,  300,
 /*   210 */   299,  298,  297,  293,  292,  290,  248,  335,  284,  281,
 /*   220 */   243,  262,  242,  249,  247,  240,  239,  238,  237,  236,
 /*   230 */   235,  234,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSIGN",        "LCURL",         "RCURL",       
  "COLON",         "DICTIONARY",    "DICT",          "WHERE",       
  "NAME",          "BITOR",         "FUNCTION_DEC",  "COMPOSITION", 
  "FUNCTION_CALL",  "PREPEND",       "APPEND",        "INDEX",       
  "OR",            "AND",           "BITXOR",        "BITAND",      
  "EQUALTO",       "NOTEQUALTO",    "GREATERTHAN",   "GORE",        
  "LESSTHAN",      "LORE",          "SHIFTL",        "SHIFTR",      
  "PLUS",          "MINUS",         "DIVIDE",        "TIMES",       
  "MODULO",        "POW",           "NOT",           "BITNOT",      
  "UMINUS",        "PLUSPLUS",      "LPAREN",        "RPAREN",      
  "LBRAC",         "RBRAC",         "COMMA",         "COLLECTARRAY",
  "DELIMITER",     "WILDCARD",      "CASE",          "OF",          
  "LET",           "IN",            "STRING",        "COLONCOLON",  
  "PRINT",         "NUM",           "BOOLEAN",       "OPENQUOTEERROR",
  "error",         "expr",          "id",            "main",        
  "in",            "start",         "test",          "spec",        
  "assignment",    "top_stmt",      "stmt",          "name_chain",  
  "function_call",  "stmt_list",     "array_index",   "case_statement",
  "guard_statement",  "final_guard_statement",  "horizontal_assignment_list",  "assignment_list",
  "vertical_assignment_list",  "final_vertical_assignment_list",  "where",         "dict",        
  "name_space",    "vert_stmt_list",  "final_vert_stmt_list",  "vertical_array",
  "array",         "maybe_empty_stmt_list",  "num",           "string",      
  "bool",          "maybe_empty_name_chain",  "pattern",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "main ::= in",
 /*   1 */ "in ::=",
 /*   2 */ "in ::= in DELIMITER",
 /*   3 */ "in ::= in start DELIMITER",
 /*   4 */ "in ::= in test DELIMITER",
 /*   5 */ "start ::= spec",
 /*   6 */ "spec ::= assignment",
 /*   7 */ "spec ::= top_stmt",
 /*   8 */ "top_stmt ::= stmt",
 /*   9 */ "stmt ::= expr",
 /*  10 */ "name_chain ::= name_chain NAME",
 /*  11 */ "name_chain ::= NAME",
 /*  12 */ "expr ::= NAME",
 /*  13 */ "expr ::= expr COMPOSITION function_call",
 /*  14 */ "expr ::= expr COMPOSITION NAME",
 /*  15 */ "function_call ::= NAME LPAREN stmt_list RPAREN",
 /*  16 */ "function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  17 */ "expr ::= array_index LPAREN stmt_list RPAREN",
 /*  18 */ "function_call ::= NAME LPAREN RPAREN",
 /*  19 */ "function_call ::= array_index LPAREN RPAREN",
 /*  20 */ "expr ::= function_call",
 /*  21 */ "test ::= case_statement",
 /*  22 */ "guard_statement ::= name_chain LCURL BITOR expr ASSIGN expr DELIMITER",
 /*  23 */ "guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER",
 /*  24 */ "final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCURL",
 /*  25 */ "final_guard_statement ::= guard_statement WILDCARD ASSIGN expr RCURL",
 /*  26 */ "assignment ::= final_guard_statement",
 /*  27 */ "assignment ::= name_chain ASSIGN expr",
 /*  28 */ "horizontal_assignment_list ::= name_chain ASSIGN expr",
 /*  29 */ "horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr",
 /*  30 */ "vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER",
 /*  31 */ "vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER",
 /*  32 */ "final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr",
 /*  33 */ "assignment_list ::= vertical_assignment_list",
 /*  34 */ "assignment_list ::= final_vertical_assignment_list",
 /*  35 */ "assignment_list ::= horizontal_assignment_list",
 /*  36 */ "where ::= WHERE LCURL assignment_list RCURL",
 /*  37 */ "assignment ::= name_chain ASSIGN expr expr",
 /*  38 */ "assignment ::= name_chain ASSIGN expr LCURL where RCURL",
 /*  39 */ "assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCURL",
 /*  40 */ "assignment ::= guard_statement WILDCARD ASSIGN expr DELIMITER where RCURL",
 /*  41 */ "case_statement ::= CASE expr OF",
 /*  42 */ "test ::= LET IN",
 /*  43 */ "dict ::= DICT LCURL assignment_list RCURL",
 /*  44 */ "dict ::= LCURL DICT LCURL assignment_list RCURL DELIMITER RCURL",
 /*  45 */ "dict ::= LCURL DICT LCURL assignment_list RCURL RCURL",
 /*  46 */ "dict ::= LCURL assignment_list RCURL",
 /*  47 */ "dict ::= LCURL LCURL assignment_list RCURL DELIMITER RCURL",
 /*  48 */ "dict ::= LCURL LCURL assignment_list RCURL RCURL",
 /*  49 */ "expr ::= dict",
 /*  50 */ "expr ::= NAME LCURL STRING RCURL",
 /*  51 */ "name_space ::= NAME COLONCOLON NAME",
 /*  52 */ "name_space ::= name_space COLONCOLON NAME",
 /*  53 */ "expr ::= name_space",
 /*  54 */ "vert_stmt_list ::= stmt DELIMITER",
 /*  55 */ "vert_stmt_list ::= vert_stmt_list stmt DELIMITER",
 /*  56 */ "final_vert_stmt_list ::= vert_stmt_list stmt",
 /*  57 */ "vertical_array ::= LBRAC LCURL final_vert_stmt_list RCURL RBRAC",
 /*  58 */ "array ::= vertical_array",
 /*  59 */ "stmt_list ::= stmt",
 /*  60 */ "stmt_list ::= stmt_list stmt",
 /*  61 */ "expr ::= array",
 /*  62 */ "array ::= LBRAC maybe_empty_stmt_list RBRAC",
 /*  63 */ "maybe_empty_stmt_list ::=",
 /*  64 */ "maybe_empty_stmt_list ::= stmt_list",
 /*  65 */ "expr ::= num",
 /*  66 */ "expr ::= string",
 /*  67 */ "expr ::= bool",
 /*  68 */ "expr ::= PRINT LPAREN expr RPAREN",
 /*  69 */ "expr ::= LPAREN expr RPAREN",
 /*  70 */ "num ::= NUM",
 /*  71 */ "string ::= STRING",
 /*  72 */ "bool ::= BOOLEAN",
 /*  73 */ "maybe_empty_name_chain ::= name_chain",
 /*  74 */ "maybe_empty_name_chain ::= pattern",
 /*  75 */ "assignment ::= name_chain maybe_empty_name_chain ASSIGN expr",
 /*  76 */ "assignment ::= NAME maybe_empty_name_chain ASSIGN expr",
 /*  77 */ "pattern ::= LPAREN NAME PREPEND NAME RPAREN",
 /*  78 */ "expr ::= expr PREPEND expr",
 /*  79 */ "expr ::= expr APPEND expr",
 /*  80 */ "expr ::= expr PLUSPLUS expr",
 /*  81 */ "expr ::= expr PLUS expr",
 /*  82 */ "expr ::= expr MINUS expr",
 /*  83 */ "expr ::= expr DIVIDE expr",
 /*  84 */ "expr ::= expr TIMES expr",
 /*  85 */ "expr ::= expr MODULO expr",
 /*  86 */ "expr ::= expr POW expr",
 /*  87 */ "expr ::= expr EQUALTO expr",
 /*  88 */ "expr ::= expr NOTEQUALTO expr",
 /*  89 */ "expr ::= expr LESSTHAN expr",
 /*  90 */ "expr ::= expr GREATERTHAN expr",
 /*  91 */ "expr ::= expr LORE expr",
 /*  92 */ "expr ::= expr GORE expr",
 /*  93 */ "expr ::= expr AND expr",
 /*  94 */ "expr ::= expr OR expr",
 /*  95 */ "expr ::= BITNOT expr",
 /*  96 */ "expr ::= LPAREN MINUS expr RPAREN",
 /*  97 */ "expr ::= NOT expr",
 /*  98 */ "expr ::= expr SHIFTL expr",
 /*  99 */ "expr ::= expr SHIFTR expr",
 /* 100 */ "expr ::= expr BITAND expr",
 /* 101 */ "expr ::= expr BITXOR expr",
 /* 102 */ "array_index ::= function_call LBRAC expr RBRAC",
 /* 103 */ "array_index ::= NAME LBRAC expr RBRAC",
 /* 104 */ "array_index ::= array_index LBRAC expr RBRAC",
 /* 105 */ "expr ::= array_index",
 /* 106 */ "in ::= error",
 /* 107 */ "error ::= OPENQUOTEERROR",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* ASSIGN */
    case 2: /* LCURL */
    case 3: /* RCURL */
    case 4: /* COLON */
    case 5: /* DICTIONARY */
    case 6: /* DICT */
    case 7: /* WHERE */
    case 8: /* NAME */
    case 9: /* BITOR */
    case 10: /* FUNCTION_DEC */
    case 11: /* COMPOSITION */
    case 12: /* FUNCTION_CALL */
    case 13: /* PREPEND */
    case 14: /* APPEND */
    case 15: /* INDEX */
    case 16: /* OR */
    case 17: /* AND */
    case 18: /* BITXOR */
    case 19: /* BITAND */
    case 20: /* EQUALTO */
    case 21: /* NOTEQUALTO */
    case 22: /* GREATERTHAN */
    case 23: /* GORE */
    case 24: /* LESSTHAN */
    case 25: /* LORE */
    case 26: /* SHIFTL */
    case 27: /* SHIFTR */
    case 28: /* PLUS */
    case 29: /* MINUS */
    case 30: /* DIVIDE */
    case 31: /* TIMES */
    case 32: /* MODULO */
    case 33: /* POW */
    case 34: /* NOT */
    case 35: /* BITNOT */
    case 36: /* UMINUS */
    case 37: /* PLUSPLUS */
    case 38: /* LPAREN */
    case 39: /* RPAREN */
    case 40: /* LBRAC */
    case 41: /* RBRAC */
    case 42: /* COMMA */
    case 43: /* COLLECTARRAY */
    case 44: /* DELIMITER */
    case 45: /* WILDCARD */
    case 46: /* CASE */
    case 47: /* OF */
    case 48: /* LET */
    case 49: /* IN */
    case 50: /* STRING */
    case 51: /* COLONCOLON */
    case 52: /* PRINT */
    case 53: /* NUM */
    case 54: /* BOOLEAN */
    case 55: /* OPENQUOTEERROR */
{
#line 43 "./src/Grammar/grammar.y"
 token_destructor((yypminor->yy0)); 
#line 1034 "./src/Grammar/grammar.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 59, 1 },
  { 60, 0 },
  { 60, 2 },
  { 60, 3 },
  { 60, 3 },
  { 61, 1 },
  { 63, 1 },
  { 63, 1 },
  { 65, 1 },
  { 66, 1 },
  { 67, 2 },
  { 67, 1 },
  { 57, 1 },
  { 57, 3 },
  { 57, 3 },
  { 68, 4 },
  { 68, 6 },
  { 57, 4 },
  { 68, 3 },
  { 68, 3 },
  { 57, 1 },
  { 62, 1 },
  { 72, 7 },
  { 72, 6 },
  { 73, 6 },
  { 73, 5 },
  { 64, 1 },
  { 64, 3 },
  { 74, 3 },
  { 74, 4 },
  { 76, 4 },
  { 76, 5 },
  { 77, 4 },
  { 75, 1 },
  { 75, 1 },
  { 75, 1 },
  { 78, 4 },
  { 64, 4 },
  { 64, 6 },
  { 64, 8 },
  { 64, 7 },
  { 71, 3 },
  { 62, 2 },
  { 79, 4 },
  { 79, 7 },
  { 79, 6 },
  { 79, 3 },
  { 79, 6 },
  { 79, 5 },
  { 57, 1 },
  { 57, 4 },
  { 80, 3 },
  { 80, 3 },
  { 57, 1 },
  { 81, 2 },
  { 81, 3 },
  { 82, 2 },
  { 83, 5 },
  { 84, 1 },
  { 69, 1 },
  { 69, 2 },
  { 57, 1 },
  { 84, 3 },
  { 85, 0 },
  { 85, 1 },
  { 57, 1 },
  { 57, 1 },
  { 57, 1 },
  { 57, 4 },
  { 57, 3 },
  { 86, 1 },
  { 87, 1 },
  { 88, 1 },
  { 89, 1 },
  { 89, 1 },
  { 64, 4 },
  { 64, 4 },
  { 90, 5 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 2 },
  { 57, 4 },
  { 57, 2 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 70, 4 },
  { 70, 4 },
  { 70, 4 },
  { 57, 1 },
  { 60, 1 },
  { 56, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 2: /* in ::= in DELIMITER */
      case 3: /* in ::= in start DELIMITER */ yytestcase(yyruleno==3);
      case 4: /* in ::= in test DELIMITER */ yytestcase(yyruleno==4);
#line 92 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 1441 "./src/Grammar/grammar.c"
        break;
      case 5: /* start ::= spec */
#line 98 "./src/Grammar/grammar.y"
{
    optic::resolve_stack_from_parser(yymsp[0].minor.yy0, true);
}
#line 1448 "./src/Grammar/grammar.c"
        break;
      case 6: /* spec ::= assignment */
      case 21: /* test ::= case_statement */ yytestcase(yyruleno==21);
#line 103 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;
}
#line 1456 "./src/Grammar/grammar.c"
        break;
      case 7: /* spec ::= top_stmt */
      case 8: /* top_stmt ::= stmt */ yytestcase(yyruleno==8);
#line 108 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;

}
#line 1465 "./src/Grammar/grammar.c"
        break;
      case 9: /* stmt ::= expr */
#line 120 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;

}
#line 1473 "./src/Grammar/grammar.c"
        break;
      case 10: /* name_chain ::= name_chain NAME */
#line 126 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type!=optic::ARRAY)
    {
        yygotominor.yy0.type = optic::ARRAY;
        yygotominor.yy0.data.array = new optic::Array();

        optic::object newObject1,newObject2;
        newObject1.type = optic::STRING;
        newObject2.type = optic::STRING;
        newObject1.data.string = new panopticon::String(yymsp[-1].minor.yy0.data.string->c_str());
        newObject2.data.string = new panopticon::String(yymsp[0].minor.yy0.data.string->c_str());
        yygotominor.yy0.data.array->push_back(newObject1);
        yygotominor.yy0.data.array->push_back(newObject2);
    }
    else
    {
        yygotominor.yy0.type = optic::ARRAY;
        yygotominor.yy0.data.array = new optic::Array();
        for(int i=0;i<yymsp[-1].minor.yy0.data.array->size();++i)
        {
            optic::object newObject;
            newObject.type = optic::STRING;
            newObject.data.string = new optic::String(*yymsp[-1].minor.yy0.data.array->at(i).data.string);
            yygotominor.yy0.data.array->push_back(newObject);
        }
        optic::object newObject2;
        newObject2.type = optic::STRING;
        newObject2.data.string = new panopticon::String(yymsp[0].minor.yy0.data.string->c_str());
        yygotominor.yy0.data.array->push_back(newObject2);
    }
    delete_object(yymsp[-1].minor.yy0);
    delete_object(yymsp[0].minor.yy0);
}
#line 1510 "./src/Grammar/grammar.c"
        break;
      case 11: /* name_chain ::= NAME */
#line 161 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.data.string = new panopticon::String(yymsp[0].minor.yy0.data.string->c_str());
    delete yymsp[0].minor.yy0.data.string;
    yygotominor.yy0.type = panopticon::STRING;
}
#line 1519 "./src/Grammar/grammar.c"
        break;
      case 12: /* expr ::= NAME */
#line 168 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::UNDECLARED_VARIABLE;
    yygotominor.yy0.data.string = new optic::String(yymsp[0].minor.yy0.data.string->c_str());
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 1532 "./src/Grammar/grammar.c"
        break;
      case 13: /* expr ::= expr COMPOSITION function_call */
#line 179 "./src/Grammar/grammar.y"
{
    if(yymsp[0].minor.yy0.type==optic::OPERATION_TREE)
    {
        yymsp[0].minor.yy0.data.array->at(2).data.array->push_front(yymsp[-2].minor.yy0);
        yygotominor.yy0 = yymsp[0].minor.yy0;
    }
    else
    {
        optic::object function_body;
        function_body.type = optic::FUNCTION_ARG_VALUES;
        function_body.data.array = new optic::Array();
        function_body.data.array->push_back(yymsp[-2].minor.yy0);
        yymsp[0].minor.yy0.type = optic::STRING;
        optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
    }
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 1553 "./src/Grammar/grammar.c"
        break;
      case 14: /* expr ::= expr COMPOSITION NAME */
#line 197 "./src/Grammar/grammar.y"
{
    optic::object function_body;
    function_body.type = optic::FUNCTION_ARG_VALUES;
    function_body.data.array = new optic::Array();
    function_body.data.array->push_back(yymsp[-2].minor.yy0);
    yymsp[0].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 1566 "./src/Grammar/grammar.c"
        break;
      case 15: /* function_call ::= NAME LPAREN stmt_list RPAREN */
#line 207 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
        yymsp[-1].minor.yy0.data.array = new optic::Array();
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::object b;
    b.type = optic::STRING;

    b.data.string = new optic::String(yymsp[-3].minor.yy0.data.string->c_str());
    optic::store_operations(yygotominor.yy0,b,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,38,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 1595 "./src/Grammar/grammar.c"
        break;
      case 16: /* function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 232 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
        yymsp[-1].minor.yy0.data.array = new optic::Array();
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }

    yymsp[-5].minor.yy0.type = optic::VARIABLE;
    optic::parse_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-4].minor);
  yy_destructor(yypParser,41,&yymsp[-3].minor);
  yy_destructor(yypParser,38,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 1624 "./src/Grammar/grammar.c"
        break;
      case 17: /* expr ::= array_index LPAREN stmt_list RPAREN */
#line 255 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
        yymsp[-1].minor.yy0.data.array = new optic::Array();
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::parse_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,38,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 1649 "./src/Grammar/grammar.c"
        break;
      case 18: /* function_call ::= NAME LPAREN RPAREN */
#line 277 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,38,&yymsp[-1].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 1664 "./src/Grammar/grammar.c"
        break;
      case 19: /* function_call ::= array_index LPAREN RPAREN */
#line 288 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,38,&yymsp[-1].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 1678 "./src/Grammar/grammar.c"
        break;
      case 20: /* expr ::= function_call */
      case 33: /* assignment_list ::= vertical_assignment_list */ yytestcase(yyruleno==33);
      case 34: /* assignment_list ::= final_vertical_assignment_list */ yytestcase(yyruleno==34);
      case 35: /* assignment_list ::= horizontal_assignment_list */ yytestcase(yyruleno==35);
      case 53: /* expr ::= name_space */ yytestcase(yyruleno==53);
      case 58: /* array ::= vertical_array */ yytestcase(yyruleno==58);
      case 59: /* stmt_list ::= stmt */ yytestcase(yyruleno==59);
      case 61: /* expr ::= array */ yytestcase(yyruleno==61);
      case 105: /* expr ::= array_index */ yytestcase(yyruleno==105);
#line 298 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 1693 "./src/Grammar/grammar.c"
        break;
      case 22: /* guard_statement ::= name_chain LCURL BITOR expr ASSIGN expr DELIMITER */
#line 310 "./src/Grammar/grammar.y"
{
    optic::object tree = create_condition_tree(yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0 = create_guard(yymsp[-6].minor.yy0,tree);
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,9,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 1705 "./src/Grammar/grammar.c"
        break;
      case 23: /* guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER */
#line 316 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,9,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 1716 "./src/Grammar/grammar.c"
        break;
      case 24: /* final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCURL */
#line 322 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,9,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1727 "./src/Grammar/grammar.c"
        break;
      case 25: /* final_guard_statement ::= guard_statement WILDCARD ASSIGN expr RCURL */
#line 328 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-4].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-4].minor.yy0;
  yy_destructor(yypParser,45,&yymsp[-3].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1738 "./src/Grammar/grammar.c"
        break;
      case 26: /* assignment ::= final_guard_statement */
#line 334 "./src/Grammar/grammar.y"
{
    panopticon::object& b = yymsp[0].minor.yy0.data.array->at(0);
    panopticon::object& c = yymsp[0].minor.yy0.data.array->at(1);

    panopticon::object resolve;
    panopticon::store_operations(resolve, c, &panopticon::resolve_guard,false);

    resolve.type = panopticon::FUNCTION_BODY;
    b.type = optic::FUNCTION_ARG_NAMES;
    panopticon::parse_operations(yygotominor.yy0, b, resolve, &panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 1758 "./src/Grammar/grammar.c"
        break;
      case 27: /* assignment ::= name_chain ASSIGN expr */
#line 352 "./src/Grammar/grammar.y"
{
    insure_ready_for_assignment(yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yymsp[-2].minor.yy0.type = optic::FUNCTION_ARG_NAMES;
    panopticon::parse_operations(yygotominor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 1773 "./src/Grammar/grammar.c"
        break;
      case 28: /* horizontal_assignment_list ::= name_chain ASSIGN expr */
#line 368 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 1784 "./src/Grammar/grammar.c"
        break;
      case 29: /* horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr */
      case 32: /* final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr */ yytestcase(yyruleno==32);
#line 376 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 1795 "./src/Grammar/grammar.c"
        break;
      case 30: /* vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER */
#line 383 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 1807 "./src/Grammar/grammar.c"
        break;
      case 31: /* vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER */
#line 391 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-4].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 1818 "./src/Grammar/grammar.c"
        break;
      case 36: /* where ::= WHERE LCURL assignment_list RCURL */
#line 420 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    optic::object serial_result;
    optic::object result;
    optic::object previous_result;
    for(int i=0;i<yymsp[-1].minor.yy0.data.array->size(); i+=2)
    {
        insure_ready_for_assignment(
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1)
        );
        panopticon::store_operations(
            result,
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1),
            panopticon::assign_variable,
            false
        );
        optic::store_operations(serial_result,previous_result,result);
        previous_result = serial_result;
    }
    yygotominor.yy0 = serial_result;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1853 "./src/Grammar/grammar.c"
        break;
      case 37: /* assignment ::= name_chain ASSIGN expr expr */
#line 450 "./src/Grammar/grammar.y"
{
    optic::out() << "Error: Cannot declare two statements in a single assignment." << std::endl;
    optic::correct_parsing = false;
    while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
    ParseARG_STORE;
  yy_destructor(yypParser,1,&yymsp[-2].minor);
}
#line 1864 "./src/Grammar/grammar.c"
        break;
      case 38: /* assignment ::= name_chain ASSIGN expr LCURL where RCURL */
#line 458 "./src/Grammar/grammar.y"
{
    panopticon::object body;
    panopticon::store_operations(body,yymsp[-1].minor.yy0,yymsp[-3].minor.yy0,false);
    insure_ready_for_assignment(yymsp[-5].minor.yy0,body);
    panopticon::parse_operations(yygotominor.yy0, yymsp[-5].minor.yy0, body, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1882 "./src/Grammar/grammar.c"
        break;
      case 39: /* assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCURL */
#line 471 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-7].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    panopticon::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(yymsp[-7].minor.yy0,combined);
    panopticon::store_operations(yygotominor.yy0, yymsp[-7].minor.yy0, combined, panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,9,&yymsp[-6].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,44,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1908 "./src/Grammar/grammar.c"
        break;
      case 40: /* assignment ::= guard_statement WILDCARD ASSIGN expr DELIMITER where RCURL */
#line 491 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-6].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-6].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-6].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    optic::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(b,combined);
    panopticon::parse_operations(yygotominor.yy0, b, combined, &panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,45,&yymsp[-5].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,44,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1934 "./src/Grammar/grammar.c"
        break;
      case 41: /* case_statement ::= CASE expr OF */
#line 515 "./src/Grammar/grammar.y"
{
/*    yygotominor.yy0=B;*/
    yygotominor.yy0.type = optic::GUARD;
  yy_destructor(yypParser,46,&yymsp[-2].minor);
  yy_destructor(yypParser,47,&yymsp[0].minor);
}
#line 1944 "./src/Grammar/grammar.c"
        break;
      case 42: /* test ::= LET IN */
#line 520 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,48,&yymsp[-1].minor);
  yy_destructor(yypParser,49,&yymsp[0].minor);
}
#line 1952 "./src/Grammar/grammar.c"
        break;
      case 43: /* dict ::= DICT LCURL assignment_list RCURL */
#line 533 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,6,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1962 "./src/Grammar/grammar.c"
        break;
      case 44: /* dict ::= LCURL DICT LCURL assignment_list RCURL DELIMITER RCURL */
#line 538 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-6].minor);
  yy_destructor(yypParser,6,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1975 "./src/Grammar/grammar.c"
        break;
      case 45: /* dict ::= LCURL DICT LCURL assignment_list RCURL RCURL */
#line 543 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,6,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1987 "./src/Grammar/grammar.c"
        break;
      case 46: /* dict ::= LCURL assignment_list RCURL */
#line 548 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 1996 "./src/Grammar/grammar.c"
        break;
      case 47: /* dict ::= LCURL LCURL assignment_list RCURL DELIMITER RCURL */
#line 553 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2008 "./src/Grammar/grammar.c"
        break;
      case 48: /* dict ::= LCURL LCURL assignment_list RCURL RCURL */
#line 558 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2019 "./src/Grammar/grammar.c"
        break;
      case 49: /* expr ::= dict */
#line 563 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = DICTIONARY;
    yygotominor.yy0.data.dictionary = new optic::Dictionary();
    for(int i=0;i<yymsp[0].minor.yy0.data.array->size()-1;i+=2)
    {
        if(
            yymsp[0].minor.yy0.data.array->at(i).type != optic::ARRAY
        )
        {
            std::cout << *yymsp[0].minor.yy0.data.array->at(i).data.string << std::endl;
            yygotominor.yy0.data.dictionary->insert(
                std::make_pair(
                    *yymsp[0].minor.yy0.data.array->at(i).data.string,
                    yymsp[0].minor.yy0.data.array->at(i+1)
                    )
            );
        }
    }
}
#line 2042 "./src/Grammar/grammar.c"
        break;
      case 50: /* expr ::= NAME LCURL STRING RCURL */
#line 585 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yymsp[-1].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 2058 "./src/Grammar/grammar.c"
        break;
      case 51: /* name_space ::= NAME COLONCOLON NAME */
#line 597 "./src/Grammar/grammar.y"
{
    yymsp[-2].minor.yy0.type = optic::UNDECLARED_VARIABLE;
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,51,&yymsp[-1].minor);
}
#line 2073 "./src/Grammar/grammar.c"
        break;
      case 52: /* name_space ::= name_space COLONCOLON NAME */
#line 609 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = optic::STRING;
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,51,&yymsp[-1].minor);
}
#line 2087 "./src/Grammar/grammar.c"
        break;
      case 54: /* vert_stmt_list ::= stmt DELIMITER */
#line 628 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2095 "./src/Grammar/grammar.c"
        break;
      case 55: /* vert_stmt_list ::= vert_stmt_list stmt DELIMITER */
#line 633 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-2].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        panopticon::create_array(yygotominor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-2].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 2114 "./src/Grammar/grammar.c"
        break;
      case 56: /* final_vert_stmt_list ::= vert_stmt_list stmt */
      case 60: /* stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==60);
#line 649 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-1].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        panopticon::create_array(yygotominor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-1].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 2133 "./src/Grammar/grammar.c"
        break;
      case 57: /* vertical_array ::= LBRAC LCURL final_vert_stmt_list RCURL RBRAC */
#line 667 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,40,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,41,&yymsp[0].minor);
}
#line 2145 "./src/Grammar/grammar.c"
        break;
      case 62: /* array ::= LBRAC maybe_empty_stmt_list RBRAC */
#line 704 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,41,&yymsp[0].minor);
}
#line 2155 "./src/Grammar/grammar.c"
        break;
      case 63: /* maybe_empty_stmt_list ::= */
#line 710 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    panopticon::create_array(yygotominor.yy0);
}
#line 2163 "./src/Grammar/grammar.c"
        break;
      case 64: /* maybe_empty_stmt_list ::= stmt_list */
#line 716 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[0].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        panopticon::create_array(yygotominor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[0].minor.yy0.data.array;
    }
}
#line 2179 "./src/Grammar/grammar.c"
        break;
      case 65: /* expr ::= num */
      case 67: /* expr ::= bool */ yytestcase(yyruleno==67);
#line 734 "./src/Grammar/grammar.y"
{
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2187 "./src/Grammar/grammar.c"
        break;
      case 66: /* expr ::= string */
#line 739 "./src/Grammar/grammar.y"
{
   create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2194 "./src/Grammar/grammar.c"
        break;
      case 68: /* expr ::= PRINT LPAREN expr RPAREN */
#line 753 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&optic::unary_print_object,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,52,&yymsp[-3].minor);
  yy_destructor(yypParser,38,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 2209 "./src/Grammar/grammar.c"
        break;
      case 69: /* expr ::= LPAREN expr RPAREN */
#line 763 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,38,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 2218 "./src/Grammar/grammar.c"
        break;
      case 70: /* num ::= NUM */
#line 768 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2226 "./src/Grammar/grammar.c"
        break;
      case 71: /* string ::= STRING */
#line 774 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::STRING;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2234 "./src/Grammar/grammar.c"
        break;
      case 72: /* bool ::= BOOLEAN */
#line 781 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::BOOL;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 2242 "./src/Grammar/grammar.c"
        break;
      case 73: /* maybe_empty_name_chain ::= name_chain */
#line 792 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yymsp[0].minor.yy0.type = optic::STRING;
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2252 "./src/Grammar/grammar.c"
        break;
      case 74: /* maybe_empty_name_chain ::= pattern */
#line 799 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = optic::ARRAY;
    yygotominor.yy0.data.array = new optic::Array();
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 2261 "./src/Grammar/grammar.c"
        break;
      case 75: /* assignment ::= name_chain maybe_empty_name_chain ASSIGN expr */
      case 76: /* assignment ::= NAME maybe_empty_name_chain ASSIGN expr */ yytestcase(yyruleno==76);
#line 816 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 2270 "./src/Grammar/grammar.c"
        break;
      case 77: /* pattern ::= LPAREN NAME PREPEND NAME RPAREN */
#line 826 "./src/Grammar/grammar.y"
{
/*    std::cout << "PATTERN_ARGUMENT" << std::endl;*/
    yymsp[-3].minor.yy0.type = optic::PATTERN;
    yymsp[-1].minor.yy0.type = optic::PATTERN;
    yygotominor.yy0.type = optic::PATTERN;
    yygotominor.yy0.data.string = new optic::String("PATTERN ARGUMENT!");
  yy_destructor(yypParser,38,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 2284 "./src/Grammar/grammar.c"
        break;
      case 78: /* expr ::= expr PREPEND expr */
#line 835 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::prepend,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2297 "./src/Grammar/grammar.c"
        break;
      case 79: /* expr ::= expr APPEND expr */
#line 845 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::append,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2310 "./src/Grammar/grammar.c"
        break;
      case 80: /* expr ::= expr PLUSPLUS expr */
#line 855 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::concat,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-1].minor);
}
#line 2323 "./src/Grammar/grammar.c"
        break;
      case 81: /* expr ::= expr PLUS expr */
#line 865 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::plus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,28,&yymsp[-1].minor);
}
#line 2336 "./src/Grammar/grammar.c"
        break;
      case 82: /* expr ::= expr MINUS expr */
#line 875 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
#line 2349 "./src/Grammar/grammar.c"
        break;
      case 83: /* expr ::= expr DIVIDE expr */
#line 885 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::divide);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,30,&yymsp[-1].minor);
}
#line 2362 "./src/Grammar/grammar.c"
        break;
      case 84: /* expr ::= expr TIMES expr */
#line 895 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::multiply);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,31,&yymsp[-1].minor);
}
#line 2375 "./src/Grammar/grammar.c"
        break;
      case 85: /* expr ::= expr MODULO expr */
#line 905 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::modulo);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
#line 2388 "./src/Grammar/grammar.c"
        break;
      case 86: /* expr ::= expr POW expr */
#line 915 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_pow);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
#line 2401 "./src/Grammar/grammar.c"
        break;
      case 87: /* expr ::= expr EQUALTO expr */
#line 925 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 2414 "./src/Grammar/grammar.c"
        break;
      case 88: /* expr ::= expr NOTEQUALTO expr */
#line 935 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::not_equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,21,&yymsp[-1].minor);
}
#line 2427 "./src/Grammar/grammar.c"
        break;
      case 89: /* expr ::= expr LESSTHAN expr */
#line 945 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::less_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,24,&yymsp[-1].minor);
}
#line 2440 "./src/Grammar/grammar.c"
        break;
      case 90: /* expr ::= expr GREATERTHAN expr */
#line 955 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::greater_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,22,&yymsp[-1].minor);
}
#line 2453 "./src/Grammar/grammar.c"
        break;
      case 91: /* expr ::= expr LORE expr */
#line 965 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::lore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,25,&yymsp[-1].minor);
}
#line 2466 "./src/Grammar/grammar.c"
        break;
      case 92: /* expr ::= expr GORE expr */
#line 975 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::gore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,23,&yymsp[-1].minor);
}
#line 2479 "./src/Grammar/grammar.c"
        break;
      case 93: /* expr ::= expr AND expr */
#line 985 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2492 "./src/Grammar/grammar.c"
        break;
      case 94: /* expr ::= expr OR expr */
#line 995 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_or);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2505 "./src/Grammar/grammar.c"
        break;
      case 95: /* expr ::= BITNOT expr */
#line 1005 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&optic::bit_not);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,35,&yymsp[-1].minor);
}
#line 2518 "./src/Grammar/grammar.c"
        break;
      case 96: /* expr ::= LPAREN MINUS expr RPAREN */
#line 1015 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&panopticon::u_minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,38,&yymsp[-3].minor);
  yy_destructor(yypParser,29,&yymsp[-2].minor);
  yy_destructor(yypParser,39,&yymsp[0].minor);
}
#line 2533 "./src/Grammar/grammar.c"
        break;
      case 97: /* expr ::= NOT expr */
#line 1025 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&panopticon::not_value);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
#line 2546 "./src/Grammar/grammar.c"
        break;
      case 98: /* expr ::= expr SHIFTL expr */
#line 1035 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_left);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 2559 "./src/Grammar/grammar.c"
        break;
      case 99: /* expr ::= expr SHIFTR expr */
#line 1045 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_right);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2572 "./src/Grammar/grammar.c"
        break;
      case 100: /* expr ::= expr BITAND expr */
#line 1055 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 2585 "./src/Grammar/grammar.c"
        break;
      case 101: /* expr ::= expr BITXOR expr */
#line 1065 "./src/Grammar/grammar.y"
{
    parse_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_xor);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2598 "./src/Grammar/grammar.c"
        break;
      case 102: /* array_index ::= function_call LBRAC expr RBRAC */
      case 104: /* array_index ::= array_index LBRAC expr RBRAC */ yytestcase(yyruleno==104);
#line 1075 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,41,&yymsp[0].minor);
}
#line 2613 "./src/Grammar/grammar.c"
        break;
      case 103: /* array_index ::= NAME LBRAC expr RBRAC */
#line 1085 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,40,&yymsp[-2].minor);
  yy_destructor(yypParser,41,&yymsp[0].minor);
}
#line 2628 "./src/Grammar/grammar.c"
        break;
      case 106: /* in ::= error */
#line 1115 "./src/Grammar/grammar.y"
{
    switch(yymsp[0].minor.yy183)
    {
    case panopticon::OpenQuoteError:
/*        panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;*/
        break;
    default:
/*        panopticon::out() << "ERROR p0000: UnknownError" << std::endl;*/
        break;
    }
}
#line 2643 "./src/Grammar/grammar.c"
        break;
      case 107: /* error ::= OPENQUOTEERROR */
#line 1128 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy183 = panopticon::OpenQuoteError;
    panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;
}
#line 2652 "./src/Grammar/grammar.c"
        break;
      default:
      /* (0) main ::= in */ yytestcase(yyruleno==0);
      /* (1) in ::= */ yytestcase(yyruleno==1);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 86 "./src/Grammar/grammar.y"

panopticon::out() << "Syntax error!" << std::endl;
#line 2719 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 81 "./src/Grammar/grammar.y"

printf("parsing complete!\n\n\n");
#line 2741 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
