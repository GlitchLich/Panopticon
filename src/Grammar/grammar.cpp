/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 3 "./src/Grammar/grammar.y"

#include <iostream>
#include "../../include/Grammar/tokens.h"
#include "../../include/Grammar/grammar.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
/*#include "lexglobal.h"*/
#include <assert.h>
#include <math.h>
#define BUFS 1024
#include <stdio.h>
#include <string.h>
#include "core/operators.h"
#include "../../include/Grammar/parsingutilities.h"
#include "../../include/core/types.h"
#include "../../include/Grammar/parse.h"
#include "../../include/core/errors.h"
#include "../../include/core/heap.h"
#include "include/core/stack.h"
#include "core/Memory.h"

#undef STRING
#undef NUM
#undef BOOL
#undef panopticon::ARRAY

/*using namespace panopticon;*/

    void token_destructor(Token t)
    {
/*        std::cout << "token_destructor()" << std::endl;*/
        //TO DO: Do we need to free the tokens or not? I don't think so...
/*        mem_free(t);*/
    }
#line 46 "./src/Grammar/grammar.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 97
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy193;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 551
#define YYNRULE 243
#define YYERRORSYMBOL 61
#define YYERRSYMDT yy193
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (9199)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   169,  284,  153,  270,  353,  352,  350,   26,  266,  549,
 /*    10 */   349,    9,  160,   20,  268,  150,  149,  548,  134,  135,
 /*    20 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*    30 */   147,  146,  145,  144,  143,  142,  122,  123,  155,  148,
 /*    40 */   152,   18,  292,    2,  334,    6,  538,   24,  171,  309,
 /*    50 */     5,  128,   19,  348,  527,  526,  525,  496,  153,  142,
 /*    60 */   540,  328,  350,  148,  266,  543,   52,  309,    5,  351,
 /*    70 */    19,   50,   49,  151,   56,   57,   51,   53,   63,   62,
 /*    80 */    60,   58,   61,   59,   55,   54,   68,   47,   66,   67,
 /*    90 */    65,   64,  122,  123,  127,   48,  129,   18,  277,    2,
 /*   100 */   333,  157,  344,  540,  171,  498,  163,  170,  499,  348,
 /*   110 */   527,  526,  525,  145,  144,  143,  142,  330,  272,  301,
 /*   120 */   148,   24,  331,  353,  160,  538,   26,   72,   71,  536,
 /*   130 */    77,   78,   73,   74,   84,   83,   81,   79,   82,   80,
 /*   140 */    76,   75,   96,   89,   87,   88,   86,   85,  352,  124,
 /*   150 */   523,   70,  121,  357,  470,  160,  795,    1,  150,  149,
 /*   160 */   522,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*   170 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  152,
 /*   180 */   521,  520,  148,  135,  130,  131,  141,  140,  138,  136,
 /*   190 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*   200 */   125,  126,  494,  148,  277,  517,  309,    5,  352,   19,
 /*   210 */   540,  498,  165,  170,  499,  160,  515,  512,   25,  149,
 /*   220 */   510,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*   230 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  352,
 /*   240 */   507,  271,  148,  119,  505,  332,  160,  511,  538,   23,
 /*   250 */   149,    8,  134,  135,  130,  131,  141,  140,  138,  136,
 /*   260 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*   270 */   352,  501,  370,  148,  114,  503,  538,  160,  417,  538,
 /*   280 */    22,  149,  156,  134,  135,  130,  131,  141,  140,  138,
 /*   290 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*   300 */   142,  352,  493,  497,  148,  111,  495,  538,  160,  400,
 /*   310 */   329,   21,  149,   69,  134,  135,  130,  131,  141,  140,
 /*   320 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*   330 */   143,  142,  116,  363,  311,  148,  108,  352,  327,  476,
 /*   340 */   381,  540,  115,  369,  160,  423,  390,  150,  149,  421,
 /*   350 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*   360 */   133,  132,  147,  146,  145,  144,  143,  142,  362,  418,
 /*   370 */   388,  148,  352,  416,  389,  414,    7,  540,  168,  160,
 /*   380 */   412,  526,  150,  149,  410,  134,  135,  130,  131,  141,
 /*   390 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*   400 */   144,  143,  142,  406,  352,  404,  148,  401,  399,  396,
 /*   410 */   394,  160,  392,  167,  150,  149,  387,  134,  135,  130,
 /*   420 */   131,  141,  140,  138,  136,  139,  137,  133,  132,  147,
 /*   430 */   146,  145,  144,  143,  142,  385,  352,  382,  148,  380,
 /*   440 */   378,  376,  374,  160,  424,  539,  150,  149,  105,  134,
 /*   450 */   135,  130,  131,  141,  140,  138,  136,  139,  137,  133,
 /*   460 */   132,  147,  146,  145,  144,  143,  142,  352,  154,  103,
 /*   470 */   148,  101,  293,  292,  160,  534,  366,  150,  149,  291,
 /*   480 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*   490 */   133,  132,  147,  146,  145,  144,  143,  142,  352,  100,
 /*   500 */    27,  148,  364,   98,  528,  160,  361,  358,  150,  149,
 /*   510 */   278,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*   520 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  232,
 /*   530 */   538,  273,  148,  355,  354,  547,  546,  545,  544,  159,
 /*   540 */   269,  297,  279,  365,  289,  360,  298,  288,  286,  276,
 /*   550 */   120,  537,  530,  268,  277,  267,  533,  532,  352,  531,
 /*   560 */   529,  498,  164,  170,  499,  160,  310,  356,  150,  149,
 /*   570 */   796,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*   580 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  352,
 /*   590 */   796,  796,  148,  796,  796,  796,  160,  524,  796,   93,
 /*   600 */   149,  796,  134,  135,  130,  131,  141,  140,  138,  136,
 /*   610 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*   620 */   352,  796,  796,  148,  796,  796,  796,  160,  509,  796,
 /*   630 */    92,  149,  796,  134,  135,  130,  131,  141,  140,  138,
 /*   640 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*   650 */   142,  352,  796,  796,  148,  796,  796,  796,  160,  504,
 /*   660 */   796,   90,  149,  796,  134,  135,  130,  131,  141,  140,
 /*   670 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*   680 */   143,  142,  352,  796,  796,  148,  796,  796,  796,  160,
 /*   690 */   502,  796,  150,  149,  796,  134,  135,  130,  131,  141,
 /*   700 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*   710 */   144,  143,  142,  796,  352,  796,  148,  796,  796,  796,
 /*   720 */   796,  160,  796,  500,  150,  149,  796,  134,  135,  130,
 /*   730 */   131,  141,  140,  138,  136,  139,  137,  133,  132,  147,
 /*   740 */   146,  145,  144,  143,  142,  352,  796,  796,  148,  796,
 /*   750 */   796,  469,  160,  796,  796,  150,  149,  796,  134,  135,
 /*   760 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*   770 */   147,  146,  145,  144,  143,  142,  352,  796,  796,  148,
 /*   780 */   796,  796,  467,  160,  796,  796,  150,  149,  796,  134,
 /*   790 */   135,  130,  131,  141,  140,  138,  136,  139,  137,  133,
 /*   800 */   132,  147,  146,  145,  144,  143,  142,  352,  796,  796,
 /*   810 */   148,  796,  796,  465,  160,  796,  796,  150,  149,  796,
 /*   820 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*   830 */   133,  132,  147,  146,  145,  144,  143,  142,  352,  796,
 /*   840 */   796,  148,  796,  796,  463,  160,  796,  796,  150,  149,
 /*   850 */   796,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*   860 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  352,
 /*   870 */   796,  796,  148,  796,  796,  461,  160,  796,  796,  150,
 /*   880 */   149,  796,  134,  135,  130,  131,  141,  140,  138,  136,
 /*   890 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*   900 */   352,  796,  796,  148,  796,  796,  459,  160,  796,  796,
 /*   910 */   150,  149,  796,  134,  135,  130,  131,  141,  140,  138,
 /*   920 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*   930 */   142,  352,  796,  796,  148,  796,  796,  457,  160,  796,
 /*   940 */   796,  150,  149,  796,  134,  135,  130,  131,  141,  140,
 /*   950 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*   960 */   143,  142,  352,  796,  796,  148,  796,  796,  455,  160,
 /*   970 */   796,  796,  150,  149,  796,  134,  135,  130,  131,  141,
 /*   980 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*   990 */   144,  143,  142,  352,  796,  796,  148,  796,  796,  453,
 /*  1000 */   160,  796,  796,  150,  149,  796,  134,  135,  130,  131,
 /*  1010 */   141,  140,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  1020 */   145,  144,  143,  142,  352,  796,  796,  148,  796,  796,
 /*  1030 */   451,  160,  796,  796,  150,  149,  796,  134,  135,  130,
 /*  1040 */   131,  141,  140,  138,  136,  139,  137,  133,  132,  147,
 /*  1050 */   146,  145,  144,  143,  142,  352,  796,  796,  148,  796,
 /*  1060 */   796,  449,  160,  796,  796,  150,  149,  796,  134,  135,
 /*  1070 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*  1080 */   147,  146,  145,  144,  143,  142,  352,  796,  796,  148,
 /*  1090 */   796,  796,  447,  160,  796,  796,  150,  149,  796,  134,
 /*  1100 */   135,  130,  131,  141,  140,  138,  136,  139,  137,  133,
 /*  1110 */   132,  147,  146,  145,  144,  143,  142,  352,  796,  796,
 /*  1120 */   148,  796,  796,  445,  160,  796,  796,  150,  149,  796,
 /*  1130 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*  1140 */   133,  132,  147,  146,  145,  144,  143,  142,  352,  796,
 /*  1150 */   796,  148,  796,  796,  443,  160,  796,  796,  150,  149,
 /*  1160 */   796,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*  1170 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  352,
 /*  1180 */   796,  796,  148,  796,  796,  441,  160,  796,  796,  150,
 /*  1190 */   149,  796,  134,  135,  130,  131,  141,  140,  138,  136,
 /*  1200 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*  1210 */   352,  796,  796,  148,  796,  796,  439,  160,  796,  796,
 /*  1220 */   150,  149,  796,  134,  135,  130,  131,  141,  140,  138,
 /*  1230 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*  1240 */   142,  352,  796,  796,  148,  796,  796,  437,  160,  796,
 /*  1250 */   796,  150,  149,  796,  134,  135,  130,  131,  141,  140,
 /*  1260 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*  1270 */   143,  142,  352,  796,  796,  148,  796,  796,  435,  160,
 /*  1280 */   796,  796,  150,  149,  796,  134,  135,  130,  131,  141,
 /*  1290 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*  1300 */   144,  143,  142,  352,  796,  796,  148,  796,  796,  433,
 /*  1310 */   160,  796,  796,  150,  149,  796,  134,  135,  130,  131,
 /*  1320 */   141,  140,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  1330 */   145,  144,  143,  142,  352,  796,  796,  148,  796,  796,
 /*  1340 */   431,  160,  796,  796,  150,  149,  796,  134,  135,  130,
 /*  1350 */   131,  141,  140,  138,  136,  139,  137,  133,  132,  147,
 /*  1360 */   146,  145,  144,  143,  142,  352,  796,  796,  148,  796,
 /*  1370 */   796,  429,  160,  796,  796,  150,  149,  796,  134,  135,
 /*  1380 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*  1390 */   147,  146,  145,  144,  143,  142,  352,  796,  796,  148,
 /*  1400 */   796,  796,  427,  160,  796,  796,  150,  149,  796,  134,
 /*  1410 */   135,  130,  131,  141,  140,  138,  136,  139,  137,  133,
 /*  1420 */   132,  147,  146,  145,  144,  143,  142,  352,  796,  796,
 /*  1430 */   148,  796,  796,  426,  160,  796,  796,   44,  149,  796,
 /*  1440 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*  1450 */   133,  132,  147,  146,  145,  144,  143,  142,  352,  796,
 /*  1460 */   796,  148,  796,  796,  796,  160,  415,  796,   43,  149,
 /*  1470 */   796,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*  1480 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  352,
 /*  1490 */   796,  796,  148,  796,  796,  796,  160,  411,  796,   41,
 /*  1500 */   149,  796,  134,  135,  130,  131,  141,  140,  138,  136,
 /*  1510 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*  1520 */   352,  796,  796,  148,  796,  796,  796,  160,  409,  796,
 /*  1530 */    38,  149,  796,  134,  135,  130,  131,  141,  140,  138,
 /*  1540 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*  1550 */   142,  352,  796,  796,  148,  796,  796,  796,  160,  398,
 /*  1560 */   796,   37,  149,  796,  134,  135,  130,  131,  141,  140,
 /*  1570 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*  1580 */   143,  142,  352,  796,  796,  148,  796,  796,  796,  160,
 /*  1590 */   393,  796,   35,  149,  796,  134,  135,  130,  131,  141,
 /*  1600 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*  1610 */   144,  143,  142,  352,  796,  796,  148,  796,  796,  796,
 /*  1620 */   160,  391,  796,   32,  149,  796,  134,  135,  130,  131,
 /*  1630 */   141,  140,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  1640 */   145,  144,  143,  142,  352,  796,  796,  148,  796,  796,
 /*  1650 */   796,  160,  379,  796,   31,  149,  796,  134,  135,  130,
 /*  1660 */   131,  141,  140,  138,  136,  139,  137,  133,  132,  147,
 /*  1670 */   146,  145,  144,  143,  142,  352,  796,  796,  148,  796,
 /*  1680 */   796,  796,  160,  375,  796,   29,  149,  796,  134,  135,
 /*  1690 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*  1700 */   147,  146,  145,  144,  143,  142,  104,  562,  562,  148,
 /*  1710 */   162,  796,  352,  796,  373,  796,  562,  796,  796,  160,
 /*  1720 */   796,  152,  150,  149,  796,  134,  135,  130,  131,  141,
 /*  1730 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*  1740 */   144,  143,  142,  352,  796,  796,  148,  796,  309,    4,
 /*  1750 */   160,   19,  796,  150,  149,  796,  134,  135,  130,  131,
 /*  1760 */   141,  140,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  1770 */   145,  144,  143,  142,  102,  796,  796,  148,  796,  796,
 /*  1780 */   352,  796,  796,  796,  371,  796,  796,  160,  796,  796,
 /*  1790 */   150,  149,  796,  134,  135,  130,  131,  141,  140,  138,
 /*  1800 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*  1810 */   142,  352,  796,  796,  148,  796,  796,  796,  160,  796,
 /*  1820 */   796,  150,  149,  796,  134,  135,  130,  131,  141,  140,
 /*  1830 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*  1840 */   143,  142,   99,  796,  796,  148,  796,  796,  352,  796,
 /*  1850 */   796,  796,  368,  796,  796,  160,  796,  796,  150,  149,
 /*  1860 */   796,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*  1870 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  352,
 /*  1880 */   796,  796,  148,  796,  796,  796,  160,  796,  796,  150,
 /*  1890 */   149,  796,  134,  135,  130,  131,  141,  140,  138,  136,
 /*  1900 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*  1910 */   796,  796,  352,  148,  796,  796,  796,  796,  796,  160,
 /*  1920 */   796,  796,  150,  149,  359,  134,  135,  130,  131,  141,
 /*  1930 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*  1940 */   144,  143,  142,  796,  160,  796,  148,  150,  149,  796,
 /*  1950 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*  1960 */   133,  132,  147,  146,  145,  144,  143,  142,  300,   95,
 /*  1970 */   149,  148,  134,  135,  130,  131,  141,  140,  138,  136,
 /*  1980 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*  1990 */   295,  367,  796,  148,  796,  300,   94,  149,  514,  134,
 /*  2000 */   135,  130,  131,  141,  140,  138,  136,  139,  137,  133,
 /*  2010 */   132,  147,  146,  145,  144,  143,  142,  290,  367,  796,
 /*  2020 */   148,  796,  796,   91,  149,  516,  134,  135,  130,  131,
 /*  2030 */   141,  140,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  2040 */   145,  144,  143,  142,  796,  796,  796,  148,  796,  796,
 /*  2050 */    46,  149,  506,  134,  135,  130,  131,  141,  140,  138,
 /*  2060 */   136,  139,  137,  133,  132,  147,  146,  145,  144,  143,
 /*  2070 */   142,  796,  796,  796,  148,  796,  796,   45,  149,  420,
 /*  2080 */   134,  135,  130,  131,  141,  140,  138,  136,  139,  137,
 /*  2090 */   133,  132,  147,  146,  145,  144,  143,  142,  796,  796,
 /*  2100 */   796,  148,  796,  796,   42,  149,  422,  134,  135,  130,
 /*  2110 */   131,  141,  140,  138,  136,  139,  137,  133,  132,  147,
 /*  2120 */   146,  145,  144,  143,  142,  796,  796,  796,  148,  796,
 /*  2130 */   796,   40,  149,  413,  134,  135,  130,  131,  141,  140,
 /*  2140 */   138,  136,  139,  137,  133,  132,  147,  146,  145,  144,
 /*  2150 */   143,  142,  796,  796,  796,  148,  796,  796,   39,  149,
 /*  2160 */   403,  134,  135,  130,  131,  141,  140,  138,  136,  139,
 /*  2170 */   137,  133,  132,  147,  146,  145,  144,  143,  142,  796,
 /*  2180 */   796,  796,  148,  796,  796,   36,  149,  405,  134,  135,
 /*  2190 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*  2200 */   147,  146,  145,  144,  143,  142,  796,  796,  796,  148,
 /*  2210 */   796,  796,   34,  149,  395,  134,  135,  130,  131,  141,
 /*  2220 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*  2230 */   144,  143,  142,  796,  796,  796,  148,  796,  796,   33,
 /*  2240 */   149,  384,  134,  135,  130,  131,  141,  140,  138,  136,
 /*  2250 */   139,  137,  133,  132,  147,  146,  145,  144,  143,  142,
 /*  2260 */   796,  796,  796,  148,  796,  796,   30,  149,  386,  134,
 /*  2270 */   135,  130,  131,  141,  140,  138,  136,  139,  137,  133,
 /*  2280 */   132,  147,  146,  145,  144,  143,  142,  796,  796,  796,
 /*  2290 */   148,  796,  796,  150,  149,  377,  134,  135,  130,  131,
 /*  2300 */   141,  140,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  2310 */   145,  144,  143,  142,  796,  796,  796,  148,  134,  135,
 /*  2320 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*  2330 */   147,  146,  145,  144,  143,  142,  796,  796,  796,  148,
 /*  2340 */   130,  131,  141,  140,  138,  136,  139,  137,  133,  132,
 /*  2350 */   147,  146,  145,  144,  143,  142,  796,  796,  796,  148,
 /*  2360 */   796,  796,  796,  131,  141,  140,  138,  136,  139,  137,
 /*  2370 */   133,  132,  147,  146,  145,  144,  143,  142,  551,  796,
 /*  2380 */   796,  148,  153,  796,  796,  796,  350,  796,  158,  141,
 /*  2390 */   140,  138,  136,  139,  137,  133,  132,  147,  146,  145,
 /*  2400 */   144,  143,  142,   28,  299,  153,  148,  796,  796,  350,
 /*  2410 */   796,  266,  372,  796,  796,  796,  122,  123,  118,  796,
 /*  2420 */   796,   18,  796,    2,  796,  796,  550,  796,  171,   97,
 /*  2430 */   796,  285,  796,  348,  527,  526,  525,  796,  796,  122,
 /*  2440 */   123,  796,  796,  117,   18,  294,    2,  338,  153,  796,
 /*  2450 */   796,  171,  350,  796,  266,  796,  348,  527,  526,  525,
 /*  2460 */   796,  110,  138,  136,  139,  137,  133,  132,  147,  146,
 /*  2470 */   145,  144,  143,  142,  796,  796,  796,  148,  796,  796,
 /*  2480 */   796,  796,  122,  123,  796,  796,  109,   18,  796,    2,
 /*  2490 */   315,  153,  245,  796,  171,  350,  796,  266,  796,  348,
 /*  2500 */   527,  526,  525,  269,  107,  279,  796,  796,  796,  796,
 /*  2510 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  2520 */   532,  796,  531,  529,  796,  122,  123,  796,  248,  106,
 /*  2530 */    18,  796,    2,  796,  153,  796,  796,  171,  350,  269,
 /*  2540 */   266,  279,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  2550 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  2560 */   796,  796,  796,  796,  796,  796,  340,  796,  122,  123,
 /*  2570 */   796,  796,  796,   18,  796,    2,  513,  796,  153,  247,
 /*  2580 */   171,  796,  350,  796,  266,  348,  527,  526,  525,  796,
 /*  2590 */   269,  113,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  2600 */   796,  537,  530,  268,  796,  796,  533,  532,  796,  531,
 /*  2610 */   529,  796,  122,  123,  796,  250,  112,   18,  796,    2,
 /*  2620 */   796,  153,  796,  796,  171,  350,  269,  266,  279,  348,
 /*  2630 */   527,  526,  525,  796,  796,  796,  796,  537,  530,  268,
 /*  2640 */   796,  277,  533,  532,  796,  531,  529,  796,  498,  161,
 /*  2650 */   170,  499,  796,  324,  796,  122,  123,  796,  796,  796,
 /*  2660 */    18,  796,    2,  419,  796,  153,  796,  171,  796,  350,
 /*  2670 */   796,  266,  348,  527,  526,  525,  133,  132,  147,  146,
 /*  2680 */   145,  144,  143,  142,  796,  796,  796,  148,  796,  147,
 /*  2690 */   146,  145,  144,  143,  142,  796,  796,  317,  148,  122,
 /*  2700 */   123,  249,  796,  796,   18,  796,    2,  402,  796,  153,
 /*  2710 */   796,  171,  269,  350,  279,  266,  348,  527,  526,  525,
 /*  2720 */   796,  796,  796,  537,  530,  268,  277,  796,  533,  532,
 /*  2730 */   796,  531,  529,  498,  166,  170,  499,  796,  796,  796,
 /*  2740 */   796,  306,  796,  122,  123,  796,  796,  796,   18,  796,
 /*  2750 */     2,  383,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  2760 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  2770 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2780 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  2790 */   796,  796,   18,  541,    2,  796,  796,  153,  796,  171,
 /*  2800 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  2810 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2820 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  341,
 /*  2830 */   796,  122,  123,  796,  796,  796,   18,  796,    2,  796,
 /*  2840 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  2850 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2860 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2870 */   796,  796,  796,  342,  796,  122,  123,  796,  796,  796,
 /*  2880 */    18,  796,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  2890 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  2900 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2910 */   796,  796,  796,  796,  796,  796,  796,  339,  796,  122,
 /*  2920 */   123,  796,  796,  796,   18,  796,    2,  796,  796,  153,
 /*  2930 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  2940 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2950 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  2960 */   796,  336,  796,  122,  123,  796,  796,  796,   18,  796,
 /*  2970 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  2980 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  2990 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3000 */   796,  796,  796,  796,  796,  337,  796,  122,  123,  796,
 /*  3010 */   796,  796,   18,  796,    2,  796,  796,  153,  796,  171,
 /*  3020 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  3030 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3040 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  335,
 /*  3050 */   796,  122,  123,  796,  796,  796,   18,  796,    2,  796,
 /*  3060 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  3070 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3080 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3090 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  3100 */    18,  492,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  3110 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  3120 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3130 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  3140 */   123,  796,  796,  796,   18,  491,    2,  796,  796,  153,
 /*  3150 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  3160 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3170 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3180 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  490,
 /*  3190 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  3200 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  3210 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3220 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  3230 */   796,  796,   18,  489,    2,  796,  796,  153,  796,  171,
 /*  3240 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  3250 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3260 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3270 */   796,  122,  123,  796,  796,  796,   18,  488,    2,  796,
 /*  3280 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  3290 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3300 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3310 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  3320 */    18,  487,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  3330 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  3340 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3350 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  3360 */   123,  796,  796,  796,   18,  486,    2,  796,  796,  153,
 /*  3370 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  3380 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3390 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3400 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  485,
 /*  3410 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  3420 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  3430 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3440 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  3450 */   796,  796,   18,  484,    2,  796,  796,  153,  796,  171,
 /*  3460 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  3470 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3480 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3490 */   796,  122,  123,  796,  796,  796,   18,  483,    2,  796,
 /*  3500 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  3510 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3520 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3530 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  3540 */    18,  482,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  3550 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  3560 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3570 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  3580 */   123,  796,  796,  796,   18,  481,    2,  796,  796,  153,
 /*  3590 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  3600 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3610 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3620 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  480,
 /*  3630 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  3640 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  3650 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3660 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  3670 */   796,  796,   18,  479,    2,  796,  796,  153,  796,  171,
 /*  3680 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  3690 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3700 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3710 */   796,  122,  123,  796,  796,  796,   18,  478,    2,  796,
 /*  3720 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  3730 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3740 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3750 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  3760 */    18,  477,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  3770 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  3780 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3790 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  3800 */   123,  796,  796,  796,   18,  475,    2,  796,  796,  153,
 /*  3810 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  3820 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3830 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3840 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  474,
 /*  3850 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  3860 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  3870 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3880 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  3890 */   796,  796,   18,  473,    2,  796,  796,  153,  796,  171,
 /*  3900 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  3910 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3920 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3930 */   796,  122,  123,  796,  796,  796,   18,  472,    2,  796,
 /*  3940 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  3950 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3960 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  3970 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  3980 */    18,  471,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  3990 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  4000 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4010 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  4020 */   123,  796,  796,  796,   18,  468,    2,  796,  796,  153,
 /*  4030 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  4040 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4050 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4060 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  466,
 /*  4070 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  4080 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  4090 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4100 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  4110 */   796,  796,   18,  464,    2,  796,  796,  153,  796,  171,
 /*  4120 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  4130 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4140 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4150 */   796,  122,  123,  796,  796,  796,   18,  462,    2,  796,
 /*  4160 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  4170 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4180 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4190 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  4200 */    18,  460,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  4210 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  4220 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4230 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  4240 */   123,  796,  796,  796,   18,  458,    2,  796,  796,  153,
 /*  4250 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  4260 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4270 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4280 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  456,
 /*  4290 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  4300 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  4310 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4320 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  4330 */   796,  796,   18,  454,    2,  796,  796,  153,  796,  171,
 /*  4340 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  4350 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4360 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4370 */   796,  122,  123,  796,  796,  796,   18,  452,    2,  796,
 /*  4380 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  4390 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4400 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4410 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  4420 */    18,  450,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  4430 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  4440 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4450 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  4460 */   123,  796,  796,  796,   18,  448,    2,  796,  796,  153,
 /*  4470 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  4480 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4490 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4500 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  446,
 /*  4510 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  4520 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  4530 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4540 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  4550 */   796,  796,   18,  444,    2,  796,  796,  153,  796,  171,
 /*  4560 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  4570 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4580 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4590 */   796,  122,  123,  796,  796,  796,   18,  442,    2,  796,
 /*  4600 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  4610 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4620 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4630 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  4640 */    18,  440,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  4650 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  4660 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4670 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  4680 */   123,  796,  796,  796,   18,  438,    2,  796,  796,  153,
 /*  4690 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  4700 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4710 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4720 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  436,
 /*  4730 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  4740 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  4750 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4760 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  4770 */   796,  796,   18,  434,    2,  796,  796,  153,  796,  171,
 /*  4780 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  4790 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4800 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4810 */   796,  122,  123,  796,  796,  796,   18,  432,    2,  796,
 /*  4820 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  4830 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4840 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4850 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  4860 */    18,  430,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  4870 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  4880 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4890 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  4900 */   123,  796,  796,  796,   18,  428,    2,  796,  796,  153,
 /*  4910 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  4920 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4930 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4940 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  425,
 /*  4950 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  4960 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  4970 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  4980 */   796,  796,  796,  796,  796,  325,  796,  122,  123,  796,
 /*  4990 */   796,  796,   18,  796,    2,  796,  796,  153,  796,  171,
 /*  5000 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  5010 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5020 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  326,
 /*  5030 */   796,  122,  123,  796,  796,  796,   18,  796,    2,  796,
 /*  5040 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  5050 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5060 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5070 */   796,  796,  796,  323,  796,  122,  123,  796,  796,  796,
 /*  5080 */    18,  796,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  5090 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  5100 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5110 */   796,  796,  796,  796,  796,  796,  796,  321,  796,  122,
 /*  5120 */   123,  796,  796,  796,   18,  796,    2,  796,  796,  153,
 /*  5130 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  5140 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5150 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5160 */   796,  322,  796,  122,  123,  796,  796,  796,   18,  796,
 /*  5170 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  5180 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  5190 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5200 */   796,  796,  796,  796,  796,  320,  796,  122,  123,  796,
 /*  5210 */   796,  796,   18,  796,    2,  796,  796,  153,  796,  171,
 /*  5220 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  5230 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5240 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  318,
 /*  5250 */   796,  122,  123,  796,  796,  796,   18,  796,    2,  796,
 /*  5260 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  5270 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5280 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5290 */   796,  796,  796,  319,  796,  122,  123,  796,  796,  796,
 /*  5300 */    18,  796,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  5310 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  5320 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5330 */   796,  796,  796,  796,  796,  796,  796,  316,  796,  122,
 /*  5340 */   123,  796,  796,  796,   18,  796,    2,  796,  796,  153,
 /*  5350 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  5360 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5370 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5380 */   796,  313,  796,  122,  123,  796,  796,  796,   18,  796,
 /*  5390 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  5400 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  5410 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5420 */   796,  796,  796,  796,  796,  314,  796,  122,  123,  796,
 /*  5430 */   796,  796,   18,  796,    2,  796,  796,  153,  796,  171,
 /*  5440 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  5450 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5460 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  312,
 /*  5470 */   796,  122,  123,  796,  796,  796,   18,  796,    2,  796,
 /*  5480 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  5490 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5500 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5510 */   796,  796,  796,  307,  796,  122,  123,  796,  796,  796,
 /*  5520 */    18,  796,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  5530 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  5540 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5550 */   796,  796,  796,  796,  796,  796,  796,  308,  796,  122,
 /*  5560 */   123,  796,  796,  796,   18,  796,    2,  796,  796,  153,
 /*  5570 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  5580 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5590 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5600 */   796,  305,  796,  122,  123,  796,  796,  796,   18,  796,
 /*  5610 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  5620 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  5630 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5640 */   796,  796,  796,  796,  796,  303,  796,  122,  123,  796,
 /*  5650 */   796,  796,   18,  796,    2,  796,  796,  153,  796,  171,
 /*  5660 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  5670 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5680 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  304,
 /*  5690 */   796,  122,  123,  796,  796,  796,   18,  796,    2,  796,
 /*  5700 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  5710 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5720 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5730 */   796,  796,  796,  302,  796,  122,  123,  796,  796,  796,
 /*  5740 */    18,  796,    2,  296,  796,  153,  796,  171,  796,  350,
 /*  5750 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  5760 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5770 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  5780 */   123,  796,  796,  796,   18,  796,    2,  796,  796,  153,
 /*  5790 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  5800 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5810 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5820 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  796,
 /*  5830 */     2,  796,  796,  153,  287,  171,  796,  350,  796,  266,
 /*  5840 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  5850 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5860 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  5870 */   796,  796,   18,  542,    2,  796,  796,  153,  796,  171,
 /*  5880 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  5890 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5900 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5910 */   796,  122,  123,  796,  796,  796,   18,  535,    2,  796,
 /*  5920 */   796,  153,  796,  171,  796,  350,  796,  266,  348,  527,
 /*  5930 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5940 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5950 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  5960 */    18,  508,    2,  796,  796,  153,  796,  171,  796,  350,
 /*  5970 */   796,  266,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  5980 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  5990 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  122,
 /*  6000 */   123,  796,  796,  796,   18,  408,    2,  796,  796,  153,
 /*  6010 */   796,  171,  796,  350,  796,  266,  348,  527,  526,  525,
 /*  6020 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6030 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6040 */   796,  796,  796,  122,  123,  796,  796,  796,   18,  397,
 /*  6050 */     2,  796,  796,  153,  796,  171,  796,  350,  796,  266,
 /*  6060 */   348,  527,  526,  525,  796,  796,  796,  796,  796,  796,
 /*  6070 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6080 */   796,  796,  796,  796,  796,  796,  796,  122,  123,  796,
 /*  6090 */   796,  796,   18,  424,    2,  796,  796,  153,  796,  171,
 /*  6100 */   796,  350,  796,  266,  348,  527,  526,  525,  796,  796,
 /*  6110 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6120 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6130 */   796,  122,  123,  796,  796,  796,   18,  407,    2,  796,
 /*  6140 */   796,  153,  796,  171,  796,  350,  796,  263,  348,  527,
 /*  6150 */   526,  525,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6160 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6170 */   796,  796,  796,  796,  796,  122,  123,  796,  796,  796,
 /*  6180 */    18,  407,    2,  796,  796,  796,  796,  171,  796,  796,
 /*  6190 */   796,  796,  348,  527,  526,  525,  796,  796,  796,  796,
 /*  6200 */   232,  796,  796,  796,  796,  796,  796,  796,  796,  347,
 /*  6210 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  6220 */   796,  796,  537,  530,  268,   16,  345,  533,  532,  796,
 /*  6230 */   531,  529,  796,  796,    3,  796,  153,  796,  178,  796,
 /*  6240 */   350,  796,  266,  796,  796,  796,  796,  519,  796,  269,
 /*  6250 */    15,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6260 */   537,  530,  268,  796,  796,  533,  532,  343,  531,  529,
 /*  6270 */   122,  123,  153,  796,  796,   18,  350,    2,  266,  796,
 /*  6280 */   796,  796,  171,  796,  796,  796,  796,  348,  527,  526,
 /*  6290 */   525,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6300 */   796,  796,  796,  796,  796,  796,  122,  123,  796,  796,
 /*  6310 */   796,   18,  796,    2,  796,  796,  796,  796,  171,  796,
 /*  6320 */   796,  796,  796,  348,  527,  526,  525,  796,  232,  796,
 /*  6330 */   796,  796,  796,  796,  796,  796,  796,  519,  796,  269,
 /*  6340 */    13,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6350 */   537,  530,  268,  232,  796,  533,  532,  796,  531,  529,
 /*  6360 */   796,  796,  519,  796,  269,   12,  279,  796,  796,  796,
 /*  6370 */   796,  796,  796,  796,  796,  537,  530,  268,  796,  796,
 /*  6380 */   533,  532,  796,  531,  529,  796,  232,  796,  796,  796,
 /*  6390 */   796,  796,  796,  796,  796,  519,  796,  269,   10,  279,
 /*  6400 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  6410 */   268,  796,  796,  533,  532,  232,  531,  529,  796,  796,
 /*  6420 */   796,  796,  796,  796,  519,  796,  269,   14,  279,  796,
 /*  6430 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  6440 */   232,  796,  533,  532,  796,  531,  529,  796,  796,  519,
 /*  6450 */   796,  269,   11,  279,  796,  796,  796,  796,  796,  796,
 /*  6460 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  6470 */   531,  529,  232,  796,  796,  796,  796,  796,  796,  796,
 /*  6480 */   796,  346,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  6490 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  6500 */   532,  232,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  6510 */   518,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  6520 */   796,  796,  796,  537,  530,  268,  265,  796,  533,  532,
 /*  6530 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  6540 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  6550 */   268,  796,  796,  533,  532,  796,  531,  529,  264,  796,
 /*  6560 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  6570 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6580 */   537,  530,  268,  796,  796,  533,  532,  283,  531,  529,
 /*  6590 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  6600 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  6610 */   530,  268,  282,  796,  533,  532,  796,  531,  529,  796,
 /*  6620 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  6630 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  6640 */   532,  796,  531,  529,  281,  796,  796,  796,  796,  796,
 /*  6650 */   796,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  6660 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  6670 */   796,  533,  532,  280,  531,  529,  796,  796,  796,  796,
 /*  6680 */   796,  796,  796,  796,  269,  796,  279,  796,  796,  796,
 /*  6690 */   796,  796,  796,  796,  796,  537,  530,  268,  256,  796,
 /*  6700 */   533,  532,  796,  531,  529,  796,  796,  796,  796,  269,
 /*  6710 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6720 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  6730 */   255,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6740 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  6750 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  260,
 /*  6760 */   531,  529,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  6770 */   269,  796,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  6780 */   796,  537,  530,  268,  259,  796,  533,  532,  796,  531,
 /*  6790 */   529,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  6800 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  6810 */   796,  533,  532,  796,  531,  529,  258,  796,  796,  796,
 /*  6820 */   796,  796,  796,  796,  796,  796,  796,  269,  796,  279,
 /*  6830 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  6840 */   268,  796,  796,  533,  532,  257,  531,  529,  796,  796,
 /*  6850 */   796,  796,  796,  796,  796,  796,  269,  796,  279,  796,
 /*  6860 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  6870 */   252,  796,  533,  532,  796,  531,  529,  796,  796,  796,
 /*  6880 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  6890 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  6900 */   531,  529,  251,  796,  796,  796,  796,  796,  796,  796,
 /*  6910 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  6920 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  6930 */   532,  262,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  6940 */   796,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  6950 */   796,  796,  796,  537,  530,  268,  261,  796,  533,  532,
 /*  6960 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  6970 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  6980 */   268,  796,  796,  533,  532,  796,  531,  529,  254,  796,
 /*  6990 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  7000 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7010 */   537,  530,  268,  796,  796,  533,  532,  253,  531,  529,
 /*  7020 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  7030 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  7040 */   530,  268,  246,  796,  533,  532,  796,  531,  529,  796,
 /*  7050 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  7060 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  7070 */   532,  796,  531,  529,  231,  796,  796,  796,  796,  796,
 /*  7080 */   796,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  7090 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  7100 */   796,  533,  532,  226,  531,  529,  796,  796,  796,  796,
 /*  7110 */   796,  796,  796,  796,  269,  796,  279,  796,  796,  796,
 /*  7120 */   796,  796,  796,  796,  796,  537,  530,  268,  230,  796,
 /*  7130 */   533,  532,  796,  531,  529,  796,  796,  796,  796,  269,
 /*  7140 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7150 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  7160 */   225,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7170 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  7180 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  224,
 /*  7190 */   531,  529,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7200 */   269,  796,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  7210 */   796,  537,  530,  268,  275,  796,  533,  532,  796,  531,
 /*  7220 */   529,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  7230 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  7240 */   796,  533,  532,  796,  531,  529,  274,  796,  796,  796,
 /*  7250 */   796,  796,  796,  796,  796,  796,  796,  269,  796,  279,
 /*  7260 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  7270 */   268,  796,  796,  533,  532,  223,  531,  529,  796,  796,
 /*  7280 */   796,  796,  796,  796,  796,  796,  269,  796,  279,  796,
 /*  7290 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  7300 */   222,  796,  533,  532,  796,  531,  529,  796,  796,  796,
 /*  7310 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  7320 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  7330 */   531,  529,  221,  796,  796,  796,  796,  796,  796,  796,
 /*  7340 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  7350 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  7360 */   532,  220,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  7370 */   796,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  7380 */   796,  796,  796,  537,  530,  268,  219,  796,  533,  532,
 /*  7390 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  7400 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  7410 */   268,  796,  796,  533,  532,  796,  531,  529,  218,  796,
 /*  7420 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  7430 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7440 */   537,  530,  268,  796,  796,  533,  532,  196,  531,  529,
 /*  7450 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  7460 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  7470 */   530,  268,  194,  796,  533,  532,  796,  531,  529,  796,
 /*  7480 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  7490 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  7500 */   532,  796,  531,  529,  193,  796,  796,  796,  796,  796,
 /*  7510 */   796,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  7520 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  7530 */   796,  533,  532,  192,  531,  529,  796,  796,  796,  796,
 /*  7540 */   796,  796,  796,  796,  269,  796,  279,  796,  796,  796,
 /*  7550 */   796,  796,  796,  796,  796,  537,  530,  268,  191,  796,
 /*  7560 */   533,  532,  796,  531,  529,  796,  796,  796,  796,  269,
 /*  7570 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7580 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  7590 */   190,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7600 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  7610 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  189,
 /*  7620 */   531,  529,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7630 */   269,  796,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  7640 */   796,  537,  530,  268,  188,  796,  533,  532,  796,  531,
 /*  7650 */   529,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  7660 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  7670 */   796,  533,  532,  796,  531,  529,  187,  796,  796,  796,
 /*  7680 */   796,  796,  796,  796,  796,  796,  796,  269,  796,  279,
 /*  7690 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  7700 */   268,  796,  796,  533,  532,  186,  531,  529,  796,  796,
 /*  7710 */   796,  796,  796,  796,  796,  796,  269,  796,  279,  796,
 /*  7720 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  7730 */   185,  796,  533,  532,  796,  531,  529,  796,  796,  796,
 /*  7740 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  7750 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  7760 */   531,  529,  184,  796,  796,  796,  796,  796,  796,  796,
 /*  7770 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  7780 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  7790 */   532,  183,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  7800 */   796,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  7810 */   796,  796,  796,  537,  530,  268,  182,  796,  533,  532,
 /*  7820 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  7830 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  7840 */   268,  796,  796,  533,  532,  796,  531,  529,  228,  796,
 /*  7850 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  7860 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  7870 */   537,  530,  268,  796,  796,  533,  532,  227,  531,  529,
 /*  7880 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  7890 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  7900 */   530,  268,  173,  796,  533,  532,  796,  531,  529,  796,
 /*  7910 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  7920 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  7930 */   532,  796,  531,  529,  172,  796,  796,  796,  796,  796,
 /*  7940 */   796,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  7950 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  7960 */   796,  533,  532,  180,  531,  529,  796,  796,  796,  796,
 /*  7970 */   796,  796,  796,  796,  269,  796,  279,  796,  796,  796,
 /*  7980 */   796,  796,  796,  796,  796,  537,  530,  268,  243,  796,
 /*  7990 */   533,  532,  796,  531,  529,  796,  796,  796,  796,  269,
 /*  8000 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8010 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  8020 */   242,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8030 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  8040 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  217,
 /*  8050 */   531,  529,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8060 */   269,  796,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  8070 */   796,  537,  530,  268,  216,  796,  533,  532,  796,  531,
 /*  8080 */   529,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  8090 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  8100 */   796,  533,  532,  796,  531,  529,  215,  796,  796,  796,
 /*  8110 */   796,  796,  796,  796,  796,  796,  796,  269,  796,  279,
 /*  8120 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  8130 */   268,  796,  796,  533,  532,  214,  531,  529,  796,  796,
 /*  8140 */   796,  796,  796,  796,  796,  796,  269,  796,  279,  796,
 /*  8150 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  8160 */   213,  796,  533,  532,  796,  531,  529,  796,  796,  796,
 /*  8170 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  8180 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  8190 */   531,  529,  212,  796,  796,  796,  796,  796,  796,  796,
 /*  8200 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  8210 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  8220 */   532,  211,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  8230 */   796,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  8240 */   796,  796,  796,  537,  530,  268,  210,  796,  533,  532,
 /*  8250 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  8260 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  8270 */   268,  796,  796,  533,  532,  796,  531,  529,  209,  796,
 /*  8280 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  8290 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8300 */   537,  530,  268,  796,  796,  533,  532,  208,  531,  529,
 /*  8310 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  8320 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  8330 */   530,  268,  207,  796,  533,  532,  796,  531,  529,  796,
 /*  8340 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  8350 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  8360 */   532,  796,  531,  529,  206,  796,  796,  796,  796,  796,
 /*  8370 */   796,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  8380 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  8390 */   796,  533,  532,  205,  531,  529,  796,  796,  796,  796,
 /*  8400 */   796,  796,  796,  796,  269,  796,  279,  796,  796,  796,
 /*  8410 */   796,  796,  796,  796,  796,  537,  530,  268,  204,  796,
 /*  8420 */   533,  532,  796,  531,  529,  796,  796,  796,  796,  269,
 /*  8430 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8440 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  8450 */   203,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8460 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  8470 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  202,
 /*  8480 */   531,  529,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8490 */   269,  796,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  8500 */   796,  537,  530,  268,  201,  796,  533,  532,  796,  531,
 /*  8510 */   529,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  8520 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  8530 */   796,  533,  532,  796,  531,  529,  200,  796,  796,  796,
 /*  8540 */   796,  796,  796,  796,  796,  796,  796,  269,  796,  279,
 /*  8550 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  8560 */   268,  796,  796,  533,  532,  199,  531,  529,  796,  796,
 /*  8570 */   796,  796,  796,  796,  796,  796,  269,  796,  279,  796,
 /*  8580 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  8590 */   198,  796,  533,  532,  796,  531,  529,  796,  796,  796,
 /*  8600 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  8610 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  8620 */   531,  529,  197,  796,  796,  796,  796,  796,  796,  796,
 /*  8630 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  8640 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  8650 */   532,  195,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  8660 */   796,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  8670 */   796,  796,  796,  537,  530,  268,  240,  796,  533,  532,
 /*  8680 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  8690 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  8700 */   268,  796,  796,  533,  532,  796,  531,  529,  239,  796,
 /*  8710 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  8720 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8730 */   537,  530,  268,  796,  796,  533,  532,  237,  531,  529,
 /*  8740 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  8750 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  8760 */   530,  268,  236,  796,  533,  532,  796,  531,  529,  796,
 /*  8770 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  8780 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  8790 */   532,  796,  531,  529,  234,  796,  796,  796,  796,  796,
 /*  8800 */   796,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  8810 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  8820 */   796,  533,  532,  233,  531,  529,  796,  796,  796,  796,
 /*  8830 */   796,  796,  796,  796,  269,  796,  279,  796,  796,  796,
 /*  8840 */   796,  796,  796,  796,  796,  537,  530,  268,   17,  796,
 /*  8850 */   533,  532,  796,  531,  529,  796,  796,  796,  796,  269,
 /*  8860 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8870 */   537,  530,  268,  796,  796,  533,  532,  796,  531,  529,
 /*  8880 */   181,  796,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8890 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  8900 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  174,
 /*  8910 */   531,  529,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  8920 */   269,  796,  279,  796,  796,  796,  796,  796,  796,  796,
 /*  8930 */   796,  537,  530,  268,  244,  796,  533,  532,  796,  531,
 /*  8940 */   529,  796,  796,  796,  796,  269,  796,  279,  796,  796,
 /*  8950 */   796,  796,  796,  796,  796,  796,  537,  530,  268,  796,
 /*  8960 */   796,  533,  532,  796,  531,  529,  176,  796,  796,  796,
 /*  8970 */   796,  796,  796,  796,  796,  796,  796,  269,  796,  279,
 /*  8980 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  8990 */   268,  796,  796,  533,  532,  241,  531,  529,  796,  796,
 /*  9000 */   796,  796,  796,  796,  796,  796,  269,  796,  279,  796,
 /*  9010 */   796,  796,  796,  796,  796,  796,  796,  537,  530,  268,
 /*  9020 */   238,  796,  533,  532,  796,  531,  529,  796,  796,  796,
 /*  9030 */   796,  269,  796,  279,  796,  796,  796,  796,  796,  796,
 /*  9040 */   796,  796,  537,  530,  268,  796,  796,  533,  532,  796,
 /*  9050 */   531,  529,  235,  796,  796,  796,  796,  796,  796,  796,
 /*  9060 */   796,  796,  796,  269,  796,  279,  796,  796,  796,  796,
 /*  9070 */   796,  796,  796,  796,  537,  530,  268,  796,  796,  533,
 /*  9080 */   532,  177,  531,  529,  796,  796,  796,  796,  796,  796,
 /*  9090 */   796,  796,  269,  796,  279,  796,  796,  796,  796,  796,
 /*  9100 */   796,  796,  796,  537,  530,  268,  175,  796,  533,  532,
 /*  9110 */   796,  531,  529,  796,  796,  796,  796,  269,  796,  279,
 /*  9120 */   796,  796,  796,  796,  796,  796,  796,  796,  537,  530,
 /*  9130 */   268,  796,  796,  533,  532,  796,  531,  529,  179,  796,
 /*  9140 */   796,  796,  796,  796,  796,  796,  796,  796,  796,  269,
 /*  9150 */   796,  279,  796,  796,  796,  796,  796,  796,  796,  796,
 /*  9160 */   537,  530,  268,  796,  796,  533,  532,  229,  531,  529,
 /*  9170 */   796,  796,  796,  796,  796,  796,  796,  796,  269,  796,
 /*  9180 */   279,  796,  796,  796,  796,  796,  796,  796,  796,  537,
 /*  9190 */   530,  268,  796,  796,  533,  532,  796,  531,  529,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     2,   73,    4,   75,   42,    7,    8,   45,   10,   48,
 /*    10 */    42,   43,   14,   45,   86,   17,   18,   48,   20,   21,
 /*    20 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*    30 */    32,   33,   34,   35,   36,   37,   38,   39,    2,   41,
 /*    40 */    15,   43,   17,   45,    8,   43,   10,   45,   50,   42,
 /*    50 */    43,    1,   45,   55,   56,   57,   58,    5,    4,   37,
 /*    60 */    10,    7,    8,   41,   10,   10,   12,   42,   43,   10,
 /*    70 */    45,   17,   18,    7,   20,   21,   22,   23,   24,   25,
 /*    80 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*    90 */    36,   37,   38,   39,    1,   41,   15,   43,   72,   45,
 /*   100 */    48,    4,    3,   10,   50,   79,   80,   81,   82,   55,
 /*   110 */    56,   57,   58,   34,   35,   36,   37,    7,    3,   43,
 /*   120 */    41,   45,   12,   42,   14,   10,   45,   17,   18,   10,
 /*   130 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   140 */    30,   31,   32,   33,   34,   35,   36,   37,    7,   43,
 /*   150 */    48,   41,   11,   61,   44,   14,   64,   65,   17,   18,
 /*   160 */    48,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   170 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   15,
 /*   180 */    46,   46,   41,   21,   22,   23,   24,   25,   26,   27,
 /*   190 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   200 */    59,    1,    5,   41,   72,   46,   42,   43,    7,   45,
 /*   210 */    10,   79,   80,   81,   82,   14,   46,   46,   17,   18,
 /*   220 */    46,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   230 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*   240 */    46,    3,   41,   42,   46,   48,   14,   46,   10,   17,
 /*   250 */    18,   43,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   260 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   270 */     7,    5,    3,   41,   42,   46,   10,   14,   46,   10,
 /*   280 */    17,   18,    2,   20,   21,   22,   23,   24,   25,   26,
 /*   290 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   300 */    37,    7,    5,    5,   41,   42,    5,   10,   14,   46,
 /*   310 */    10,   17,   18,    7,   20,   21,   22,   23,   24,   25,
 /*   320 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   330 */    36,   37,    1,    3,   10,   41,   42,    7,   10,   44,
 /*   340 */    46,   10,    7,    3,   14,   46,    5,   17,   18,   46,
 /*   350 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   360 */    30,   31,   32,   33,   34,   35,   36,   37,    3,   46,
 /*   370 */    10,   41,    7,   46,    5,   46,   43,   10,   48,   14,
 /*   380 */    46,   57,   17,   18,   46,   20,   21,   22,   23,   24,
 /*   390 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   400 */    35,   36,   37,   46,    7,   46,   41,   46,   46,   46,
 /*   410 */    46,   14,   46,   48,   17,   18,   46,   20,   21,   22,
 /*   420 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   430 */    33,   34,   35,   36,   37,   46,    7,   46,   41,   46,
 /*   440 */    46,   46,   46,   14,   44,   48,   17,   18,   12,   20,
 /*   450 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   460 */    31,   32,   33,   34,   35,   36,   37,    7,    2,   12,
 /*   470 */    41,    1,   10,   17,   14,   46,   44,   17,   18,   10,
 /*   480 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   490 */    30,   31,   32,   33,   34,   35,   36,   37,    7,    1,
 /*   500 */    12,   41,    3,    1,   44,   14,    3,   54,   17,   18,
 /*   510 */    72,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   520 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   62,
 /*   530 */    10,   72,   41,   66,   67,   68,   69,   70,   71,   72,
 /*   540 */    73,   83,   75,   76,   77,   78,    9,   83,   83,   72,
 /*   550 */    59,   84,   85,   86,   72,   10,   89,   90,    7,   92,
 /*   560 */    93,   79,   80,   81,   82,   14,   85,   60,   17,   18,
 /*   570 */    96,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   580 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*   590 */    96,   96,   41,   96,   96,   96,   14,   46,   96,   17,
 /*   600 */    18,   96,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   610 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   620 */     7,   96,   96,   41,   96,   96,   96,   14,   46,   96,
 /*   630 */    17,   18,   96,   20,   21,   22,   23,   24,   25,   26,
 /*   640 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   650 */    37,    7,   96,   96,   41,   96,   96,   96,   14,   46,
 /*   660 */    96,   17,   18,   96,   20,   21,   22,   23,   24,   25,
 /*   670 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   680 */    36,   37,    7,   96,   96,   41,   96,   96,   96,   14,
 /*   690 */    46,   96,   17,   18,   96,   20,   21,   22,   23,   24,
 /*   700 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   710 */    35,   36,   37,   96,    7,   96,   41,   96,   96,   96,
 /*   720 */    96,   14,   96,   48,   17,   18,   96,   20,   21,   22,
 /*   730 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   740 */    33,   34,   35,   36,   37,    7,   96,   96,   41,   96,
 /*   750 */    96,   44,   14,   96,   96,   17,   18,   96,   20,   21,
 /*   760 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   770 */    32,   33,   34,   35,   36,   37,    7,   96,   96,   41,
 /*   780 */    96,   96,   44,   14,   96,   96,   17,   18,   96,   20,
 /*   790 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   800 */    31,   32,   33,   34,   35,   36,   37,    7,   96,   96,
 /*   810 */    41,   96,   96,   44,   14,   96,   96,   17,   18,   96,
 /*   820 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   830 */    30,   31,   32,   33,   34,   35,   36,   37,    7,   96,
 /*   840 */    96,   41,   96,   96,   44,   14,   96,   96,   17,   18,
 /*   850 */    96,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   860 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*   870 */    96,   96,   41,   96,   96,   44,   14,   96,   96,   17,
 /*   880 */    18,   96,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   890 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   900 */     7,   96,   96,   41,   96,   96,   44,   14,   96,   96,
 /*   910 */    17,   18,   96,   20,   21,   22,   23,   24,   25,   26,
 /*   920 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   930 */    37,    7,   96,   96,   41,   96,   96,   44,   14,   96,
 /*   940 */    96,   17,   18,   96,   20,   21,   22,   23,   24,   25,
 /*   950 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   960 */    36,   37,    7,   96,   96,   41,   96,   96,   44,   14,
 /*   970 */    96,   96,   17,   18,   96,   20,   21,   22,   23,   24,
 /*   980 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   990 */    35,   36,   37,    7,   96,   96,   41,   96,   96,   44,
 /*  1000 */    14,   96,   96,   17,   18,   96,   20,   21,   22,   23,
 /*  1010 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1020 */    34,   35,   36,   37,    7,   96,   96,   41,   96,   96,
 /*  1030 */    44,   14,   96,   96,   17,   18,   96,   20,   21,   22,
 /*  1040 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1050 */    33,   34,   35,   36,   37,    7,   96,   96,   41,   96,
 /*  1060 */    96,   44,   14,   96,   96,   17,   18,   96,   20,   21,
 /*  1070 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1080 */    32,   33,   34,   35,   36,   37,    7,   96,   96,   41,
 /*  1090 */    96,   96,   44,   14,   96,   96,   17,   18,   96,   20,
 /*  1100 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1110 */    31,   32,   33,   34,   35,   36,   37,    7,   96,   96,
 /*  1120 */    41,   96,   96,   44,   14,   96,   96,   17,   18,   96,
 /*  1130 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1140 */    30,   31,   32,   33,   34,   35,   36,   37,    7,   96,
 /*  1150 */    96,   41,   96,   96,   44,   14,   96,   96,   17,   18,
 /*  1160 */    96,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1170 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*  1180 */    96,   96,   41,   96,   96,   44,   14,   96,   96,   17,
 /*  1190 */    18,   96,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1200 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  1210 */     7,   96,   96,   41,   96,   96,   44,   14,   96,   96,
 /*  1220 */    17,   18,   96,   20,   21,   22,   23,   24,   25,   26,
 /*  1230 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  1240 */    37,    7,   96,   96,   41,   96,   96,   44,   14,   96,
 /*  1250 */    96,   17,   18,   96,   20,   21,   22,   23,   24,   25,
 /*  1260 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1270 */    36,   37,    7,   96,   96,   41,   96,   96,   44,   14,
 /*  1280 */    96,   96,   17,   18,   96,   20,   21,   22,   23,   24,
 /*  1290 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1300 */    35,   36,   37,    7,   96,   96,   41,   96,   96,   44,
 /*  1310 */    14,   96,   96,   17,   18,   96,   20,   21,   22,   23,
 /*  1320 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1330 */    34,   35,   36,   37,    7,   96,   96,   41,   96,   96,
 /*  1340 */    44,   14,   96,   96,   17,   18,   96,   20,   21,   22,
 /*  1350 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1360 */    33,   34,   35,   36,   37,    7,   96,   96,   41,   96,
 /*  1370 */    96,   44,   14,   96,   96,   17,   18,   96,   20,   21,
 /*  1380 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1390 */    32,   33,   34,   35,   36,   37,    7,   96,   96,   41,
 /*  1400 */    96,   96,   44,   14,   96,   96,   17,   18,   96,   20,
 /*  1410 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1420 */    31,   32,   33,   34,   35,   36,   37,    7,   96,   96,
 /*  1430 */    41,   96,   96,   44,   14,   96,   96,   17,   18,   96,
 /*  1440 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1450 */    30,   31,   32,   33,   34,   35,   36,   37,    7,   96,
 /*  1460 */    96,   41,   96,   96,   96,   14,   46,   96,   17,   18,
 /*  1470 */    96,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1480 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*  1490 */    96,   96,   41,   96,   96,   96,   14,   46,   96,   17,
 /*  1500 */    18,   96,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1510 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  1520 */     7,   96,   96,   41,   96,   96,   96,   14,   46,   96,
 /*  1530 */    17,   18,   96,   20,   21,   22,   23,   24,   25,   26,
 /*  1540 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  1550 */    37,    7,   96,   96,   41,   96,   96,   96,   14,   46,
 /*  1560 */    96,   17,   18,   96,   20,   21,   22,   23,   24,   25,
 /*  1570 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1580 */    36,   37,    7,   96,   96,   41,   96,   96,   96,   14,
 /*  1590 */    46,   96,   17,   18,   96,   20,   21,   22,   23,   24,
 /*  1600 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1610 */    35,   36,   37,    7,   96,   96,   41,   96,   96,   96,
 /*  1620 */    14,   46,   96,   17,   18,   96,   20,   21,   22,   23,
 /*  1630 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1640 */    34,   35,   36,   37,    7,   96,   96,   41,   96,   96,
 /*  1650 */    96,   14,   46,   96,   17,   18,   96,   20,   21,   22,
 /*  1660 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1670 */    33,   34,   35,   36,   37,    7,   96,   96,   41,   96,
 /*  1680 */    96,   96,   14,   46,   96,   17,   18,   96,   20,   21,
 /*  1690 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1700 */    32,   33,   34,   35,   36,   37,    1,    1,    2,   41,
 /*  1710 */     4,   96,    7,   96,   46,   96,   10,   96,   96,   14,
 /*  1720 */    96,   15,   17,   18,   96,   20,   21,   22,   23,   24,
 /*  1730 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1740 */    35,   36,   37,    7,   96,   96,   41,   96,   42,   43,
 /*  1750 */    14,   45,   96,   17,   18,   96,   20,   21,   22,   23,
 /*  1760 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1770 */    34,   35,   36,   37,    1,   96,   96,   41,   96,   96,
 /*  1780 */     7,   96,   96,   96,   48,   96,   96,   14,   96,   96,
 /*  1790 */    17,   18,   96,   20,   21,   22,   23,   24,   25,   26,
 /*  1800 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  1810 */    37,    7,   96,   96,   41,   96,   96,   96,   14,   96,
 /*  1820 */    96,   17,   18,   96,   20,   21,   22,   23,   24,   25,
 /*  1830 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  1840 */    36,   37,    1,   96,   96,   41,   96,   96,    7,   96,
 /*  1850 */    96,   96,   48,   96,   96,   14,   96,   96,   17,   18,
 /*  1860 */    96,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1870 */    29,   30,   31,   32,   33,   34,   35,   36,   37,    7,
 /*  1880 */    96,   96,   41,   96,   96,   96,   14,   96,   96,   17,
 /*  1890 */    18,   96,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1900 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  1910 */    96,   96,    7,   41,   96,   96,   96,   96,   96,   14,
 /*  1920 */    96,   96,   17,   18,   52,   20,   21,   22,   23,   24,
 /*  1930 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1940 */    35,   36,   37,   96,   14,   96,   41,   17,   18,   96,
 /*  1950 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1960 */    30,   31,   32,   33,   34,   35,   36,   37,   72,   17,
 /*  1970 */    18,   41,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1980 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  1990 */    94,   95,   96,   41,   96,   72,   17,   18,   46,   20,
 /*  2000 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  2010 */    31,   32,   33,   34,   35,   36,   37,   94,   95,   96,
 /*  2020 */    41,   96,   96,   17,   18,   46,   20,   21,   22,   23,
 /*  2030 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  2040 */    34,   35,   36,   37,   96,   96,   96,   41,   96,   96,
 /*  2050 */    17,   18,   46,   20,   21,   22,   23,   24,   25,   26,
 /*  2060 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  2070 */    37,   96,   96,   96,   41,   96,   96,   17,   18,   46,
 /*  2080 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  2090 */    30,   31,   32,   33,   34,   35,   36,   37,   96,   96,
 /*  2100 */    96,   41,   96,   96,   17,   18,   46,   20,   21,   22,
 /*  2110 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  2120 */    33,   34,   35,   36,   37,   96,   96,   96,   41,   96,
 /*  2130 */    96,   17,   18,   46,   20,   21,   22,   23,   24,   25,
 /*  2140 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  2150 */    36,   37,   96,   96,   96,   41,   96,   96,   17,   18,
 /*  2160 */    46,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  2170 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   96,
 /*  2180 */    96,   96,   41,   96,   96,   17,   18,   46,   20,   21,
 /*  2190 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2200 */    32,   33,   34,   35,   36,   37,   96,   96,   96,   41,
 /*  2210 */    96,   96,   17,   18,   46,   20,   21,   22,   23,   24,
 /*  2220 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  2230 */    35,   36,   37,   96,   96,   96,   41,   96,   96,   17,
 /*  2240 */    18,   46,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  2250 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  2260 */    96,   96,   96,   41,   96,   96,   17,   18,   46,   20,
 /*  2270 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  2280 */    31,   32,   33,   34,   35,   36,   37,   96,   96,   96,
 /*  2290 */    41,   96,   96,   17,   18,   46,   20,   21,   22,   23,
 /*  2300 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  2310 */    34,   35,   36,   37,   96,   96,   96,   41,   20,   21,
 /*  2320 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2330 */    32,   33,   34,   35,   36,   37,   96,   96,   96,   41,
 /*  2340 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2350 */    32,   33,   34,   35,   36,   37,   96,   96,   96,   41,
 /*  2360 */    96,   96,   96,   23,   24,   25,   26,   27,   28,   29,
 /*  2370 */    30,   31,   32,   33,   34,   35,   36,   37,    0,   96,
 /*  2380 */    96,   41,    4,   96,   96,   96,    8,   96,   10,   24,
 /*  2390 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  2400 */    35,   36,   37,    1,    2,    4,   41,   96,   96,    8,
 /*  2410 */    96,   10,   10,   96,   96,   96,   38,   39,   17,   96,
 /*  2420 */    96,   43,   96,   45,   96,   96,   48,   96,   50,   51,
 /*  2430 */    96,   53,   96,   55,   56,   57,   58,   96,   96,   38,
 /*  2440 */    39,   96,   96,   42,   43,   43,   45,   46,    4,   96,
 /*  2450 */    96,   50,    8,   96,   10,   96,   55,   56,   57,   58,
 /*  2460 */    96,   17,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  2470 */    34,   35,   36,   37,   96,   96,   96,   41,   96,   96,
 /*  2480 */    96,   96,   38,   39,   96,   96,   42,   43,   96,   45,
 /*  2490 */    46,    4,   62,   96,   50,    8,   96,   10,   96,   55,
 /*  2500 */    56,   57,   58,   73,   17,   75,   96,   96,   96,   96,
 /*  2510 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  2520 */    90,   96,   92,   93,   96,   38,   39,   96,   62,   42,
 /*  2530 */    43,   96,   45,   96,    4,   96,   96,   50,    8,   73,
 /*  2540 */    10,   75,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  2550 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  2560 */    96,   96,   96,   96,   96,   96,   36,   96,   38,   39,
 /*  2570 */    96,   96,   96,   43,   96,   45,   46,   96,    4,   62,
 /*  2580 */    50,   96,    8,   96,   10,   55,   56,   57,   58,   96,
 /*  2590 */    73,   17,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  2600 */    96,   84,   85,   86,   96,   96,   89,   90,   96,   92,
 /*  2610 */    93,   96,   38,   39,   96,   62,   42,   43,   96,   45,
 /*  2620 */    96,    4,   96,   96,   50,    8,   73,   10,   75,   55,
 /*  2630 */    56,   57,   58,   96,   96,   96,   96,   84,   85,   86,
 /*  2640 */    96,   72,   89,   90,   96,   92,   93,   96,   79,   80,
 /*  2650 */    81,   82,   96,   36,   96,   38,   39,   96,   96,   96,
 /*  2660 */    43,   96,   45,   46,   96,    4,   96,   50,   96,    8,
 /*  2670 */    96,   10,   55,   56,   57,   58,   30,   31,   32,   33,
 /*  2680 */    34,   35,   36,   37,   96,   96,   96,   41,   96,   32,
 /*  2690 */    33,   34,   35,   36,   37,   96,   96,   36,   41,   38,
 /*  2700 */    39,   62,   96,   96,   43,   96,   45,   46,   96,    4,
 /*  2710 */    96,   50,   73,    8,   75,   10,   55,   56,   57,   58,
 /*  2720 */    96,   96,   96,   84,   85,   86,   72,   96,   89,   90,
 /*  2730 */    96,   92,   93,   79,   80,   81,   82,   96,   96,   96,
 /*  2740 */    96,   36,   96,   38,   39,   96,   96,   96,   43,   96,
 /*  2750 */    45,   46,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  2760 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  2770 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2780 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  2790 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  2800 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  2810 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2820 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   36,
 /*  2830 */    96,   38,   39,   96,   96,   96,   43,   96,   45,   96,
 /*  2840 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  2850 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2860 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2870 */    96,   96,   96,   36,   96,   38,   39,   96,   96,   96,
 /*  2880 */    43,   96,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  2890 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  2900 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2910 */    96,   96,   96,   96,   96,   96,   96,   36,   96,   38,
 /*  2920 */    39,   96,   96,   96,   43,   96,   45,   96,   96,    4,
 /*  2930 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  2940 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2950 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  2960 */    96,   36,   96,   38,   39,   96,   96,   96,   43,   96,
 /*  2970 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  2980 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  2990 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3000 */    96,   96,   96,   96,   96,   36,   96,   38,   39,   96,
 /*  3010 */    96,   96,   43,   96,   45,   96,   96,    4,   96,   50,
 /*  3020 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  3030 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3040 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   36,
 /*  3050 */    96,   38,   39,   96,   96,   96,   43,   96,   45,   96,
 /*  3060 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  3070 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3080 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3090 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  3100 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  3110 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  3120 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3130 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  3140 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  3150 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  3160 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3170 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3180 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  3190 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  3200 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  3210 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3220 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  3230 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  3240 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  3250 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3260 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3270 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  3280 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  3290 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3300 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3310 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  3320 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  3330 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  3340 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3350 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  3360 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  3370 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  3380 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3390 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3400 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  3410 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  3420 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  3430 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3440 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  3450 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  3460 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  3470 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3480 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3490 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  3500 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  3510 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3520 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3530 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  3540 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  3550 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  3560 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3570 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  3580 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  3590 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  3600 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3610 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3620 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  3630 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  3640 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  3650 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3660 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  3670 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  3680 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  3690 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3700 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3710 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  3720 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  3730 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3740 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3750 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  3760 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  3770 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  3780 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3790 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  3800 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  3810 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  3820 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3830 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3840 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  3850 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  3860 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  3870 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3880 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  3890 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  3900 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  3910 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3920 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3930 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  3940 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  3950 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3960 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  3970 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  3980 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  3990 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  4000 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4010 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  4020 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  4030 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  4040 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4050 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4060 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  4070 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  4080 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  4090 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4100 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  4110 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  4120 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  4130 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4140 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4150 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  4160 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  4170 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4180 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4190 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  4200 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  4210 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  4220 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4230 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  4240 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  4250 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  4260 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4270 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4280 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  4290 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  4300 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  4310 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4320 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  4330 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  4340 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  4350 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4360 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4370 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  4380 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  4390 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4400 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4410 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  4420 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  4430 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  4440 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4450 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  4460 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  4470 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  4480 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4490 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4500 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  4510 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  4520 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  4530 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4540 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  4550 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  4560 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  4570 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4580 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4590 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  4600 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  4610 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4620 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4630 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  4640 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  4650 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  4660 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4670 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  4680 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  4690 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  4700 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4710 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4720 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  4730 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  4740 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  4750 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4760 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  4770 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  4780 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  4790 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4800 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4810 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  4820 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  4830 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4840 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4850 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  4860 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  4870 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  4880 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4890 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  4900 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  4910 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  4920 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4930 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4940 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  4950 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  4960 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  4970 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  4980 */    96,   96,   96,   96,   96,   36,   96,   38,   39,   96,
 /*  4990 */    96,   96,   43,   96,   45,   96,   96,    4,   96,   50,
 /*  5000 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  5010 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5020 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   36,
 /*  5030 */    96,   38,   39,   96,   96,   96,   43,   96,   45,   96,
 /*  5040 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  5050 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5060 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5070 */    96,   96,   96,   36,   96,   38,   39,   96,   96,   96,
 /*  5080 */    43,   96,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  5090 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  5100 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5110 */    96,   96,   96,   96,   96,   96,   96,   36,   96,   38,
 /*  5120 */    39,   96,   96,   96,   43,   96,   45,   96,   96,    4,
 /*  5130 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  5140 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5150 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5160 */    96,   36,   96,   38,   39,   96,   96,   96,   43,   96,
 /*  5170 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  5180 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  5190 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5200 */    96,   96,   96,   96,   96,   36,   96,   38,   39,   96,
 /*  5210 */    96,   96,   43,   96,   45,   96,   96,    4,   96,   50,
 /*  5220 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  5230 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5240 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   36,
 /*  5250 */    96,   38,   39,   96,   96,   96,   43,   96,   45,   96,
 /*  5260 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  5270 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5280 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5290 */    96,   96,   96,   36,   96,   38,   39,   96,   96,   96,
 /*  5300 */    43,   96,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  5310 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  5320 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5330 */    96,   96,   96,   96,   96,   96,   96,   36,   96,   38,
 /*  5340 */    39,   96,   96,   96,   43,   96,   45,   96,   96,    4,
 /*  5350 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  5360 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5370 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5380 */    96,   36,   96,   38,   39,   96,   96,   96,   43,   96,
 /*  5390 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  5400 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  5410 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5420 */    96,   96,   96,   96,   96,   36,   96,   38,   39,   96,
 /*  5430 */    96,   96,   43,   96,   45,   96,   96,    4,   96,   50,
 /*  5440 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  5450 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5460 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   36,
 /*  5470 */    96,   38,   39,   96,   96,   96,   43,   96,   45,   96,
 /*  5480 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  5490 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5500 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5510 */    96,   96,   96,   36,   96,   38,   39,   96,   96,   96,
 /*  5520 */    43,   96,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  5530 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  5540 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5550 */    96,   96,   96,   96,   96,   96,   96,   36,   96,   38,
 /*  5560 */    39,   96,   96,   96,   43,   96,   45,   96,   96,    4,
 /*  5570 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  5580 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5590 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5600 */    96,   36,   96,   38,   39,   96,   96,   96,   43,   96,
 /*  5610 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  5620 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  5630 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5640 */    96,   96,   96,   96,   96,   36,   96,   38,   39,   96,
 /*  5650 */    96,   96,   43,   96,   45,   96,   96,    4,   96,   50,
 /*  5660 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  5670 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5680 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   36,
 /*  5690 */    96,   38,   39,   96,   96,   96,   43,   96,   45,   96,
 /*  5700 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  5710 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5720 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5730 */    96,   96,   96,   36,   96,   38,   39,   96,   96,   96,
 /*  5740 */    43,   96,   45,    2,   96,    4,   96,   50,   96,    8,
 /*  5750 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  5760 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5770 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  5780 */    39,   96,   96,   96,   43,   96,   45,   96,   96,    4,
 /*  5790 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  5800 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5810 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5820 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   96,
 /*  5830 */    45,   96,   96,    4,   49,   50,   96,    8,   96,   10,
 /*  5840 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  5850 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5860 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  5870 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  5880 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  5890 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5900 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5910 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  5920 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  5930 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5940 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5950 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  5960 */    43,   44,   45,   96,   96,    4,   96,   50,   96,    8,
 /*  5970 */    96,   10,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  5980 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  5990 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   38,
 /*  6000 */    39,   96,   96,   96,   43,   44,   45,   96,   96,    4,
 /*  6010 */    96,   50,   96,    8,   96,   10,   55,   56,   57,   58,
 /*  6020 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6030 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6040 */    96,   96,   96,   38,   39,   96,   96,   96,   43,   44,
 /*  6050 */    45,   96,   96,    4,   96,   50,   96,    8,   96,   10,
 /*  6060 */    55,   56,   57,   58,   96,   96,   96,   96,   96,   96,
 /*  6070 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6080 */    96,   96,   96,   96,   96,   96,   96,   38,   39,   96,
 /*  6090 */    96,   96,   43,   44,   45,   96,   96,    4,   96,   50,
 /*  6100 */    96,    8,   96,   10,   55,   56,   57,   58,   96,   96,
 /*  6110 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6120 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6130 */    96,   38,   39,   96,   96,   96,   43,   44,   45,   96,
 /*  6140 */    96,    4,   96,   50,   96,    8,   96,   10,   55,   56,
 /*  6150 */    57,   58,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6160 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6170 */    96,   96,   96,   96,   96,   38,   39,   96,   96,   96,
 /*  6180 */    43,   44,   45,   96,   96,   96,   96,   50,   96,   96,
 /*  6190 */    96,   96,   55,   56,   57,   58,   96,   96,   96,   96,
 /*  6200 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   71,
 /*  6210 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  6220 */    96,   96,   84,   85,   86,   87,   88,   89,   90,   96,
 /*  6230 */    92,   93,   96,   96,    2,   96,    4,   96,   62,   96,
 /*  6240 */     8,   96,   10,   96,   96,   96,   96,   71,   96,   73,
 /*  6250 */    74,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6260 */    84,   85,   86,   96,   96,   89,   90,   91,   92,   93,
 /*  6270 */    38,   39,    4,   96,   96,   43,    8,   45,   10,   96,
 /*  6280 */    96,   96,   50,   96,   96,   96,   96,   55,   56,   57,
 /*  6290 */    58,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6300 */    96,   96,   96,   96,   96,   96,   38,   39,   96,   96,
 /*  6310 */    96,   43,   96,   45,   96,   96,   96,   96,   50,   96,
 /*  6320 */    96,   96,   96,   55,   56,   57,   58,   96,   62,   96,
 /*  6330 */    96,   96,   96,   96,   96,   96,   96,   71,   96,   73,
 /*  6340 */    74,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6350 */    84,   85,   86,   62,   96,   89,   90,   96,   92,   93,
 /*  6360 */    96,   96,   71,   96,   73,   74,   75,   96,   96,   96,
 /*  6370 */    96,   96,   96,   96,   96,   84,   85,   86,   96,   96,
 /*  6380 */    89,   90,   96,   92,   93,   96,   62,   96,   96,   96,
 /*  6390 */    96,   96,   96,   96,   96,   71,   96,   73,   74,   75,
 /*  6400 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  6410 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  6420 */    96,   96,   96,   96,   71,   96,   73,   74,   75,   96,
 /*  6430 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  6440 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   71,
 /*  6450 */    96,   73,   74,   75,   96,   96,   96,   96,   96,   96,
 /*  6460 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  6470 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  6480 */    96,   71,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  6490 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  6500 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  6510 */    71,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  6520 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  6530 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  6540 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  6550 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  6560 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  6570 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6580 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  6590 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  6600 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  6610 */    85,   86,   62,   96,   89,   90,   96,   92,   93,   96,
 /*  6620 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  6630 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  6640 */    90,   96,   92,   93,   62,   96,   96,   96,   96,   96,
 /*  6650 */    96,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  6660 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  6670 */    96,   89,   90,   62,   92,   93,   96,   96,   96,   96,
 /*  6680 */    96,   96,   96,   96,   73,   96,   75,   96,   96,   96,
 /*  6690 */    96,   96,   96,   96,   96,   84,   85,   86,   62,   96,
 /*  6700 */    89,   90,   96,   92,   93,   96,   96,   96,   96,   73,
 /*  6710 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6720 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  6730 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6740 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  6750 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   62,
 /*  6760 */    92,   93,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  6770 */    73,   96,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  6780 */    96,   84,   85,   86,   62,   96,   89,   90,   96,   92,
 /*  6790 */    93,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  6800 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  6810 */    96,   89,   90,   96,   92,   93,   62,   96,   96,   96,
 /*  6820 */    96,   96,   96,   96,   96,   96,   96,   73,   96,   75,
 /*  6830 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  6840 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  6850 */    96,   96,   96,   96,   96,   96,   73,   96,   75,   96,
 /*  6860 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  6870 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   96,
 /*  6880 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  6890 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  6900 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  6910 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  6920 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  6930 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  6940 */    96,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  6950 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  6960 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  6970 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  6980 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  6990 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  7000 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7010 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  7020 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  7030 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  7040 */    85,   86,   62,   96,   89,   90,   96,   92,   93,   96,
 /*  7050 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  7060 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  7070 */    90,   96,   92,   93,   62,   96,   96,   96,   96,   96,
 /*  7080 */    96,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  7090 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  7100 */    96,   89,   90,   62,   92,   93,   96,   96,   96,   96,
 /*  7110 */    96,   96,   96,   96,   73,   96,   75,   96,   96,   96,
 /*  7120 */    96,   96,   96,   96,   96,   84,   85,   86,   62,   96,
 /*  7130 */    89,   90,   96,   92,   93,   96,   96,   96,   96,   73,
 /*  7140 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7150 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  7160 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7170 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  7180 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   62,
 /*  7190 */    92,   93,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7200 */    73,   96,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  7210 */    96,   84,   85,   86,   62,   96,   89,   90,   96,   92,
 /*  7220 */    93,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  7230 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  7240 */    96,   89,   90,   96,   92,   93,   62,   96,   96,   96,
 /*  7250 */    96,   96,   96,   96,   96,   96,   96,   73,   96,   75,
 /*  7260 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  7270 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  7280 */    96,   96,   96,   96,   96,   96,   73,   96,   75,   96,
 /*  7290 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  7300 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   96,
 /*  7310 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  7320 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  7330 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  7340 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  7350 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  7360 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  7370 */    96,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  7380 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  7390 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  7400 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  7410 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  7420 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  7430 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7440 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  7450 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  7460 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  7470 */    85,   86,   62,   96,   89,   90,   96,   92,   93,   96,
 /*  7480 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  7490 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  7500 */    90,   96,   92,   93,   62,   96,   96,   96,   96,   96,
 /*  7510 */    96,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  7520 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  7530 */    96,   89,   90,   62,   92,   93,   96,   96,   96,   96,
 /*  7540 */    96,   96,   96,   96,   73,   96,   75,   96,   96,   96,
 /*  7550 */    96,   96,   96,   96,   96,   84,   85,   86,   62,   96,
 /*  7560 */    89,   90,   96,   92,   93,   96,   96,   96,   96,   73,
 /*  7570 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7580 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  7590 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7600 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  7610 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   62,
 /*  7620 */    92,   93,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7630 */    73,   96,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  7640 */    96,   84,   85,   86,   62,   96,   89,   90,   96,   92,
 /*  7650 */    93,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  7660 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  7670 */    96,   89,   90,   96,   92,   93,   62,   96,   96,   96,
 /*  7680 */    96,   96,   96,   96,   96,   96,   96,   73,   96,   75,
 /*  7690 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  7700 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  7710 */    96,   96,   96,   96,   96,   96,   73,   96,   75,   96,
 /*  7720 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  7730 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   96,
 /*  7740 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  7750 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  7760 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  7770 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  7780 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  7790 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  7800 */    96,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  7810 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  7820 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  7830 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  7840 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  7850 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  7860 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  7870 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  7880 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  7890 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  7900 */    85,   86,   62,   96,   89,   90,   96,   92,   93,   96,
 /*  7910 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  7920 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  7930 */    90,   96,   92,   93,   62,   96,   96,   96,   96,   96,
 /*  7940 */    96,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  7950 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  7960 */    96,   89,   90,   62,   92,   93,   96,   96,   96,   96,
 /*  7970 */    96,   96,   96,   96,   73,   96,   75,   96,   96,   96,
 /*  7980 */    96,   96,   96,   96,   96,   84,   85,   86,   62,   96,
 /*  7990 */    89,   90,   96,   92,   93,   96,   96,   96,   96,   73,
 /*  8000 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8010 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  8020 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8030 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  8040 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   62,
 /*  8050 */    92,   93,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8060 */    73,   96,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  8070 */    96,   84,   85,   86,   62,   96,   89,   90,   96,   92,
 /*  8080 */    93,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  8090 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  8100 */    96,   89,   90,   96,   92,   93,   62,   96,   96,   96,
 /*  8110 */    96,   96,   96,   96,   96,   96,   96,   73,   96,   75,
 /*  8120 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  8130 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  8140 */    96,   96,   96,   96,   96,   96,   73,   96,   75,   96,
 /*  8150 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  8160 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   96,
 /*  8170 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  8180 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  8190 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  8200 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  8210 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  8220 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  8230 */    96,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  8240 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  8250 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  8260 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  8270 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  8280 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  8290 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8300 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  8310 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  8320 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  8330 */    85,   86,   62,   96,   89,   90,   96,   92,   93,   96,
 /*  8340 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  8350 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  8360 */    90,   96,   92,   93,   62,   96,   96,   96,   96,   96,
 /*  8370 */    96,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  8380 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  8390 */    96,   89,   90,   62,   92,   93,   96,   96,   96,   96,
 /*  8400 */    96,   96,   96,   96,   73,   96,   75,   96,   96,   96,
 /*  8410 */    96,   96,   96,   96,   96,   84,   85,   86,   62,   96,
 /*  8420 */    89,   90,   96,   92,   93,   96,   96,   96,   96,   73,
 /*  8430 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8440 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  8450 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8460 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  8470 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   62,
 /*  8480 */    92,   93,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8490 */    73,   96,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  8500 */    96,   84,   85,   86,   62,   96,   89,   90,   96,   92,
 /*  8510 */    93,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  8520 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  8530 */    96,   89,   90,   96,   92,   93,   62,   96,   96,   96,
 /*  8540 */    96,   96,   96,   96,   96,   96,   96,   73,   96,   75,
 /*  8550 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  8560 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  8570 */    96,   96,   96,   96,   96,   96,   73,   96,   75,   96,
 /*  8580 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  8590 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   96,
 /*  8600 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  8610 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  8620 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  8630 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  8640 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  8650 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  8660 */    96,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  8670 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  8680 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  8690 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  8700 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  8710 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  8720 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8730 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  8740 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  8750 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  8760 */    85,   86,   62,   96,   89,   90,   96,   92,   93,   96,
 /*  8770 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  8780 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  8790 */    90,   96,   92,   93,   62,   96,   96,   96,   96,   96,
 /*  8800 */    96,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  8810 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  8820 */    96,   89,   90,   62,   92,   93,   96,   96,   96,   96,
 /*  8830 */    96,   96,   96,   96,   73,   96,   75,   96,   96,   96,
 /*  8840 */    96,   96,   96,   96,   96,   84,   85,   86,   62,   96,
 /*  8850 */    89,   90,   96,   92,   93,   96,   96,   96,   96,   73,
 /*  8860 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8870 */    84,   85,   86,   96,   96,   89,   90,   96,   92,   93,
 /*  8880 */    62,   96,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8890 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  8900 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   62,
 /*  8910 */    92,   93,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  8920 */    73,   96,   75,   96,   96,   96,   96,   96,   96,   96,
 /*  8930 */    96,   84,   85,   86,   62,   96,   89,   90,   96,   92,
 /*  8940 */    93,   96,   96,   96,   96,   73,   96,   75,   96,   96,
 /*  8950 */    96,   96,   96,   96,   96,   96,   84,   85,   86,   96,
 /*  8960 */    96,   89,   90,   96,   92,   93,   62,   96,   96,   96,
 /*  8970 */    96,   96,   96,   96,   96,   96,   96,   73,   96,   75,
 /*  8980 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  8990 */    86,   96,   96,   89,   90,   62,   92,   93,   96,   96,
 /*  9000 */    96,   96,   96,   96,   96,   96,   73,   96,   75,   96,
 /*  9010 */    96,   96,   96,   96,   96,   96,   96,   84,   85,   86,
 /*  9020 */    62,   96,   89,   90,   96,   92,   93,   96,   96,   96,
 /*  9030 */    96,   73,   96,   75,   96,   96,   96,   96,   96,   96,
 /*  9040 */    96,   96,   84,   85,   86,   96,   96,   89,   90,   96,
 /*  9050 */    92,   93,   62,   96,   96,   96,   96,   96,   96,   96,
 /*  9060 */    96,   96,   96,   73,   96,   75,   96,   96,   96,   96,
 /*  9070 */    96,   96,   96,   96,   84,   85,   86,   96,   96,   89,
 /*  9080 */    90,   62,   92,   93,   96,   96,   96,   96,   96,   96,
 /*  9090 */    96,   96,   73,   96,   75,   96,   96,   96,   96,   96,
 /*  9100 */    96,   96,   96,   84,   85,   86,   62,   96,   89,   90,
 /*  9110 */    96,   92,   93,   96,   96,   96,   96,   73,   96,   75,
 /*  9120 */    96,   96,   96,   96,   96,   96,   96,   96,   84,   85,
 /*  9130 */    86,   96,   96,   89,   90,   96,   92,   93,   62,   96,
 /*  9140 */    96,   96,   96,   96,   96,   96,   96,   96,   96,   73,
 /*  9150 */    96,   75,   96,   96,   96,   96,   96,   96,   96,   96,
 /*  9160 */    84,   85,   86,   96,   96,   89,   90,   62,   92,   93,
 /*  9170 */    96,   96,   96,   96,   96,   96,   96,   96,   73,   96,
 /*  9180 */    75,   96,   96,   96,   96,   96,   96,   96,   96,   84,
 /*  9190 */    85,   86,   96,   96,   89,   90,   96,   92,   93,
};
#define YY_SHIFT_USE_DFLT (-40)
#define YY_SHIFT_COUNT (355)
#define YY_SHIFT_MIN   (-39)
#define YY_SHIFT_MAX   (6268)
static const short yy_shift_ofst[] = {
 /*     0 */   507, 2378, 6232, 6268, 6137, 6093, 6049, 6268, 6268, 6268,
 /*    10 */  6005, 5961, 5917, 5873, 5829, 6268, 6268,   -2,   54, 2444,
 /*    20 */  2401, 2705, 2661, 2617, 2574, 2530, 2487, 5785, 5741, 5697,
 /*    30 */  5653, 5609, 5565, 5521, 5477, 5433, 5389, 5345, 5301, 5257,
 /*    40 */  5213, 5169, 5125, 5081, 5037, 4993, 4949, 4905, 4861, 4817,
 /*    50 */  4773, 4729, 4685, 4641, 4597, 4553, 4509, 4465, 4421, 4377,
 /*    60 */  4333, 4289, 4245, 4201, 4157, 4113, 4069, 4025, 3981, 3937,
 /*    70 */  3893, 3849, 3805, 3761, 3717, 3673, 3629, 3585, 3541, 3497,
 /*    80 */  3453, 3409, 3365, 3321, 3277, 3233, 3189, 3145, 3101, 3057,
 /*    90 */  3013, 2969, 2925, 2881, 2837, 2793, 2749, 6268, 6268, 6268,
 /*   100 */  6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268,
 /*   110 */  6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268,
 /*   120 */  6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268,
 /*   130 */  6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268,
 /*   140 */  6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268, 6268,
 /*   150 */  6268, 6268, 6268,   36,  520,  520,  520,  520, 1706, 2402,
 /*   160 */   545,  269,  324,  297,  238,  115,  266,  537,  537,  537,
 /*   170 */   520,  520,  365,  330,  294,  263,  232,  201,  141,  110,
 /*   180 */  1872, 1841, 1804, 1773, 1736, 1705, 1668, 1637, 1606, 1575,
 /*   190 */  1544, 1513, 1482, 1451, 1420, 1389, 1358, 1327, 1296, 1265,
 /*   200 */  1234, 1203, 1172, 1141, 1110, 1079, 1048, 1017,  986,  955,
 /*   210 */   924,  893,  862,  831,  800,  769,  738,  707,  675,  644,
 /*   220 */   613,  582,  551,  491,  460,  429,  397, 1905, 1905, 1905,
 /*   230 */  1905, 1905, 1905, 2249, 2222, 2195, 2168, 2141, 2114, 2087,
 /*   240 */  2060, 2033, 2006, 1979, 1952, 1930, 2276, 2276, 2276, 2298,
 /*   250 */  2298,  162, 2318, 2340, 2365, 2436, 2436, 2646, 2646, 2646,
 /*   260 */  2646, 2657, 2657,   25,   79,   79,  164,    7,  -32,   81,
 /*   270 */    76,  197,   52,  331,   22,   22,  200,   93,   50,    2,
 /*   280 */    22,   22,   22,   22,  -38,  453,  503,  502,  499,  488,
 /*   290 */   498,  432,  469,  456,  462,  470,  457,  340,  466,  436,
 /*   300 */   367,  400,  396,  395,  394,  393,  391,  389,  370,  360,
 /*   310 */   369,  341,  366,  364,  363,  333,  362,  361,  359,  357,
 /*   320 */   338,  334,  329,  327,  323,  303,  299,  335,  328,  306,
 /*   330 */   300,  295,  301,  298,  280,  229,  198,  194,  208,  174,
 /*   340 */   171,  170,  159,  135,  134,   99,  112,  102,  106,  119,
 /*   350 */    97,   66,   59,   55,  -31,  -39,
};
#define YY_REDUCE_USE_DFLT (-73)
#define YY_REDUCE_COUNT (171)
#define YY_REDUCE_MIN   (-72)
#define YY_REDUCE_MAX   (9105)
static const short yy_reduce_ofst[] = {
 /*     0 */    92,  467, 6176, 6138, 6378, 6378, 6353, 6324, 6291, 6266,
 /*    10 */  6439, 6439, 6439, 6439, 6439, 6439, 6410, 9105, 9076, 9044,
 /*    20 */  9019, 8990, 8958, 8933, 8904, 8872, 8847, 8818, 8786, 2517,
 /*    30 */  2517, 8761, 2517, 2517, 8732, 2517, 2517, 8700, 2517, 2517,
 /*    40 */  8675, 2517, 2517, 8646, 2517, 2517, 8614, 8589, 8560, 8528,
 /*    50 */  8503, 8474, 8442, 8417, 8388, 8356, 8331, 8302, 8270, 8245,
 /*    60 */  8216, 8184, 8159, 8130, 8098, 8073, 8044, 8012, 7987, 2466,
 /*    70 */  2639, 2553, 2517, 6955, 6926, 6894, 6869, 6840, 6808, 6783,
 /*    80 */  6754, 6722, 6697, 6668, 6636, 6611, 6582, 6525, 6550, 6496,
 /*    90 */  2517, 2517, 7958, 2517, 2517, 7926, 6464, 7901, 7872, 7840,
 /*   100 */  7815, 7786, 7754, 7729, 7700, 7668, 7643, 7614, 7582, 7557,
 /*   110 */  7528, 7496, 7471, 7442, 7410, 7385, 7356, 7324, 7299, 7270,
 /*   120 */  7238, 7213, 7184, 7152, 7127, 7098, 7066, 7041, 7012, 6980,
 /*   130 */  6955, 6926, 6894, 6869, 6840, 6808, 6783, 6754, 6722, 6697,
 /*   140 */  6668, 6636, 6611, 6582, 6550, 6525, 6496, 6464, 2639, 2553,
 /*   150 */  2517, 2466, 2430, 2654, 2569,  482,  132,   26, 1923, 1896,
 /*   160 */   -72,  477,  481,  477,  477,  477,  477,  465,  464,  458,
 /*   170 */   459,  438,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   552,  794,  690,  794,  794,  794,  794,  794,  794,  794,
 /*    10 */   794,  794,  794,  794,  794,  691,  794,  581,  794,  794,
 /*    20 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    30 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    40 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    50 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    60 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    70 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    80 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*    90 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   100 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   110 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   120 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   130 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   140 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   150 */   794,  794,  794,  794,  794,  794,  794,  794,  563,  794,
 /*   160 */   794,  794,  794,  794,  794,  794,  794,  794,  577,  794,
 /*   170 */   656,  794,  794,  794,  794,  794,  794,  794,  560,  794,
 /*   180 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   190 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   200 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   210 */   794,  794,  794,  794,  794,  794,  794,  794,  655,  794,
 /*   220 */   794,  794,  794,  794,  794,  794,  651,  703,  702,  660,
 /*   230 */   652,  650,  560,  705,  705,  705,  705,  705,  705,  705,
 /*   240 */   705,  705,  705,  705,  705,  567,  566,  705,  625,  707,
 /*   250 */   706,  721,  720,  728,  727,  715,  714,  719,  718,  717,
 /*   260 */   716,  726,  725,  563,  709,  708,  563,  565,  680,  573,
 /*   270 */   794,  794,  794,  794,  724,  722,  794,  794,  794,  732,
 /*   280 */   713,  712,  711,  710,  564,  794,  794,  794,  794,  794,
 /*   290 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   300 */   700,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   310 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   320 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   330 */   794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
 /*   340 */   794,  794,  794,  794,  794,  794,  683,  794,  794,  794,
 /*   350 */   794,  794,  794,  794,  794,  794,  793,  792,  665,  664,
 /*   360 */   580,  663,  579,  578,  662,  574,  704,  701,  576,  661,
 /*   370 */   659,  575,  561,  765,  775,  762,  770,  767,  773,  766,
 /*   380 */   772,  729,  769,  763,  764,  771,  768,  774,  675,  674,
 /*   390 */   673,  736,  746,  733,  741,  738,  744,  569,  737,  743,
 /*   400 */   730,  740,  734,  735,  742,  739,  745,  571,  568,  751,
 /*   410 */   761,  748,  756,  753,  759,  752,  758,  731,  755,  749,
 /*   420 */   750,  757,  754,  760,  572,  629,  723,  626,  649,  624,
 /*   430 */   648,  622,  647,  620,  646,  618,  645,  616,  644,  614,
 /*   440 */   643,  612,  642,  610,  641,  608,  640,  606,  639,  604,
 /*   450 */   638,  602,  637,  600,  636,  598,  635,  596,  634,  594,
 /*   460 */   633,  592,  632,  590,  631,  588,  630,  586,  628,  583,
 /*   470 */   696,  627,  623,  621,  619,  617,  615,  613,  611,  609,
 /*   480 */   607,  605,  603,  601,  599,  597,  595,  593,  591,  589,
 /*   490 */   587,  585,  584,  666,  671,  670,  668,  667,  658,  657,
 /*   500 */   654,  669,  779,  789,  776,  784,  781,  787,  679,  780,
 /*   510 */   786,  747,  783,  777,  778,  785,  782,  788,  688,  687,
 /*   520 */   686,  684,  682,  681,  791,  699,  698,  697,  695,  694,
 /*   530 */   693,  692,  689,  685,  790,  678,  677,  672,  562,  653,
 /*   540 */   561,  582,  570,  676,  559,  558,  557,  556,  555,  554,
 /*   550 */   553,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSIGN",        "LCBLOCK",       "RCBLOCK",     
  "LCURL",         "RCURL",         "COLON",         "BACKTICK",    
  "DICT",          "WHERE",         "NAME",          "COMMA",       
  "BITOR",         "FUNCTION_DEC",  "RSTREAM",       "LSTREAM",     
  "FUNCTION_CALL",  "PREPEND",       "APPEND",        "INDEX",       
  "OR",            "AND",           "BITXOR",        "BITAND",      
  "EQUALTO",       "NOTEQUALTO",    "GREATERTHAN",   "GORE",        
  "LESSTHAN",      "LORE",          "SHIFTL",        "SHIFTR",      
  "PLUS",          "MINUS",         "DIVIDE",        "TIMES",       
  "MODULO",        "POW",           "NOT",           "BITNOT",      
  "UMINUS",        "PLUSPLUS",      "COLONCOLON",    "LPAREN",      
  "RPAREN",        "LBRAC",         "RBRAC",         "COLLECTARRAY",
  "DELIMITER",     "WILDCARD",      "BACKSLASH",     "CASE",        
  "OF",            "LET",           "IN",            "PRINT",       
  "NUM",           "STRING",        "BOOLEAN",       "RANGE",       
  "OPENQUOTEERROR",  "error",         "expr",          "id",          
  "main",          "in",            "start",         "test",        
  "spec",          "assignment",    "top_stmt",      "stmt",        
  "name_chain",    "function_call",  "stmt_list",     "array_index", 
  "case_statement",  "guard_statement",  "final_guard_statement",  "horizontal_assignment_list",
  "assignment_list",  "vertical_assignment_list",  "final_vertical_assignment_list",  "where",       
  "dict",          "string",        "name_space",    "vert_stmt_list",
  "final_vert_stmt_list",  "vertical_array",  "array",         "maybe_empty_stmt_list",
  "num",           "bool",          "maybe_empty_name_chain",  "pattern",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "main ::= in",
 /*   1 */ "in ::=",
 /*   2 */ "in ::= in DELIMITER",
 /*   3 */ "in ::= in start DELIMITER",
 /*   4 */ "in ::= in test DELIMITER",
 /*   5 */ "start ::= spec",
 /*   6 */ "spec ::= assignment",
 /*   7 */ "spec ::= top_stmt",
 /*   8 */ "top_stmt ::= stmt",
 /*   9 */ "stmt ::= expr",
 /*  10 */ "name_chain ::= name_chain NAME",
 /*  11 */ "name_chain ::= NAME",
 /*  12 */ "expr ::= NAME",
 /*  13 */ "expr ::= expr RSTREAM function_call",
 /*  14 */ "expr ::= expr RSTREAM NAME",
 /*  15 */ "expr ::= function_call LSTREAM expr",
 /*  16 */ "expr ::= NAME LSTREAM expr",
 /*  17 */ "function_call ::= NAME LPAREN stmt_list RPAREN",
 /*  18 */ "function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN",
 /*  19 */ "expr ::= array_index LPAREN stmt_list RPAREN",
 /*  20 */ "function_call ::= NAME LPAREN RPAREN",
 /*  21 */ "function_call ::= array_index LPAREN RPAREN",
 /*  22 */ "expr ::= function_call",
 /*  23 */ "test ::= case_statement",
 /*  24 */ "guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER",
 /*  25 */ "guard_statement ::= name_chain ASSIGN LCBLOCK BITOR expr ASSIGN expr DELIMITER",
 /*  26 */ "guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER",
 /*  27 */ "final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK",
 /*  28 */ "final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK",
 /*  29 */ "assignment ::= final_guard_statement",
 /*  30 */ "assignment ::= name_chain ASSIGN expr",
 /*  31 */ "expr ::= LPAREN expr PLUS RPAREN",
 /*  32 */ "expr ::= LPAREN PLUS expr RPAREN",
 /*  33 */ "expr ::= LPAREN expr MINUS RPAREN",
 /*  34 */ "expr ::= LPAREN expr TIMES RPAREN",
 /*  35 */ "expr ::= LPAREN TIMES expr RPAREN",
 /*  36 */ "expr ::= LPAREN expr DIVIDE RPAREN",
 /*  37 */ "expr ::= LPAREN DIVIDE expr RPAREN",
 /*  38 */ "expr ::= LPAREN expr MODULO RPAREN",
 /*  39 */ "expr ::= LPAREN MODULO expr RPAREN",
 /*  40 */ "expr ::= LPAREN expr POW RPAREN",
 /*  41 */ "expr ::= LPAREN POW expr RPAREN",
 /*  42 */ "expr ::= LPAREN expr EQUALTO RPAREN",
 /*  43 */ "expr ::= LPAREN EQUALTO expr RPAREN",
 /*  44 */ "expr ::= LPAREN expr NOTEQUALTO RPAREN",
 /*  45 */ "expr ::= LPAREN NOTEQUALTO expr RPAREN",
 /*  46 */ "expr ::= LPAREN expr LESSTHAN RPAREN",
 /*  47 */ "expr ::= LPAREN LESSTHAN expr RPAREN",
 /*  48 */ "expr ::= LPAREN expr GREATERTHAN RPAREN",
 /*  49 */ "expr ::= LPAREN GREATERTHAN expr RPAREN",
 /*  50 */ "expr ::= LPAREN expr LORE RPAREN",
 /*  51 */ "expr ::= LPAREN LORE expr RPAREN",
 /*  52 */ "expr ::= LPAREN expr GORE RPAREN",
 /*  53 */ "expr ::= LPAREN GORE expr RPAREN",
 /*  54 */ "expr ::= LPAREN expr AND RPAREN",
 /*  55 */ "expr ::= LPAREN AND expr RPAREN",
 /*  56 */ "expr ::= LPAREN expr OR RPAREN",
 /*  57 */ "expr ::= LPAREN OR expr RPAREN",
 /*  58 */ "expr ::= LPAREN expr SHIFTL RPAREN",
 /*  59 */ "expr ::= LPAREN SHIFTL expr RPAREN",
 /*  60 */ "expr ::= LPAREN expr SHIFTR RPAREN",
 /*  61 */ "expr ::= LPAREN SHIFTR expr RPAREN",
 /*  62 */ "expr ::= LPAREN expr BITAND RPAREN",
 /*  63 */ "expr ::= LPAREN BITAND expr RPAREN",
 /*  64 */ "expr ::= LPAREN expr BITOR RPAREN",
 /*  65 */ "expr ::= LPAREN BITOR expr RPAREN",
 /*  66 */ "expr ::= LPAREN expr BITXOR RPAREN",
 /*  67 */ "expr ::= LPAREN BITXOR expr RPAREN",
 /*  68 */ "expr ::= LPAREN expr PREPEND RPAREN",
 /*  69 */ "expr ::= LPAREN PREPEND expr RPAREN",
 /*  70 */ "expr ::= LPAREN expr APPEND RPAREN",
 /*  71 */ "expr ::= LPAREN APPEND expr RPAREN",
 /*  72 */ "expr ::= LPAREN expr PLUSPLUS RPAREN",
 /*  73 */ "expr ::= LPAREN PLUSPLUS expr RPAREN",
 /*  74 */ "expr ::= expr BACKTICK NAME BACKTICK expr",
 /*  75 */ "expr ::= LPAREN BACKTICK NAME BACKTICK expr RPAREN",
 /*  76 */ "expr ::= LPAREN expr BACKTICK NAME BACKTICK RPAREN",
 /*  77 */ "expr ::= LPAREN PLUS RPAREN",
 /*  78 */ "expr ::= LPAREN MINUS RPAREN",
 /*  79 */ "expr ::= LPAREN TIMES RPAREN",
 /*  80 */ "expr ::= LPAREN DIVIDE RPAREN",
 /*  81 */ "expr ::= LPAREN MODULO RPAREN",
 /*  82 */ "expr ::= LPAREN POW RPAREN",
 /*  83 */ "expr ::= LPAREN EQUALTO RPAREN",
 /*  84 */ "expr ::= LPAREN NOTEQUALTO RPAREN",
 /*  85 */ "expr ::= LPAREN LESSTHAN RPAREN",
 /*  86 */ "expr ::= LPAREN GREATERTHAN RPAREN",
 /*  87 */ "expr ::= LPAREN LORE RPAREN",
 /*  88 */ "expr ::= LPAREN GORE RPAREN",
 /*  89 */ "expr ::= LPAREN AND RPAREN",
 /*  90 */ "expr ::= LPAREN OR RPAREN",
 /*  91 */ "expr ::= LPAREN SHIFTL RPAREN",
 /*  92 */ "expr ::= LPAREN SHIFTR RPAREN",
 /*  93 */ "expr ::= LPAREN BITAND RPAREN",
 /*  94 */ "expr ::= LPAREN BITOR RPAREN",
 /*  95 */ "expr ::= LPAREN BITXOR RPAREN",
 /*  96 */ "expr ::= LPAREN PREPEND RPAREN",
 /*  97 */ "expr ::= LPAREN APPEND RPAREN",
 /*  98 */ "expr ::= LPAREN PLUSPLUS RPAREN",
 /*  99 */ "expr ::= BACKSLASH name_chain ASSIGN expr",
 /* 100 */ "horizontal_assignment_list ::= name_chain ASSIGN expr",
 /* 101 */ "horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr",
 /* 102 */ "vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER",
 /* 103 */ "vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER",
 /* 104 */ "final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr",
 /* 105 */ "assignment_list ::= vertical_assignment_list",
 /* 106 */ "assignment_list ::= final_vertical_assignment_list",
 /* 107 */ "assignment_list ::= horizontal_assignment_list",
 /* 108 */ "where ::= WHERE LCBLOCK assignment_list RCBLOCK",
 /* 109 */ "assignment ::= name_chain ASSIGN expr expr",
 /* 110 */ "assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK",
 /* 111 */ "assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK",
 /* 112 */ "assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK",
 /* 113 */ "case_statement ::= CASE expr OF",
 /* 114 */ "test ::= LET IN",
 /* 115 */ "dict ::= DICT LCURL assignment_list RCURL",
 /* 116 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /* 117 */ "dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL",
 /* 118 */ "dict ::= LCURL assignment_list RCURL",
 /* 119 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL",
 /* 120 */ "dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL",
 /* 121 */ "expr ::= dict",
 /* 122 */ "expr ::= NAME LCURL NAME RCURL",
 /* 123 */ "expr ::= NAME LCURL string RCURL",
 /* 124 */ "name_space ::= NAME COLONCOLON NAME",
 /* 125 */ "name_space ::= function_call COLONCOLON NAME",
 /* 126 */ "name_space ::= name_space COLONCOLON NAME",
 /* 127 */ "function_call ::= name_space LPAREN stmt_list RPAREN",
 /* 128 */ "function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN",
 /* 129 */ "function_call ::= name_space",
 /* 130 */ "vert_stmt_list ::= stmt DELIMITER",
 /* 131 */ "vert_stmt_list ::= vert_stmt_list stmt DELIMITER",
 /* 132 */ "final_vert_stmt_list ::= vert_stmt_list stmt",
 /* 133 */ "vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC",
 /* 134 */ "array ::= vertical_array",
 /* 135 */ "array ::= LBRAC maybe_empty_stmt_list RBRAC",
 /* 136 */ "stmt_list ::= stmt",
 /* 137 */ "stmt_list ::= stmt_list stmt",
 /* 138 */ "expr ::= array",
 /* 139 */ "maybe_empty_stmt_list ::=",
 /* 140 */ "maybe_empty_stmt_list ::= stmt_list",
 /* 141 */ "expr ::= num",
 /* 142 */ "expr ::= string",
 /* 143 */ "expr ::= bool",
 /* 144 */ "expr ::= PRINT LPAREN expr RPAREN",
 /* 145 */ "expr ::= LPAREN expr RPAREN",
 /* 146 */ "num ::= NUM",
 /* 147 */ "string ::= STRING",
 /* 148 */ "bool ::= BOOLEAN",
 /* 149 */ "maybe_empty_name_chain ::= name_chain",
 /* 150 */ "maybe_empty_name_chain ::= pattern",
 /* 151 */ "assignment ::= name_chain maybe_empty_name_chain ASSIGN expr",
 /* 152 */ "assignment ::= NAME maybe_empty_name_chain ASSIGN expr",
 /* 153 */ "pattern ::= LPAREN NAME PREPEND NAME RPAREN",
 /* 154 */ "expr ::= expr PREPEND expr",
 /* 155 */ "expr ::= expr APPEND expr",
 /* 156 */ "expr ::= expr PLUSPLUS expr",
 /* 157 */ "expr ::= expr PLUS expr",
 /* 158 */ "expr ::= expr MINUS expr",
 /* 159 */ "expr ::= expr DIVIDE expr",
 /* 160 */ "expr ::= expr TIMES expr",
 /* 161 */ "expr ::= expr MODULO expr",
 /* 162 */ "expr ::= expr POW expr",
 /* 163 */ "expr ::= expr EQUALTO expr",
 /* 164 */ "expr ::= expr NOTEQUALTO expr",
 /* 165 */ "expr ::= expr LESSTHAN expr",
 /* 166 */ "expr ::= expr GREATERTHAN expr",
 /* 167 */ "expr ::= expr LORE expr",
 /* 168 */ "expr ::= expr GORE expr",
 /* 169 */ "expr ::= expr AND expr",
 /* 170 */ "expr ::= expr OR expr",
 /* 171 */ "expr ::= BITNOT expr",
 /* 172 */ "expr ::= LPAREN MINUS expr RPAREN",
 /* 173 */ "expr ::= NOT expr",
 /* 174 */ "expr ::= expr SHIFTL expr",
 /* 175 */ "expr ::= expr SHIFTR expr",
 /* 176 */ "expr ::= expr BITAND expr",
 /* 177 */ "expr ::= expr BITXOR expr",
 /* 178 */ "array_index ::= function_call LBRAC expr RBRAC",
 /* 179 */ "array_index ::= NAME LBRAC expr RBRAC",
 /* 180 */ "array_index ::= array_index LBRAC expr RBRAC",
 /* 181 */ "expr ::= array_index",
 /* 182 */ "array_index ::= NAME LBRAC PREPEND expr RBRAC",
 /* 183 */ "array_index ::= NAME LBRAC expr PREPEND RBRAC",
 /* 184 */ "array_index ::= NAME LBRAC expr PREPEND expr RBRAC",
 /* 185 */ "array_index ::= NAME LBRAC COLONCOLON expr RBRAC",
 /* 186 */ "array_index ::= NAME LBRAC expr COLONCOLON expr RBRAC",
 /* 187 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 188 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 189 */ "array_index ::= NAME LBRAC expr PREPEND MODULO RBRAC",
 /* 190 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 191 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 192 */ "array_index ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 193 */ "array_index ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 194 */ "array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 195 */ "array_index ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 196 */ "array_index ::= name_space LBRAC expr RBRAC",
 /* 197 */ "array_index ::= array_index LBRAC PREPEND expr RBRAC",
 /* 198 */ "array_index ::= array_index LBRAC expr PREPEND RBRAC",
 /* 199 */ "array_index ::= array_index LBRAC expr PREPEND expr RBRAC",
 /* 200 */ "array_index ::= array_index LBRAC COLONCOLON expr RBRAC",
 /* 201 */ "array_index ::= array_index LBRAC expr COLONCOLON expr RBRAC",
 /* 202 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 203 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 204 */ "array_index ::= array_index LBRAC expr PREPEND MODULO RBRAC",
 /* 205 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 206 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 207 */ "array_index ::= array_index LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 208 */ "array_index ::= array_index LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 209 */ "array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 210 */ "array_index ::= array_index LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 211 */ "array_index ::= function_call LBRAC PREPEND expr RBRAC",
 /* 212 */ "array_index ::= function_call LBRAC expr PREPEND RBRAC",
 /* 213 */ "array_index ::= function_call LBRAC expr PREPEND expr RBRAC",
 /* 214 */ "array_index ::= function_call LBRAC COLONCOLON expr RBRAC",
 /* 215 */ "array_index ::= function_call LBRAC expr COLONCOLON expr RBRAC",
 /* 216 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 217 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 218 */ "array_index ::= function_call LBRAC expr PREPEND MODULO RBRAC",
 /* 219 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 220 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 221 */ "array_index ::= function_call LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 222 */ "array_index ::= function_call LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 223 */ "array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 224 */ "array_index ::= function_call LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 225 */ "array_index ::= name_space LBRAC PREPEND expr RBRAC",
 /* 226 */ "array_index ::= name_space LBRAC expr PREPEND RBRAC",
 /* 227 */ "array_index ::= name_space LBRAC expr PREPEND expr RBRAC",
 /* 228 */ "array_index ::= name_space LBRAC COLONCOLON expr RBRAC",
 /* 229 */ "array_index ::= name_space LBRAC expr COLONCOLON expr RBRAC",
 /* 230 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND expr RBRAC",
 /* 231 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr RBRAC",
 /* 232 */ "array_index ::= name_space LBRAC expr PREPEND MODULO RBRAC",
 /* 233 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND MODULO RBRAC",
 /* 234 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND MODULO RBRAC",
 /* 235 */ "array_index ::= name_space LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC",
 /* 236 */ "array_index ::= name_space LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 237 */ "array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC",
 /* 238 */ "array_index ::= name_space LBRAC COLONCOLON expr PREPEND MODULO RBRAC",
 /* 239 */ "expr ::= LBRAC expr RANGE expr RBRAC",
 /* 240 */ "expr ::= LBRAC expr COMMA expr RANGE expr RBRAC",
 /* 241 */ "in ::= error",
 /* 242 */ "error ::= OPENQUOTEERROR",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* ASSIGN */
    case 2: /* LCBLOCK */
    case 3: /* RCBLOCK */
    case 4: /* LCURL */
    case 5: /* RCURL */
    case 6: /* COLON */
    case 7: /* BACKTICK */
    case 8: /* DICT */
    case 9: /* WHERE */
    case 10: /* NAME */
    case 11: /* COMMA */
    case 12: /* BITOR */
    case 13: /* FUNCTION_DEC */
    case 14: /* RSTREAM */
    case 15: /* LSTREAM */
    case 16: /* FUNCTION_CALL */
    case 17: /* PREPEND */
    case 18: /* APPEND */
    case 19: /* INDEX */
    case 20: /* OR */
    case 21: /* AND */
    case 22: /* BITXOR */
    case 23: /* BITAND */
    case 24: /* EQUALTO */
    case 25: /* NOTEQUALTO */
    case 26: /* GREATERTHAN */
    case 27: /* GORE */
    case 28: /* LESSTHAN */
    case 29: /* LORE */
    case 30: /* SHIFTL */
    case 31: /* SHIFTR */
    case 32: /* PLUS */
    case 33: /* MINUS */
    case 34: /* DIVIDE */
    case 35: /* TIMES */
    case 36: /* MODULO */
    case 37: /* POW */
    case 38: /* NOT */
    case 39: /* BITNOT */
    case 40: /* UMINUS */
    case 41: /* PLUSPLUS */
    case 42: /* COLONCOLON */
    case 43: /* LPAREN */
    case 44: /* RPAREN */
    case 45: /* LBRAC */
    case 46: /* RBRAC */
    case 47: /* COLLECTARRAY */
    case 48: /* DELIMITER */
    case 49: /* WILDCARD */
    case 50: /* BACKSLASH */
    case 51: /* CASE */
    case 52: /* OF */
    case 53: /* LET */
    case 54: /* IN */
    case 55: /* PRINT */
    case 56: /* NUM */
    case 57: /* STRING */
    case 58: /* BOOLEAN */
    case 59: /* RANGE */
    case 60: /* OPENQUOTEERROR */
{
#line 45 "./src/Grammar/grammar.y"
 token_destructor((yypminor->yy0)); 
#line 2660 "./src/Grammar/grammar.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 64, 1 },
  { 65, 0 },
  { 65, 2 },
  { 65, 3 },
  { 65, 3 },
  { 66, 1 },
  { 68, 1 },
  { 68, 1 },
  { 70, 1 },
  { 71, 1 },
  { 72, 2 },
  { 72, 1 },
  { 62, 1 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 73, 4 },
  { 73, 6 },
  { 62, 4 },
  { 73, 3 },
  { 73, 3 },
  { 62, 1 },
  { 67, 1 },
  { 77, 7 },
  { 77, 8 },
  { 77, 6 },
  { 78, 6 },
  { 78, 6 },
  { 69, 1 },
  { 69, 3 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 4 },
  { 62, 5 },
  { 62, 6 },
  { 62, 6 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 4 },
  { 79, 3 },
  { 79, 4 },
  { 81, 4 },
  { 81, 5 },
  { 82, 4 },
  { 80, 1 },
  { 80, 1 },
  { 80, 1 },
  { 83, 4 },
  { 69, 4 },
  { 69, 6 },
  { 69, 8 },
  { 69, 8 },
  { 76, 3 },
  { 67, 2 },
  { 84, 4 },
  { 84, 7 },
  { 84, 6 },
  { 84, 3 },
  { 84, 6 },
  { 84, 5 },
  { 62, 1 },
  { 62, 4 },
  { 62, 4 },
  { 86, 3 },
  { 86, 3 },
  { 86, 3 },
  { 73, 4 },
  { 73, 6 },
  { 73, 1 },
  { 87, 2 },
  { 87, 3 },
  { 88, 2 },
  { 89, 5 },
  { 90, 1 },
  { 90, 3 },
  { 74, 1 },
  { 74, 2 },
  { 62, 1 },
  { 91, 0 },
  { 91, 1 },
  { 62, 1 },
  { 62, 1 },
  { 62, 1 },
  { 62, 4 },
  { 62, 3 },
  { 92, 1 },
  { 85, 1 },
  { 93, 1 },
  { 94, 1 },
  { 94, 1 },
  { 69, 4 },
  { 69, 4 },
  { 95, 5 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 2 },
  { 62, 4 },
  { 62, 2 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 62, 3 },
  { 75, 4 },
  { 75, 4 },
  { 75, 4 },
  { 62, 1 },
  { 75, 5 },
  { 75, 5 },
  { 75, 6 },
  { 75, 5 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 8 },
  { 75, 9 },
  { 75, 10 },
  { 75, 7 },
  { 75, 4 },
  { 75, 5 },
  { 75, 5 },
  { 75, 6 },
  { 75, 5 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 8 },
  { 75, 9 },
  { 75, 10 },
  { 75, 7 },
  { 75, 5 },
  { 75, 5 },
  { 75, 6 },
  { 75, 5 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 8 },
  { 75, 9 },
  { 75, 10 },
  { 75, 7 },
  { 75, 5 },
  { 75, 5 },
  { 75, 6 },
  { 75, 5 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 6 },
  { 75, 7 },
  { 75, 8 },
  { 75, 8 },
  { 75, 9 },
  { 75, 10 },
  { 75, 7 },
  { 62, 5 },
  { 62, 7 },
  { 65, 1 },
  { 61, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 2: /* in ::= in DELIMITER */
      case 3: /* in ::= in start DELIMITER */ yytestcase(yyruleno==3);
      case 4: /* in ::= in test DELIMITER */ yytestcase(yyruleno==4);
#line 96 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 3202 "./src/Grammar/grammar.c"
        break;
      case 5: /* start ::= spec */
#line 102 "./src/Grammar/grammar.y"
{
/*    std::cout << "Object of type: " << yymsp[0].minor.yy0.type << " hit the stack!" << std::endl;*/
/*    optic::out() << "Object at end of parser: ";*/
/*    print_object(yymsp[0].minor.yy0);*/
    if(yymsp[0].minor.yy0.type!=optic::OPERATION_TREE)
    {
        optic::object a = mem_alloc(optic::OPERATION_TREE);
        a.data.array->push_back(yymsp[0].minor.yy0);
        optic::resolve_stack_from_parser(a, true);
    }
    else
    {
        optic::resolve_stack_from_parser(yymsp[0].minor.yy0, true);
/*        optic::resolve_stack_from_parser(flatten_tree(yymsp[0].minor.yy0), true);*/
    }
}
#line 3222 "./src/Grammar/grammar.c"
        break;
      case 6: /* spec ::= assignment */
      case 23: /* test ::= case_statement */ yytestcase(yyruleno==23);
#line 120 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;
}
#line 3230 "./src/Grammar/grammar.c"
        break;
      case 7: /* spec ::= top_stmt */
      case 8: /* top_stmt ::= stmt */ yytestcase(yyruleno==8);
#line 125 "./src/Grammar/grammar.y"
{
    yygotominor.yy0=yymsp[0].minor.yy0;

}
#line 3239 "./src/Grammar/grammar.c"
        break;
      case 9: /* stmt ::= expr */
#line 137 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;

}
#line 3247 "./src/Grammar/grammar.c"
        break;
      case 10: /* name_chain ::= name_chain NAME */
#line 143 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type!=optic::ARRAY)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);

        yymsp[-1].minor.yy0.type = optic::UNDECLARED_VARIABLE;
        yymsp[0].minor.yy0.type = optic::UNDECLARED_VARIABLE;

        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0 = yymsp[-1].minor.yy0;
        yymsp[0].minor.yy0.type = optic::UNDECLARED_VARIABLE;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 3269 "./src/Grammar/grammar.c"
        break;
      case 11: /* name_chain ::= NAME */
#line 163 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
    yygotominor.yy0.type = optic::UNDECLARED_VARIABLE;
}
#line 3277 "./src/Grammar/grammar.c"
        break;
      case 12: /* expr ::= NAME */
#line 169 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
    yygotominor.yy0.type = optic::UNDECLARED_VARIABLE;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 3290 "./src/Grammar/grammar.c"
        break;
      case 13: /* expr ::= expr RSTREAM function_call */
#line 180 "./src/Grammar/grammar.y"
{
    if(yymsp[0].minor.yy0.type==optic::OPERATION_TREE)
    {
        yymsp[0].minor.yy0.data.array->at(2).data.array->push_front(yymsp[-2].minor.yy0);
        yygotominor.yy0 = yymsp[0].minor.yy0;
    }
    else
    {
        optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        function_body.data.array->push_back(yymsp[-2].minor.yy0);
        yymsp[0].minor.yy0.type = optic::UNDECLARED_VARIABLE;
        optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
    }
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3309 "./src/Grammar/grammar.c"
        break;
      case 14: /* expr ::= expr RSTREAM NAME */
#line 196 "./src/Grammar/grammar.y"
{
    optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);;
    function_body.data.array->push_back(yymsp[-2].minor.yy0);
    optic::store_operations(yygotominor.yy0,yymsp[0].minor.yy0,function_body,optic::call_function);
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3319 "./src/Grammar/grammar.c"
        break;
      case 15: /* expr ::= function_call LSTREAM expr */
#line 203 "./src/Grammar/grammar.y"
{
    if(yymsp[-2].minor.yy0.type==optic::OPERATION_TREE)
    {
        yymsp[-2].minor.yy0.data.array->at(2).data.array->push_front(yymsp[0].minor.yy0);
        yygotominor.yy0 = yymsp[-2].minor.yy0;
    }
    else
    {
        optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        function_body.data.array->push_back(yymsp[0].minor.yy0);
        optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,function_body,optic::call_function);
    }
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3337 "./src/Grammar/grammar.c"
        break;
      case 16: /* expr ::= NAME LSTREAM expr */
#line 218 "./src/Grammar/grammar.y"
{
    optic::object function_body = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);;
    function_body.data.array->push_back(yymsp[0].minor.yy0);
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,function_body,optic::call_function);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3347 "./src/Grammar/grammar.c"
        break;
      case 17: /* function_call ::= NAME LPAREN stmt_list RPAREN */
      case 19: /* expr ::= array_index LPAREN stmt_list RPAREN */ yytestcase(yyruleno==19);
#line 225 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3372 "./src/Grammar/grammar.c"
        break;
      case 18: /* function_call ::= NAME LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 245 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
    }
    else
    {
        optic::object temp = yymsp[-1].minor.yy0;
        yymsp[-1].minor.yy0 = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        yymsp[-1].minor.yy0.data.array->push_back(temp);
    }

    optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,46,&yymsp[-3].minor);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3399 "./src/Grammar/grammar.c"
        break;
      case 20: /* function_call ::= NAME LPAREN RPAREN */
      case 21: /* function_call ::= array_index LPAREN RPAREN */ yytestcase(yyruleno==21);
#line 287 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3414 "./src/Grammar/grammar.c"
        break;
      case 22: /* expr ::= function_call */
      case 105: /* assignment_list ::= vertical_assignment_list */ yytestcase(yyruleno==105);
      case 106: /* assignment_list ::= final_vertical_assignment_list */ yytestcase(yyruleno==106);
      case 107: /* assignment_list ::= horizontal_assignment_list */ yytestcase(yyruleno==107);
      case 129: /* function_call ::= name_space */ yytestcase(yyruleno==129);
      case 136: /* stmt_list ::= stmt */ yytestcase(yyruleno==136);
      case 138: /* expr ::= array */ yytestcase(yyruleno==138);
      case 181: /* expr ::= array_index */ yytestcase(yyruleno==181);
#line 307 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 3428 "./src/Grammar/grammar.c"
        break;
      case 24: /* guard_statement ::= name_chain LCBLOCK BITOR expr ASSIGN expr DELIMITER */
#line 319 "./src/Grammar/grammar.y"
{
    optic::object tree = create_condition_tree(yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0 = create_guard(yymsp[-6].minor.yy0,tree);
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,12,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 3440 "./src/Grammar/grammar.c"
        break;
      case 25: /* guard_statement ::= name_chain ASSIGN LCBLOCK BITOR expr ASSIGN expr DELIMITER */
#line 326 "./src/Grammar/grammar.y"
{
    optic::out() << "Syntax Error: Cannot assign a guard statement to a function: get rid of the '='." << std::endl;
    optic::correct_parsing = false;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-6].minor);
  yy_destructor(yypParser,2,&yymsp[-5].minor);
  yy_destructor(yypParser,12,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 3458 "./src/Grammar/grammar.c"
        break;
      case 26: /* guard_statement ::= guard_statement BITOR expr ASSIGN expr DELIMITER */
#line 337 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,12,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 3469 "./src/Grammar/grammar.c"
        break;
      case 27: /* final_guard_statement ::= guard_statement BITOR expr ASSIGN expr RCBLOCK */
#line 343 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,12,&yymsp[-4].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 3480 "./src/Grammar/grammar.c"
        break;
      case 28: /* final_guard_statement ::= guard_statement BITOR WILDCARD ASSIGN expr RCBLOCK */
#line 349 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-5].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0=yymsp[-5].minor.yy0;
  yy_destructor(yypParser,12,&yymsp[-4].minor);
  yy_destructor(yypParser,49,&yymsp[-3].minor);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 3492 "./src/Grammar/grammar.c"
        break;
      case 29: /* assignment ::= final_guard_statement */
#line 355 "./src/Grammar/grammar.y"
{

    panopticon::object& b = yymsp[0].minor.yy0.data.array->at(0);
    panopticon::object& c = yymsp[0].minor.yy0.data.array->at(1);

    panopticon::object resolve;
    panopticon::store_operations(resolve, c, &panopticon::resolve_guard,false);

    resolve.type = panopticon::FUNCTION_BODY;
    b.type = optic::FUNCTION_ARG_NAMES;
    panopticon::store_operations(yygotominor.yy0, b, resolve, &panopticon::assign_variable,false);
    optic::shallow_mem_free_array(yymsp[0].minor.yy0.data.array,optic::GUARD);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 3514 "./src/Grammar/grammar.c"
        break;
      case 30: /* assignment ::= name_chain ASSIGN expr */
#line 375 "./src/Grammar/grammar.y"
{
    insure_ready_for_assignment(yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    panopticon::store_operations(yygotominor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 3528 "./src/Grammar/grammar.c"
        break;
      case 31: /* expr ::= LPAREN expr PLUS RPAREN */
#line 392 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::plus);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,32,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3538 "./src/Grammar/grammar.c"
        break;
      case 32: /* expr ::= LPAREN PLUS expr RPAREN */
#line 397 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::plus);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,32,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3548 "./src/Grammar/grammar.c"
        break;
      case 33: /* expr ::= LPAREN expr MINUS RPAREN */
#line 402 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::minus);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,33,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3558 "./src/Grammar/grammar.c"
        break;
      case 34: /* expr ::= LPAREN expr TIMES RPAREN */
#line 413 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::multiply);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,35,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3568 "./src/Grammar/grammar.c"
        break;
      case 35: /* expr ::= LPAREN TIMES expr RPAREN */
#line 418 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::multiply);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,35,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3578 "./src/Grammar/grammar.c"
        break;
      case 36: /* expr ::= LPAREN expr DIVIDE RPAREN */
#line 423 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::divide);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3588 "./src/Grammar/grammar.c"
        break;
      case 37: /* expr ::= LPAREN DIVIDE expr RPAREN */
#line 428 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::divide);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,34,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3598 "./src/Grammar/grammar.c"
        break;
      case 38: /* expr ::= LPAREN expr MODULO RPAREN */
#line 433 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::modulo);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3608 "./src/Grammar/grammar.c"
        break;
      case 39: /* expr ::= LPAREN MODULO expr RPAREN */
#line 438 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::modulo);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3618 "./src/Grammar/grammar.c"
        break;
      case 40: /* expr ::= LPAREN expr POW RPAREN */
#line 443 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::value_pow);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,37,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3628 "./src/Grammar/grammar.c"
        break;
      case 41: /* expr ::= LPAREN POW expr RPAREN */
#line 448 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::value_pow);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3638 "./src/Grammar/grammar.c"
        break;
      case 42: /* expr ::= LPAREN expr EQUALTO RPAREN */
#line 453 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::equal_to);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,24,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3648 "./src/Grammar/grammar.c"
        break;
      case 43: /* expr ::= LPAREN EQUALTO expr RPAREN */
#line 458 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::equal_to);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,24,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3658 "./src/Grammar/grammar.c"
        break;
      case 44: /* expr ::= LPAREN expr NOTEQUALTO RPAREN */
#line 463 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::not_equal_to);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,25,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3668 "./src/Grammar/grammar.c"
        break;
      case 45: /* expr ::= LPAREN NOTEQUALTO expr RPAREN */
#line 468 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::not_equal_to);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,25,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3678 "./src/Grammar/grammar.c"
        break;
      case 46: /* expr ::= LPAREN expr LESSTHAN RPAREN */
#line 473 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::less_than);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,28,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3688 "./src/Grammar/grammar.c"
        break;
      case 47: /* expr ::= LPAREN LESSTHAN expr RPAREN */
#line 478 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::less_than);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,28,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3698 "./src/Grammar/grammar.c"
        break;
      case 48: /* expr ::= LPAREN expr GREATERTHAN RPAREN */
#line 483 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::greater_than);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,26,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3708 "./src/Grammar/grammar.c"
        break;
      case 49: /* expr ::= LPAREN GREATERTHAN expr RPAREN */
#line 488 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::greater_than);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,26,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3718 "./src/Grammar/grammar.c"
        break;
      case 50: /* expr ::= LPAREN expr LORE RPAREN */
#line 493 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::lore);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,29,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3728 "./src/Grammar/grammar.c"
        break;
      case 51: /* expr ::= LPAREN LORE expr RPAREN */
#line 498 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::lore);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,29,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3738 "./src/Grammar/grammar.c"
        break;
      case 52: /* expr ::= LPAREN expr GORE RPAREN */
#line 503 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::gore);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3748 "./src/Grammar/grammar.c"
        break;
      case 53: /* expr ::= LPAREN GORE expr RPAREN */
#line 508 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::gore);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3758 "./src/Grammar/grammar.c"
        break;
      case 54: /* expr ::= LPAREN expr AND RPAREN */
#line 513 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::value_and);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,21,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3768 "./src/Grammar/grammar.c"
        break;
      case 55: /* expr ::= LPAREN AND expr RPAREN */
#line 518 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::value_and);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3778 "./src/Grammar/grammar.c"
        break;
      case 56: /* expr ::= LPAREN expr OR RPAREN */
#line 523 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::value_or);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3788 "./src/Grammar/grammar.c"
        break;
      case 57: /* expr ::= LPAREN OR expr RPAREN */
#line 528 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::value_or);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3798 "./src/Grammar/grammar.c"
        break;
      case 58: /* expr ::= LPAREN expr SHIFTL RPAREN */
#line 533 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::shift_left);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,30,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3808 "./src/Grammar/grammar.c"
        break;
      case 59: /* expr ::= LPAREN SHIFTL expr RPAREN */
#line 538 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::shift_left);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,30,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3818 "./src/Grammar/grammar.c"
        break;
      case 60: /* expr ::= LPAREN expr SHIFTR RPAREN */
#line 543 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::shift_right);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,31,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3828 "./src/Grammar/grammar.c"
        break;
      case 61: /* expr ::= LPAREN SHIFTR expr RPAREN */
#line 548 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::shift_right);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,31,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3838 "./src/Grammar/grammar.c"
        break;
      case 62: /* expr ::= LPAREN expr BITAND RPAREN */
#line 553 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::bit_and);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,23,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3848 "./src/Grammar/grammar.c"
        break;
      case 63: /* expr ::= LPAREN BITAND expr RPAREN */
#line 558 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::bit_and);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,23,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3858 "./src/Grammar/grammar.c"
        break;
      case 64: /* expr ::= LPAREN expr BITOR RPAREN */
#line 563 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::bit_or);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,12,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3868 "./src/Grammar/grammar.c"
        break;
      case 65: /* expr ::= LPAREN BITOR expr RPAREN */
#line 568 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::bit_or);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3878 "./src/Grammar/grammar.c"
        break;
      case 66: /* expr ::= LPAREN expr BITXOR RPAREN */
#line 573 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::bit_xor);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,22,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3888 "./src/Grammar/grammar.c"
        break;
      case 67: /* expr ::= LPAREN BITXOR expr RPAREN */
#line 578 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::bit_xor);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,22,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3898 "./src/Grammar/grammar.c"
        break;
      case 68: /* expr ::= LPAREN expr PREPEND RPAREN */
#line 583 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::prepend,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3908 "./src/Grammar/grammar.c"
        break;
      case 69: /* expr ::= LPAREN PREPEND expr RPAREN */
#line 588 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::prepend,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3918 "./src/Grammar/grammar.c"
        break;
      case 70: /* expr ::= LPAREN expr APPEND RPAREN */
#line 593 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::append,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3928 "./src/Grammar/grammar.c"
        break;
      case 71: /* expr ::= LPAREN APPEND expr RPAREN */
#line 598 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::append,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3938 "./src/Grammar/grammar.c"
        break;
      case 72: /* expr ::= LPAREN expr PLUSPLUS RPAREN */
#line 603 "./src/Grammar/grammar.y"
{
    optic::left_section(yygotominor.yy0,yymsp[-2].minor.yy0,optic::concat,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3948 "./src/Grammar/grammar.c"
        break;
      case 73: /* expr ::= LPAREN PLUSPLUS expr RPAREN */
#line 608 "./src/Grammar/grammar.y"
{
    optic::right_section(yygotominor.yy0,yymsp[-1].minor.yy0,optic::concat,false);
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,41,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 3958 "./src/Grammar/grammar.c"
        break;
      case 74: /* expr ::= expr BACKTICK NAME BACKTICK expr */
#line 614 "./src/Grammar/grammar.y"
{

    optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
    args.data.array->push_back(yymsp[-4].minor.yy0);
    args.data.array->push_back(yymsp[0].minor.yy0);
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,args,optic::call_function);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,7,&yymsp[-1].minor);
}
#line 3976 "./src/Grammar/grammar.c"
        break;
      case 75: /* expr ::= LPAREN BACKTICK NAME BACKTICK expr RPAREN */
#line 629 "./src/Grammar/grammar.y"
{

    //Function name/arg
    optic::object name_array = mem_alloc(optic::ARRAY);
    optic::object name = optic::mem_alloc_variable("Anonymous");
    optic::object arg = optic::mem_alloc_variable("x");
    name_array.data.array->push_front(name);
    name_array.data.array->push_back(arg);

    //Store Function call
    optic::object body;
    optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
    optic::object var = optic::mem_alloc_variable("x");
    args.data.array->push_back(var);
    args.data.array->push_back(yymsp[-1].minor.yy0);
    optic::store_operations(body,yymsp[-3].minor.yy0,args,optic::call_function);

    insure_ready_for_assignment(name_array,body);
    store_operations(yygotominor.yy0,name_array,body,optic::create_function);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4010 "./src/Grammar/grammar.c"
        break;
      case 76: /* expr ::= LPAREN expr BACKTICK NAME BACKTICK RPAREN */
#line 667 "./src/Grammar/grammar.y"
{

    //Function name/arg
    optic::object name_array = mem_alloc(optic::ARRAY);
    optic::object name = optic::mem_alloc_variable("Anonymous");
    optic::object arg = optic::mem_alloc_variable("x");
    name_array.data.array->push_front(name);
    name_array.data.array->push_back(arg);

    //Store Function call
    optic::object body;
    optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
    args.data.array->push_back(yymsp[-4].minor.yy0);
    optic::object var = optic::mem_alloc_variable("x");
    args.data.array->push_back(var);
    optic::store_operations(body,yymsp[-2].minor.yy0,args,optic::call_function);

    insure_ready_for_assignment(name_array,body);
    store_operations(yygotominor.yy0,name_array,body,optic::create_function);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-5].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4044 "./src/Grammar/grammar.c"
        break;
      case 77: /* expr ::= LPAREN PLUS RPAREN */
#line 696 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::plus);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,32,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4054 "./src/Grammar/grammar.c"
        break;
      case 78: /* expr ::= LPAREN MINUS RPAREN */
#line 701 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::minus);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,33,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4064 "./src/Grammar/grammar.c"
        break;
      case 79: /* expr ::= LPAREN TIMES RPAREN */
#line 706 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::multiply);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,35,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4074 "./src/Grammar/grammar.c"
        break;
      case 80: /* expr ::= LPAREN DIVIDE RPAREN */
#line 711 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::divide);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4084 "./src/Grammar/grammar.c"
        break;
      case 81: /* expr ::= LPAREN MODULO RPAREN */
#line 716 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::modulo);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4094 "./src/Grammar/grammar.c"
        break;
      case 82: /* expr ::= LPAREN POW RPAREN */
#line 721 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::value_pow);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,37,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4104 "./src/Grammar/grammar.c"
        break;
      case 83: /* expr ::= LPAREN EQUALTO RPAREN */
#line 726 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::equal_to);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,24,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4114 "./src/Grammar/grammar.c"
        break;
      case 84: /* expr ::= LPAREN NOTEQUALTO RPAREN */
#line 731 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::not_equal_to);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,25,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4124 "./src/Grammar/grammar.c"
        break;
      case 85: /* expr ::= LPAREN LESSTHAN RPAREN */
#line 736 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::less_than);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,28,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4134 "./src/Grammar/grammar.c"
        break;
      case 86: /* expr ::= LPAREN GREATERTHAN RPAREN */
#line 741 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::greater_than);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,26,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4144 "./src/Grammar/grammar.c"
        break;
      case 87: /* expr ::= LPAREN LORE RPAREN */
#line 746 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::lore);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,29,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4154 "./src/Grammar/grammar.c"
        break;
      case 88: /* expr ::= LPAREN GORE RPAREN */
#line 751 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::gore);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,27,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4164 "./src/Grammar/grammar.c"
        break;
      case 89: /* expr ::= LPAREN AND RPAREN */
#line 756 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::value_and);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4174 "./src/Grammar/grammar.c"
        break;
      case 90: /* expr ::= LPAREN OR RPAREN */
#line 761 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::value_or);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4184 "./src/Grammar/grammar.c"
        break;
      case 91: /* expr ::= LPAREN SHIFTL RPAREN */
#line 766 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::shift_left);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,30,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4194 "./src/Grammar/grammar.c"
        break;
      case 92: /* expr ::= LPAREN SHIFTR RPAREN */
#line 771 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::shift_right);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,31,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4204 "./src/Grammar/grammar.c"
        break;
      case 93: /* expr ::= LPAREN BITAND RPAREN */
#line 776 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::bit_and);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,23,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4214 "./src/Grammar/grammar.c"
        break;
      case 94: /* expr ::= LPAREN BITOR RPAREN */
#line 781 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::bit_or);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4224 "./src/Grammar/grammar.c"
        break;
      case 95: /* expr ::= LPAREN BITXOR RPAREN */
#line 786 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::bit_xor);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4234 "./src/Grammar/grammar.c"
        break;
      case 96: /* expr ::= LPAREN PREPEND RPAREN */
#line 791 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::prepend);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4244 "./src/Grammar/grammar.c"
        break;
      case 97: /* expr ::= LPAREN APPEND RPAREN */
#line 796 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::append);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4254 "./src/Grammar/grammar.c"
        break;
      case 98: /* expr ::= LPAREN PLUSPLUS RPAREN */
#line 801 "./src/Grammar/grammar.y"
{
    optic::create_operator_function(yygotominor.yy0,optic::concat);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,41,&yymsp[-1].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4264 "./src/Grammar/grammar.c"
        break;
      case 99: /* expr ::= BACKSLASH name_chain ASSIGN expr */
#line 807 "./src/Grammar/grammar.y"
{
    if(yymsp[-2].minor.yy0.type == optic::ARRAY)
    {
        optic::object name = optic::mem_alloc_variable("Anonymous");
        yymsp[-2].minor.yy0.data.array->push_front(name);
        insure_ready_for_assignment(yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
        store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,optic::create_function);
    }
    else
    {
        optic::object name_array = mem_alloc(optic::ARRAY);
        optic::object name = optic::mem_alloc_variable("Anonymous");
        name_array.data.array->push_front(name);
        name_array.data.array->push_back(yymsp[-2].minor.yy0);
        insure_ready_for_assignment(name_array,yymsp[0].minor.yy0);
        store_operations(yygotominor.yy0,name_array,yymsp[0].minor.yy0,optic::create_function);
    }
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,50,&yymsp[-3].minor);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 4293 "./src/Grammar/grammar.c"
        break;
      case 100: /* horizontal_assignment_list ::= name_chain ASSIGN expr */
#line 836 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 4303 "./src/Grammar/grammar.c"
        break;
      case 101: /* horizontal_assignment_list ::= assignment_list name_chain ASSIGN expr */
      case 104: /* final_vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr */ yytestcase(yyruleno==104);
#line 843 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 4314 "./src/Grammar/grammar.c"
        break;
      case 102: /* vertical_assignment_list ::= name_chain ASSIGN expr DELIMITER */
#line 850 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 4325 "./src/Grammar/grammar.c"
        break;
      case 103: /* vertical_assignment_list ::= vertical_assignment_list name_chain ASSIGN expr DELIMITER */
#line 857 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-4].minor.yy0;
    yygotominor.yy0.data.array->push_back(yymsp[-3].minor.yy0);
    yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,1,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 4336 "./src/Grammar/grammar.c"
        break;
      case 108: /* where ::= WHERE LCBLOCK assignment_list RCBLOCK */
#line 886 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    optic::object serial_result;
    optic::object result;
    optic::object previous_result;
    for(int i=0;i<yymsp[-1].minor.yy0.data.array->size(); i+=2)
    {
        insure_ready_for_assignment(
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1)
        );
        panopticon::store_operations(
            result,
            yymsp[-1].minor.yy0.data.array->at(i),
            yymsp[-1].minor.yy0.data.array->at(i+1),
            panopticon::assign_variable
        );
        optic::store_operations(serial_result,previous_result,result);
        previous_result = serial_result;
    }
    optic::shallow_mem_free_array(yymsp[-1].minor.yy0.data.array,optic::ARRAY);
    yygotominor.yy0 = serial_result;
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 4371 "./src/Grammar/grammar.c"
        break;
      case 109: /* assignment ::= name_chain ASSIGN expr expr */
#line 916 "./src/Grammar/grammar.y"
{
    optic::out() << "Error: Cannot declare two statements in a single assignment." << std::endl;
    optic::correct_parsing = false;
    while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
    ParseARG_STORE;
  yy_destructor(yypParser,1,&yymsp[-2].minor);
}
#line 4382 "./src/Grammar/grammar.c"
        break;
      case 110: /* assignment ::= name_chain ASSIGN expr LCBLOCK where RCBLOCK */
#line 924 "./src/Grammar/grammar.y"
{
    panopticon::object body;
    panopticon::store_operations(body,yymsp[-1].minor.yy0,yymsp[-3].minor.yy0,false);
    insure_ready_for_assignment(yymsp[-5].minor.yy0,body);
    panopticon::store_operations(yygotominor.yy0, yymsp[-5].minor.yy0, body, panopticon::assign_variable);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 4400 "./src/Grammar/grammar.c"
        break;
      case 111: /* assignment ::= guard_statement BITOR expr ASSIGN expr DELIMITER where RCBLOCK */
#line 937 "./src/Grammar/grammar.y"
{
    add_branch_to_tree(yymsp[-7].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    panopticon::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(yymsp[-7].minor.yy0,combined);
    panopticon::store_operations(yygotominor.yy0, yymsp[-7].minor.yy0, combined, panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,12,&yymsp[-6].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,48,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 4426 "./src/Grammar/grammar.c"
        break;
      case 112: /* assignment ::= guard_statement BITOR WILDCARD ASSIGN expr DELIMITER where RCBLOCK */
#line 957 "./src/Grammar/grammar.y"
{
    add_wildcard_to_tree(yymsp[-7].minor.yy0,yymsp[-3].minor.yy0);
    panopticon::object& b = yymsp[-7].minor.yy0.data.array->at(0);
    panopticon::object& func_body = yymsp[-7].minor.yy0.data.array->at(1);
    panopticon::object resolve;
    panopticon::store_operations(resolve, func_body, &panopticon::resolve_guard,false);

    optic::object combined;
    panopticon::store_operations(combined,yymsp[-1].minor.yy0,resolve,false);
    insure_ready_for_assignment(b,combined);
    panopticon::store_operations(yygotominor.yy0, b, combined, &panopticon::assign_variable);

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,12,&yymsp[-6].minor);
  yy_destructor(yypParser,49,&yymsp[-5].minor);
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,48,&yymsp[-2].minor);
  yy_destructor(yypParser,3,&yymsp[0].minor);
}
#line 4453 "./src/Grammar/grammar.c"
        break;
      case 113: /* case_statement ::= CASE expr OF */
#line 981 "./src/Grammar/grammar.y"
{
/*    yygotominor.yy0=B;*/
    yygotominor.yy0.type = optic::GUARD;
  yy_destructor(yypParser,51,&yymsp[-2].minor);
  yy_destructor(yypParser,52,&yymsp[0].minor);
}
#line 4463 "./src/Grammar/grammar.c"
        break;
      case 114: /* test ::= LET IN */
#line 986 "./src/Grammar/grammar.y"
{
  yy_destructor(yypParser,53,&yymsp[-1].minor);
  yy_destructor(yypParser,54,&yymsp[0].minor);
}
#line 4471 "./src/Grammar/grammar.c"
        break;
      case 115: /* dict ::= DICT LCURL assignment_list RCURL */
#line 998 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4481 "./src/Grammar/grammar.c"
        break;
      case 116: /* dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK DELIMITER RCURL */
#line 1003 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-6].minor);
  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4494 "./src/Grammar/grammar.c"
        break;
      case 117: /* dict ::= LCURL DICT LCBLOCK assignment_list RCBLOCK RCURL */
#line 1008 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4506 "./src/Grammar/grammar.c"
        break;
      case 118: /* dict ::= LCURL assignment_list RCURL */
#line 1013 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4515 "./src/Grammar/grammar.c"
        break;
      case 119: /* dict ::= LCURL LCBLOCK assignment_list RCBLOCK DELIMITER RCURL */
#line 1018 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,2,&yymsp[-4].minor);
  yy_destructor(yypParser,3,&yymsp[-2].minor);
  yy_destructor(yypParser,48,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4527 "./src/Grammar/grammar.c"
        break;
      case 120: /* dict ::= LCURL LCBLOCK assignment_list RCBLOCK RCURL */
#line 1023 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
  yy_destructor(yypParser,4,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4538 "./src/Grammar/grammar.c"
        break;
      case 121: /* expr ::= dict */
#line 1028 "./src/Grammar/grammar.y"
{
    optic::object dict;
    optic::store_operations(dict,yymsp[0].minor.yy0,&optic::create_dictionary,false);

    optic::optic_stack.push_back(dict);
    optic::evaluate_top();
/*    yygotominor.yy0 = optic::mem_copy(optic::optic_stack.back());*/
    yygotominor.yy0 = optic::optic_stack.back();
    optic::optic_stack.pop_back();
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
}
#line 4557 "./src/Grammar/grammar.c"
        break;
      case 122: /* expr ::= NAME LCURL NAME RCURL */
      case 123: /* expr ::= NAME LCURL string RCURL */ yytestcase(yyruleno==123);
#line 1046 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,4,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
#line 4572 "./src/Grammar/grammar.c"
        break;
      case 124: /* name_space ::= NAME COLONCOLON NAME */
      case 125: /* name_space ::= function_call COLONCOLON NAME */ yytestcase(yyruleno==125);
      case 126: /* name_space ::= name_space COLONCOLON NAME */ yytestcase(yyruleno==126);
#line 1066 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::dictionary_lookup);
    if (!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,42,&yymsp[-1].minor);
}
#line 4587 "./src/Grammar/grammar.c"
        break;
      case 127: /* function_call ::= name_space LPAREN stmt_list RPAREN */
#line 1096 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
            optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    }
    else
    {
        optic::object args = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        args.data.array->push_back(yymsp[-1].minor.yy0);
        optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,args,optic::call_function);
    }

    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4612 "./src/Grammar/grammar.c"
        break;
      case 128: /* function_call ::= name_space LBRAC RBRAC LPAREN stmt_list RPAREN */
#line 1118 "./src/Grammar/grammar.y"
{
    if(yymsp[-1].minor.yy0.type==optic::STATEMENT_LIST)
    {
            yymsp[-1].minor.yy0.type = optic::FUNCTION_ARG_VALUES;
            optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-1].minor.yy0,optic::call_function);
    }
    else
    {
        optic::object temp = optic::mem_alloc(optic::FUNCTION_ARG_VALUES);
        temp.data.array->push_back(yymsp[-1].minor.yy0);
        optic::store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,temp,optic::call_function);
    }


    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,46,&yymsp[-3].minor);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4640 "./src/Grammar/grammar.c"
        break;
      case 130: /* vert_stmt_list ::= stmt DELIMITER */
#line 1148 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 4648 "./src/Grammar/grammar.c"
        break;
      case 131: /* vert_stmt_list ::= vert_stmt_list stmt DELIMITER */
#line 1153 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-2].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
        yygotominor.yy0.data.array->push_back(yymsp[-2].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-2].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
    }
  yy_destructor(yypParser,48,&yymsp[0].minor);
}
#line 4667 "./src/Grammar/grammar.c"
        break;
      case 132: /* final_vert_stmt_list ::= vert_stmt_list stmt */
      case 137: /* stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==137);
#line 1169 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[-1].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[-1].minor.yy0);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[-1].minor.yy0.data.array;
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
}
#line 4686 "./src/Grammar/grammar.c"
        break;
      case 133: /* vertical_array ::= LBRAC LCBLOCK final_vert_stmt_list RCBLOCK RBRAC */
#line 1185 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0.type = optic::ARRAY;
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,2,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 4698 "./src/Grammar/grammar.c"
        break;
      case 134: /* array ::= vertical_array */
#line 1191 "./src/Grammar/grammar.y"
{
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 4705 "./src/Grammar/grammar.c"
        break;
      case 135: /* array ::= LBRAC maybe_empty_stmt_list RBRAC */
#line 1196 "./src/Grammar/grammar.y"
{
    yymsp[-1].minor.yy0.type = optic::ARRAY;
    create_tree(yygotominor.yy0,yymsp[-1].minor.yy0);
  yy_destructor(yypParser,45,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 4715 "./src/Grammar/grammar.c"
        break;
      case 139: /* maybe_empty_stmt_list ::= */
#line 1228 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
}
#line 4722 "./src/Grammar/grammar.c"
        break;
      case 140: /* maybe_empty_stmt_list ::= stmt_list */
#line 1233 "./src/Grammar/grammar.y"
{
    yygotominor.yy0.type = panopticon::STATEMENT_LIST;
    if(yymsp[0].minor.yy0.type!=panopticon::STATEMENT_LIST)
    {
        yygotominor.yy0 = optic::mem_alloc(optic::STATEMENT_LIST);
        yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
    }
    else
    {
        yygotominor.yy0.data.array = yymsp[0].minor.yy0.data.array;
    }
}
#line 4738 "./src/Grammar/grammar.c"
        break;
      case 141: /* expr ::= num */
      case 143: /* expr ::= bool */ yytestcase(yyruleno==143);
#line 1251 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
/*    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);*/
}
#line 4747 "./src/Grammar/grammar.c"
        break;
      case 142: /* expr ::= string */
#line 1257 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
/*   create_tree(yygotominor.yy0,yymsp[0].minor.yy0);*/
}
#line 4755 "./src/Grammar/grammar.c"
        break;
      case 144: /* expr ::= PRINT LPAREN expr RPAREN */
#line 1273 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&optic::unary_print_object,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4770 "./src/Grammar/grammar.c"
        break;
      case 145: /* expr ::= LPAREN expr RPAREN */
#line 1283 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,43,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4779 "./src/Grammar/grammar.c"
        break;
      case 146: /* num ::= NUM */
#line 1288 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 4787 "./src/Grammar/grammar.c"
        break;
      case 147: /* string ::= STRING */
#line 1294 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::STRING;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 4795 "./src/Grammar/grammar.c"
        break;
      case 148: /* bool ::= BOOLEAN */
#line 1301 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::BOOL;
    create_tree(yygotominor.yy0,yymsp[0].minor.yy0);
}
#line 4803 "./src/Grammar/grammar.c"
        break;
      case 149: /* maybe_empty_name_chain ::= name_chain */
      case 150: /* maybe_empty_name_chain ::= pattern */ yytestcase(yyruleno==150);
#line 1312 "./src/Grammar/grammar.y"
{
    yygotominor.yy0 = optic::mem_alloc(optic::ARRAY);
    yygotominor.yy0.data.array->push_back(yymsp[0].minor.yy0);
}
#line 4812 "./src/Grammar/grammar.c"
        break;
      case 151: /* assignment ::= name_chain maybe_empty_name_chain ASSIGN expr */
      case 152: /* assignment ::= NAME maybe_empty_name_chain ASSIGN expr */ yytestcase(yyruleno==152);
#line 1323 "./src/Grammar/grammar.y"
{
    optic::out() << "Pattern assignment" << std::endl;
    yygotominor.yy0 = yymsp[-3].minor.yy0;
  yy_destructor(yypParser,1,&yymsp[-1].minor);
}
#line 4822 "./src/Grammar/grammar.c"
        break;
      case 153: /* pattern ::= LPAREN NAME PREPEND NAME RPAREN */
#line 1335 "./src/Grammar/grammar.y"
{
    std::cout << "PATTERN_ARGUMENT" << std::endl;
    yymsp[-3].minor.yy0.type = optic::PATTERN;
    yymsp[-1].minor.yy0.type = optic::PATTERN;
    yygotominor.yy0.type = optic::PATTERN;

  yy_destructor(yypParser,43,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 4836 "./src/Grammar/grammar.c"
        break;
      case 154: /* expr ::= expr PREPEND expr */
#line 1344 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::prepend,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 4849 "./src/Grammar/grammar.c"
        break;
      case 155: /* expr ::= expr APPEND expr */
#line 1354 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::append,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 4862 "./src/Grammar/grammar.c"
        break;
      case 156: /* expr ::= expr PLUSPLUS expr */
#line 1364 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&optic::concat,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,41,&yymsp[-1].minor);
}
#line 4875 "./src/Grammar/grammar.c"
        break;
      case 157: /* expr ::= expr PLUS expr */
#line 1374 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::plus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
#line 4888 "./src/Grammar/grammar.c"
        break;
      case 158: /* expr ::= expr MINUS expr */
#line 1384 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
#line 4901 "./src/Grammar/grammar.c"
        break;
      case 159: /* expr ::= expr DIVIDE expr */
#line 1394 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::divide);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
#line 4914 "./src/Grammar/grammar.c"
        break;
      case 160: /* expr ::= expr TIMES expr */
#line 1404 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::multiply);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,35,&yymsp[-1].minor);
}
#line 4927 "./src/Grammar/grammar.c"
        break;
      case 161: /* expr ::= expr MODULO expr */
#line 1414 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::modulo);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
#line 4940 "./src/Grammar/grammar.c"
        break;
      case 162: /* expr ::= expr POW expr */
#line 1424 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_pow);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,37,&yymsp[-1].minor);
}
#line 4953 "./src/Grammar/grammar.c"
        break;
      case 163: /* expr ::= expr EQUALTO expr */
#line 1434 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,24,&yymsp[-1].minor);
}
#line 4966 "./src/Grammar/grammar.c"
        break;
      case 164: /* expr ::= expr NOTEQUALTO expr */
#line 1444 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::not_equal_to);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,25,&yymsp[-1].minor);
}
#line 4979 "./src/Grammar/grammar.c"
        break;
      case 165: /* expr ::= expr LESSTHAN expr */
#line 1454 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::less_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,28,&yymsp[-1].minor);
}
#line 4992 "./src/Grammar/grammar.c"
        break;
      case 166: /* expr ::= expr GREATERTHAN expr */
#line 1464 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::greater_than);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 5005 "./src/Grammar/grammar.c"
        break;
      case 167: /* expr ::= expr LORE expr */
#line 1474 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::lore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
#line 5018 "./src/Grammar/grammar.c"
        break;
      case 168: /* expr ::= expr GORE expr */
#line 1484 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::gore);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 5031 "./src/Grammar/grammar.c"
        break;
      case 169: /* expr ::= expr AND expr */
#line 1494 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,21,&yymsp[-1].minor);
}
#line 5044 "./src/Grammar/grammar.c"
        break;
      case 170: /* expr ::= expr OR expr */
#line 1504 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::value_or);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 5057 "./src/Grammar/grammar.c"
        break;
      case 171: /* expr ::= BITNOT expr */
#line 1514 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&optic::bit_not);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,39,&yymsp[-1].minor);
}
#line 5070 "./src/Grammar/grammar.c"
        break;
      case 172: /* expr ::= LPAREN MINUS expr RPAREN */
#line 1524 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-1].minor.yy0,&panopticon::u_minus);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,43,&yymsp[-3].minor);
  yy_destructor(yypParser,33,&yymsp[-2].minor);
  yy_destructor(yypParser,44,&yymsp[0].minor);
}
#line 5085 "./src/Grammar/grammar.c"
        break;
      case 173: /* expr ::= NOT expr */
#line 1534 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[0].minor.yy0,&panopticon::not_value);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,38,&yymsp[-1].minor);
}
#line 5098 "./src/Grammar/grammar.c"
        break;
      case 174: /* expr ::= expr SHIFTL expr */
#line 1544 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_left);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,30,&yymsp[-1].minor);
}
#line 5111 "./src/Grammar/grammar.c"
        break;
      case 175: /* expr ::= expr SHIFTR expr */
#line 1554 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::shift_right);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,31,&yymsp[-1].minor);
}
#line 5124 "./src/Grammar/grammar.c"
        break;
      case 176: /* expr ::= expr BITAND expr */
#line 1564 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_and);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,23,&yymsp[-1].minor);
}
#line 5137 "./src/Grammar/grammar.c"
        break;
      case 177: /* expr ::= expr BITXOR expr */
#line 1574 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0,&panopticon::bit_xor);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,22,&yymsp[-1].minor);
}
#line 5150 "./src/Grammar/grammar.c"
        break;
      case 178: /* array_index ::= function_call LBRAC expr RBRAC */
      case 180: /* array_index ::= array_index LBRAC expr RBRAC */ yytestcase(yyruleno==180);
      case 196: /* array_index ::= name_space LBRAC expr RBRAC */ yytestcase(yyruleno==196);
#line 1584 "./src/Grammar/grammar.y"
{
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,45,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5166 "./src/Grammar/grammar.c"
        break;
      case 179: /* array_index ::= NAME LBRAC expr RBRAC */
#line 1594 "./src/Grammar/grammar.y"
{
    yymsp[-3].minor.yy0.type = optic::STRING;
    optic::store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,&optic::index,false);
    if(!panopticon::correct_parsing)
    {
        while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
        ParseARG_STORE;
    }
  yy_destructor(yypParser,45,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5181 "./src/Grammar/grammar.c"
        break;
      case 182: /* array_index ::= NAME LBRAC PREPEND expr RBRAC */
      case 197: /* array_index ::= array_index LBRAC PREPEND expr RBRAC */ yytestcase(yyruleno==197);
      case 211: /* array_index ::= function_call LBRAC PREPEND expr RBRAC */ yytestcase(yyruleno==211);
      case 225: /* array_index ::= name_space LBRAC PREPEND expr RBRAC */ yytestcase(yyruleno==225);
#line 1627 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-1].minor.yy0,optic::slice_beginning_to,false);
  yy_destructor(yypParser,45,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5194 "./src/Grammar/grammar.c"
        break;
      case 183: /* array_index ::= NAME LBRAC expr PREPEND RBRAC */
      case 198: /* array_index ::= array_index LBRAC expr PREPEND RBRAC */ yytestcase(yyruleno==198);
      case 212: /* array_index ::= function_call LBRAC expr PREPEND RBRAC */ yytestcase(yyruleno==212);
      case 226: /* array_index ::= name_space LBRAC expr PREPEND RBRAC */ yytestcase(yyruleno==226);
#line 1633 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,optic::slice_to_end,false);
  yy_destructor(yypParser,45,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5207 "./src/Grammar/grammar.c"
        break;
      case 184: /* array_index ::= NAME LBRAC expr PREPEND expr RBRAC */
      case 199: /* array_index ::= array_index LBRAC expr PREPEND expr RBRAC */ yytestcase(yyruleno==199);
      case 213: /* array_index ::= function_call LBRAC expr PREPEND expr RBRAC */ yytestcase(yyruleno==213);
      case 227: /* array_index ::= name_space LBRAC expr PREPEND expr RBRAC */ yytestcase(yyruleno==227);
#line 1639 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,range,optic::slice,false);
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5223 "./src/Grammar/grammar.c"
        break;
      case 185: /* array_index ::= NAME LBRAC COLONCOLON expr RBRAC */
      case 200: /* array_index ::= array_index LBRAC COLONCOLON expr RBRAC */ yytestcase(yyruleno==200);
      case 214: /* array_index ::= function_call LBRAC COLONCOLON expr RBRAC */ yytestcase(yyruleno==214);
      case 228: /* array_index ::= name_space LBRAC COLONCOLON expr RBRAC */ yytestcase(yyruleno==228);
#line 1650 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-4].minor.yy0,yymsp[-1].minor.yy0,optic::slice_all_with_step,false);
  yy_destructor(yypParser,45,&yymsp[-3].minor);
  yy_destructor(yypParser,42,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5236 "./src/Grammar/grammar.c"
        break;
      case 186: /* array_index ::= NAME LBRAC expr COLONCOLON expr RBRAC */
      case 201: /* array_index ::= array_index LBRAC expr COLONCOLON expr RBRAC */ yytestcase(yyruleno==201);
      case 215: /* array_index ::= function_call LBRAC expr COLONCOLON expr RBRAC */ yytestcase(yyruleno==215);
      case 229: /* array_index ::= name_space LBRAC expr COLONCOLON expr RBRAC */ yytestcase(yyruleno==229);
#line 1656 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,range,optic::slice_beginning_to_with_step,false);
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,42,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5252 "./src/Grammar/grammar.c"
        break;
      case 187: /* array_index ::= NAME LBRAC PREPEND expr PREPEND expr RBRAC */
      case 202: /* array_index ::= array_index LBRAC PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==202);
      case 216: /* array_index ::= function_call LBRAC PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==216);
      case 230: /* array_index ::= name_space LBRAC PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==230);
#line 1665 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,range,optic::slice_to_end_with_step,false);
  yy_destructor(yypParser,45,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5269 "./src/Grammar/grammar.c"
        break;
      case 188: /* array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr RBRAC */
      case 203: /* array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==203);
      case 217: /* array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==217);
      case 231: /* array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr RBRAC */ yytestcase(yyruleno==231);
#line 1674 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    range.data.array->push_back(yymsp[-1].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_with_step,false);
  yy_destructor(yypParser,45,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5287 "./src/Grammar/grammar.c"
        break;
      case 189: /* array_index ::= NAME LBRAC expr PREPEND MODULO RBRAC */
      case 204: /* array_index ::= array_index LBRAC expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==204);
      case 218: /* array_index ::= function_call LBRAC expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==218);
      case 232: /* array_index ::= name_space LBRAC expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==232);
#line 1685 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,optic::slice_beginning_to_wrapping,false);
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5301 "./src/Grammar/grammar.c"
        break;
      case 190: /* array_index ::= NAME LBRAC PREPEND expr PREPEND MODULO RBRAC */
      case 205: /* array_index ::= array_index LBRAC PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==205);
      case 219: /* array_index ::= function_call LBRAC PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==219);
      case 233: /* array_index ::= name_space LBRAC PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==233);
#line 1691 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,optic::slice_to_end_wrapping,false);
  yy_destructor(yypParser,45,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5316 "./src/Grammar/grammar.c"
        break;
      case 191: /* array_index ::= NAME LBRAC expr PREPEND expr PREPEND MODULO RBRAC */
      case 206: /* array_index ::= array_index LBRAC expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==206);
      case 220: /* array_index ::= function_call LBRAC expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==220);
      case 234: /* array_index ::= name_space LBRAC expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==234);
#line 1697 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_with_wrapping,false);
  yy_destructor(yypParser,45,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5334 "./src/Grammar/grammar.c"
        break;
      case 192: /* array_index ::= NAME LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */
      case 207: /* array_index ::= array_index LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==207);
      case 221: /* array_index ::= function_call LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==221);
      case 235: /* array_index ::= name_space LBRAC expr COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==235);
#line 1706 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-7].minor.yy0,range,optic::slice_beginning_to_with_step_wrapping,false);
  yy_destructor(yypParser,45,&yymsp[-6].minor);
  yy_destructor(yypParser,42,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5352 "./src/Grammar/grammar.c"
        break;
      case 193: /* array_index ::= NAME LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */
      case 208: /* array_index ::= array_index LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==208);
      case 222: /* array_index ::= function_call LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==222);
      case 236: /* array_index ::= name_space LBRAC PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==236);
#line 1715 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-8].minor.yy0,range,optic::slice_to_end_with_step_wrapping,false);
  yy_destructor(yypParser,45,&yymsp[-7].minor);
  yy_destructor(yypParser,17,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5371 "./src/Grammar/grammar.c"
        break;
      case 194: /* array_index ::= NAME LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */
      case 209: /* array_index ::= array_index LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==209);
      case 223: /* array_index ::= function_call LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==223);
      case 237: /* array_index ::= name_space LBRAC expr PREPEND expr PREPEND expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==237);
#line 1724 "./src/Grammar/grammar.y"
{
    optic::object range = optic::mem_alloc(optic::ARRAY);
    range.data.array->push_back(yymsp[-7].minor.yy0);
    range.data.array->push_back(yymsp[-5].minor.yy0);
    range.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,yymsp[-9].minor.yy0,range,optic::slice_with_step_wrapping,false);
  yy_destructor(yypParser,45,&yymsp[-8].minor);
  yy_destructor(yypParser,17,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5391 "./src/Grammar/grammar.c"
        break;
      case 195: /* array_index ::= NAME LBRAC COLONCOLON expr PREPEND MODULO RBRAC */
      case 210: /* array_index ::= array_index LBRAC COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==210);
      case 224: /* array_index ::= function_call LBRAC COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==224);
      case 238: /* array_index ::= name_space LBRAC COLONCOLON expr PREPEND MODULO RBRAC */ yytestcase(yyruleno==238);
#line 1734 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,optic::slice_all_with_step,false);
  yy_destructor(yypParser,45,&yymsp[-5].minor);
  yy_destructor(yypParser,42,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5406 "./src/Grammar/grammar.c"
        break;
      case 239: /* expr ::= LBRAC expr RANGE expr RBRAC */
#line 2103 "./src/Grammar/grammar.y"
{
    store_operations(yygotominor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,optic::range_from_to);
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,59,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5416 "./src/Grammar/grammar.c"
        break;
      case 240: /* expr ::= LBRAC expr COMMA expr RANGE expr RBRAC */
#line 2108 "./src/Grammar/grammar.y"
{
    optic::object start_step = optic::mem_alloc(optic::ARRAY);
    start_step.data.array->push_back(yymsp[-5].minor.yy0);
    start_step.data.array->push_back(yymsp[-3].minor.yy0);
    store_operations(yygotominor.yy0,start_step,yymsp[-1].minor.yy0,optic::range_from_step_to,false);
  yy_destructor(yypParser,45,&yymsp[-6].minor);
  yy_destructor(yypParser,11,&yymsp[-4].minor);
  yy_destructor(yypParser,59,&yymsp[-2].minor);
  yy_destructor(yypParser,46,&yymsp[0].minor);
}
#line 5430 "./src/Grammar/grammar.c"
        break;
      case 241: /* in ::= error */
#line 2120 "./src/Grammar/grammar.y"
{
    switch(yymsp[0].minor.yy193)
    {
    case panopticon::OpenQuoteError:
/*        panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;*/
        break;
    default:
/*        panopticon::out() << "ERROR p0000: UnknownError" << std::endl;*/
        break;
    }
}
#line 5445 "./src/Grammar/grammar.c"
        break;
      case 242: /* error ::= OPENQUOTEERROR */
#line 2133 "./src/Grammar/grammar.y"
{
    yymsp[0].minor.yy0.type = panopticon::NUMBER;
    yygotominor.yy193 = panopticon::OpenQuoteError;
    panopticon::out() << "ERROR p0001: Dangling quotation mark." << std::endl;
}
#line 5454 "./src/Grammar/grammar.c"
        break;
      default:
      /* (0) main ::= in */ yytestcase(yyruleno==0);
      /* (1) in ::= */ yytestcase(yyruleno==1);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 90 "./src/Grammar/grammar.y"

panopticon::out() << "Syntax error!" << std::endl;
#line 5521 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 85 "./src/Grammar/grammar.y"

printf("parsing complete!\n\n\n");
#line 5543 "./src/Grammar/grammar.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
