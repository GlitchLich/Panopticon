//Dictionary Tests!
//FOUR different syntaxes, Horziontal vs Vertical, keyworded dict vs none

//Horizontal construction
myDict = { Turtles = true Octopi = "are cool" Array = [0 1 2 3 4] dictFunc x y = x + y Dragon = { test = 4 } }

//Vertical Construction, with nested dictionaries
myDict =          
	Turtles = true 
	Octopi = "are cool" 
	Array = [0 1 2 3 4]
	dictFunc x y = x + y
	Dragon = 
		test = 4
		dictFunc x y = x + y
		dictFunc2 x y = x - y
		dictFunc3 x y = myDict::Dragon::dictFunc(x y) * myDict::Dragon::dictFunc2(x y)
		funcArray = [ 
			myDict::Dragon::dictFunc 
			myDict::Dragon::dictFunc2 
			myDict::Dragon::dictFunc3 
		]

//with keyword
myDict = dict { Turtles = true Octopi = "are cool" Array = [0 1 2 3 4] dictFunc x y = x + y Dragon = dict { test = 4 } }

//with keyword
myDict = dict          
	Turtles = true 
	Octopi = "are cool" 
	Array = [0 1 2 3 4]
	dictFunc x y = x + y
	Dragon = dict 
		test = 4
		dictFunc x y = x + y
		dictFunc2 x y = x - y
		dictFunc3 x y = myDict::Dragon::dictFunc(x y) * myDict::Dragon::dictFunc2(x y)
		funcArray = [ 
			myDict::Dragon::dictFunc 
			myDict::Dragon::dictFunc2 
			myDict::Dragon::dictFunc3 
		]

myDict::Turtles == true
myDict::Octopi
myDict::Array
myDict::Dragon

//Nested Dictionaries
myDict::Dragon::test

//Dictionaries can do functions too!
myDict::Dragon::dictFunc(13 28)
myDict::Dragon::dictFunc2(13 28)
myDict::Dragon::dictFunc3(13 28)
//Dictionary stored Array Functors!
myDict::Dragon::funcArray[](13 28)
myDict::Dragon::funcArray[](myDict::Array myDict::Array+2)

//Throws correct errors
myDict::nullTest

//Alternate look up, can be used with vars:
myDict{"Array"}
stringVar = "Array"
myDict{stringVar}


//Functions in Dictionaries
//Doesn't work right now, need to work on this!
functionary = dict
	func  x = ( x + y ) * 10
		where
			y = x + 2
	func2 x = ( x + y ) * (-20)
		where
			y = x - 2
	guardFunc x min max
		| x < min	= min
		| x > max	= max
		_			= x

//Printing is off, but this is theoretically working.
myDict::Dragon + 4
myDict::Turtles == true
myDict::Octopi + ", fuck yeah"
//Pringint works for this, this IS working.
myDict::Array <: 666 <: (-666)

//Correct Error throwing:
//Wrong index:
myDict{"No index"}
//Null variable
nullVar{"Dragon"}
//THIS CRASHES, Don't know why....
notADict = 5
notADict{"Dragon"}

lookThatShitUp x y = d{x} * a[y]
	where
		d = dict
			zero 	= 0
			one		= 1
			two		= 2
			three	= 3
			four	= 4
		a = [
			10
			11
			12
			13
			14
		]

lookThatShitUp(

//Horizontal nesting
level1 = dict { level2 = dict { level3 = dict { level4 = dict { level5 = false } } } }
			
//Vertical nesting
level1 = dict
	level2 = dict
		level3 = dict
			level4 = dict
				level5 = true

level1
level1::level2
level1::level2::level3
level1::level2::level3::level4
level1::level2::level3::level4::level5

