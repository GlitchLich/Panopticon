//Dictionary Tests!
//FOUR different syntaxes, Horziontal vs Vertical, keyworded dict vs none

//Horizontal construction
myDict = { Turtles = true Octopi = "are cool" Array = [0 1 2 3 4] dictFunc x y = x + y Dragon = { test = 4 } }

//Vertical Construction, with nested dictionaries
myDict =             
	Turtles = true 
	Octopi = "are cool" 
	Array = [0 1 2 3 4]
	dictFunc x y = x + y
	Dragon = 
		test = 4

//with keyword
myDict = dict { Dragon = dict { test = 4 } Turtles = true Octopi = "are cool" Array = [0 1 2 3 4] }

//with keyword
myDict = dict          
	Turtles = true 
	Octopi = "are cool" 
	Array = [0 1 2 3 4]
	Dragon = dict 
		test = 4

myDict::Turtles == true
myDict::Octopi
myDict::Array
myDict::Dragon
//Nested Dictionaries
myDict::Dragon::test

myDict::nullTest

//Alternate look up, can be used with vars:
myDict{"Array"}

vertDict =
	Treble 	= 0
	Mid 	= 0.3
	Bass	= 11

vertDict::Treble
vertDict::Mid
vertDict::Bass

//Printing is off, but this is theoretically working.
myDict::Dragon + 4
myDict::Turtles == true
myDict::Octopi + ", fuck yeah"
//Pringint works for this, this IS working.
myDict::Array <: 666 <: (-666)

//Correct Error throwing:
//Wrong index:
myDict{"No index"}
//Null variable
nullVar{"Dragon"}
//THIS CRASHES, Don't know why....
notADict = 5
notADict{"Dragon"}

lookThatShitUp x y = a[y]
	where
		d = dict
			zero 	= 0
			one		= 1
			two		= 2
			three	= 3
			four	= 4
		a = [
			"ten"
			"eleven"
			"twelve"
			"thirteen"
			"fourteen"
		]

//Horizontal nesting
level1 = dict { level2 = dict { level3 = dict { level4 = dict { level5 = false } } } }
			
//Vertical nesting
level1 = dict
	level2 = dict
		level3 = dict
			level4 = dict
				level5 = true

level1
level1::level2
level1::level2::level3
level1::level2::level3::level4
level1::level2::level3::level4::level5

