//Dictionary Tests!
//FOUR different syntaxes, Horziontal vs Vertical, keyworded dict vs none
dictionary = { Turtles = true Octopi = "are cool" dictFunc x y = x + y Dragon = { test = 4 } }
dictionary::Turtles

yes = { yes = "yo" }
yes
// good
no = insert(yes "yes" 0 )
no
noo = insert(yes "yes" 0 0)
// bad, won't work because you gave (dict key val key) instead of (dict key val key val)
noo

stringDict = { one = "one" two = "two" three = "three" }
stringDict
insert(stringDict "four" "four")
lookup(stringDict "one")

funcDict = { mul x y = x * y }
funcDict
metamul = lookup(funcDict "mul")
metamul( 2 3 )
type(funcDict)
type(metamul( 2 3 ))
type(type)
func x = x * 10
// CRASHES RIGHT NOW
type(func)
type( func funcDict metamul( 2 3 ) )
size( metamul( 2 3 ) funcDict )
twoFuncDict = insert(funcDict "div" \x y = x / y)
twoFuncDict
size( twoFuncDict )
// This doesn't work right, should be [ 1 1 4 ]
size( func funcDict insert(funcDict "one" 1 "two" 2 "Three" 3) )

numKeys = { one = 1 }
numKeys
print(remove(numKeys "one"))
print(insert(numKeys "one" 1.1))
type(numKeys)
print(type(insert(numKeys "one" 1.1)))
// Keys can be numbers (float or int) as well strings
moreNumKeys = insert(numKeys 2 2)
moreNumKeys
floatNumKeys = insert(numKeys 666.666 666.666)
floatNumKeys
moreInserts = insert(numKeys 1 1 2 2 3 3)
moreInserts
wordInsert = insert(numKeys "five" 5)
wordInsert
wordInserts = insert(numKeys "four" 4 "two" 2 "three" 3)
wordInserts
moreRemoves = remove(moreInserts 1 2 3)
moreRemoves
// Won't work, too few arguments
remove( moreRemoves )
// Won't work, wrong number of arguments
insert(numKeys "one")
// This should throw a useful error, but I think we have parsing problems
insert(numKeys 1 1 "five")

evil = { doom = 666 }
evil
replace = insert(evil "doom" 777)
replace
print(replace)
type(replace)
print(type(replace))
print(insert(replace "ninja" "turtle"))
added = insert(evil "moreDoom" 888)
added
replaceDoom = insert(added "doom" 999)
print(replaceDoom)

// Be careful though, precision is just to three decimal places
print(insert(numKeys 666.6666 666.666))
print(insert(numKeys 666.6669 666.666))

ten = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 eight = 8 nine = 9 ten = 10 }
ten
tenPlusTen = map(\x = x + 10 ten)
tenPlusTen
size(ten)
tenOdd = filter(\x = x % 2 == 1 ten)
tenOdd
tenEven = filter(\x = x % 2 == 0 ten)
tenEven
eleven = insert(ten "eleven" 11)
eleven
numEleven = insert(ten 11 11)
numEleven
size(eleven)
ten
one = lookup(eleven "one")
one

four = [ 1 2 3 4 ]
size(four)

// shouldn't work
wrongEleven = lookup(ten "eleven")
wrongEleven
// Should work
rightEleven = lookup(eleven "eleven")
rightEleven
elevenNoOne = remove(eleven "one")
elevenNoOne
size(elevenNoOne)
elevenNoOneTwo = remove(elevenNoOne "two")
elevenNoOneTwo
size(elevenNoOneTwo)
replaceThree = insert(elevenNoOneTwo "three" false)
replaceThree
print(replaceThree)

lookup(ten "ten")
lookup(ten "nine")
lookup(ten "eight")
lookup(ten "wrong")
lookup(wrong "wrong")
lookup(ten 666)

test = { one = 1 }
two = { one = 1 two = 2 }
print(test)
print(two)

string = { hello = "world" }
string2 = { hello = "hello" world = "world" }

//Horizontal construction
myDict = { Turtles = true Octopi = "are cool" Array = [0 1 2 3 4] dictFunc x y = x + y Dragon = { test = 4 } }
myDict2 = { Turtles = true Octopi = "are cool" dictFunc x y = x + y Dragon = { test = 4 } }
four = { one = 1 two = 2 three = 3 four = 4 }
five = { one = 1 two = 2 three = 3 four = 4 five = 5 }
six = { one = 1 two = 2 three = 3 four = 4 five = 5 size = 6 }
seven = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 }
eight = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 eight = 8 }
ten = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 eight = 8 nine = 9 ten = 10 }
sixteen = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 eight = 8 nine = 9 ten = 10 eleven = 11 twelve = 12 thirteen = 13 fourteen = 14 fifteen = 15 sixten = 16 }
seventeen = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 eight = 8 nine = 9 ten = 10 eleven = 11 twelve = 12 thirteen = 13 fourteen = 14 fifteen = 15 sixten = 16 seventeen = 17 }

nestedSeventeen = { one = 1 two = 2 three = 3 four = 4 five = 5 six = 6 seven = 7 eight = 8 nine = 9 ten = 10 eleven = 11 twelve = 12 thirteen = 13 fourteen = 14 fifteen = 15 sixten = 16 nest = { seventeen = 17 } }

seventeen
nestedSeventeen
nestedSeventeenPlusTen = map(\x = x + 10 nestedSeventeen)
nestedSeventeenPlusTen
print(four)
print(five)
print(six)
print(myDict2)
myArray = [ 0 1 2 3 ]
print(myArray)
print(seven)
print(eight)
print(ten)
[ 1 .. 99 ]
numDict = { one = 1 }
arrayDict = { one = [ 1 ] }
arrayDict
dictArray = [ { one = 1 two = 2 three = 3 } { four = 4 five = 5 } ]
dictArray[0]
print(dictArray)

//Vertical Construction, with nested dictionaries
myDict = {       
	Turtles = true 
	Octopi = "are cool" 
	Array = [0 1 2 3 4]
	dictFunc x y = x + y
	Dragon = {
		test = 4
		dictFunc x y = x + y
		dictFunc2 x y = x - y
		dictFunc3 x y = myDict::Dragon::dictFunc(x y) * myDict::Dragon::dictFunc2(x y)
		funcArray = [ 
			myDict::Dragon::dictFunc 
			myDict::Dragon::dictFunc2 
			myDict::Dragon::dictFunc3 
		]
	}
}

//with keyword
myDict = dict { Turtles = true Octopi = "are cool" Array = [0 1 2 3 4] dictFunc x y = x + y Dragon = dict { test = 4 } }

//with keyword
myDict = {    
	Turtles = true 
	Octopi = "are cool" 
	Array = [0 1 2 3 4]
	dictFunc x y = x + y
	Dragon = {
		test = 4
		dictFunc x y = x + y
		dictFunc2 x y = x - y
		dictFunc3 x y = myDict::Dragon::dictFunc(x y) * myDict::Dragon::dictFunc2(x y)
		funcArray = [ 
			myDict::Dragon::dictFunc 
			myDict::Dragon::dictFunc2 
			myDict::Dragon::dictFunc3 
		]
	}
}

myDict::Turtles
myDict::Octopi
myDict::Array
myDict::Dragon
lookup(myDict "Turtles")
lookup(myDict "Octopi")
lookup(myDict "Array")

myDict2::Turtles
myDict2::Octopi
myDict2::Array
myDict2::Dragon

//Nested Dictionaries
myDict::Dragon::test

//Dictionaries can do functions too!
myDict::Dragon::dictFunc(13 28)
myDict::Dragon::dictFunc2(13 28)
myDict::Dragon::dictFunc3(13 28)
//Dictionary stored Array Functors!
myDict::Dragon::funcArray[](13 28)
myDict::Dragon::funcArray[](myDict::Array myDict::Array+2)

//Throws correct errors
myDict::nullTest

//Alternate look up, can be used with vars:
myDict{"Array"}
stringVar = "Array"
myDict{stringVar}

//Functions in Dictionaries
//Doesn't work right now, need to work on this!
functionary = {
	func  x = ( x + y ) * 10
		where
			y = x + 2
	func2 x = ( x + y ) * (-20)
		where
			y = x - 2
	guardFunc x min max
		| x < min	= min
		| x > max	= max
		_			= x
}

//Printing is off, but this is theoretically working.
myDict::Dragon + 4
myDict::Turtles == true
myDict::Octopi + ", fuck yeah"
//Pringint works for this, this IS working.
myDict::Array <: 666 <: (-666)

//Correct Error throwing:
//Wrong index:
myDict{"No index"}
//Null variable
nullVar{"Dragon"}
//THIS CRASHES, Don't know why....
notADict = 5
notADict{"Dragon"}

lookThatShitUp x y = d{x} * a[y]
	where
		d = {
			zero 	= 0
			one		= 1
			two		= 2
			three	= 3
			four	= 4
		}
		a = [
			10
			11
			12
			13
			14
		]

lookThatShitUp(

//Horizontal nesting
level1 = { level2 = dict { level3 = dict { level4 = dict { level5 = false } } } }
			
//Vertical nesting
level1 = {
	level2 = {
		level3 = {
			level4 = {
				level5 = true
			}
		}
	}
}

level1
level1::level2
level1::level2::level3
level1::level2::level3::level4
level1::level2::level3::level4::level5

lookup(level1 "level2")
lookup(lookup(level1 "level2") "level3")
lookup(lookup(lookup(level1 "level2") "level3") "level4")
lookup(lookup(lookup(lookup(level1 "level2") "level3") "level4") "level5")

test = [ 0 1 2 3 ]
test
