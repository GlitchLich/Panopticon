// Arrays
1 + [ 0 1 2 3 ]
[ 0 1 2 3 ] + 1
[ 0 1 2 ] + [ 0 1 2 3 ]
[ 0 1 2 3 5 6 ] / [ 0 1 2 3 ] 
[ 3 2 1 ] / [ 1 2 3 ]

array = [ 0 1 2 3 4 ]
myArray = [23 22 0 20+1]
myArray[0]
myArray[1]
myArray[2]
myArray[3]

printer x = print( x )
printer( 1 )
printer( 2 )
printer( 3 )
printed x = print([ x ])
printed( 1 )
printed( 2 )
printed( 3 )

// Works
function x = [ x 1 2 ]
function( 0 )
function( 1 )

// Works
one x = x
one( 1 )
one( 2 )
one( [ 3 * 3] )
one( "String" )

// STILL WORKS
one( one ) 

// Array of functions DOESN'T WORK
add x y = x + y
adds = [ add add add ]
adds
adds[0]( 1 1 )

// Works
anArray x = [ x ]
anArray( 1 )
seven = 7
sevened x = [ x seven seven ]
sevened( 1 )
funcArray f = [ f f f ]
functions = funcArray( anArray )
functions[0]( 0 )
shift x y = x << y
shift( 2 3 )
shifts = funcArray( shift )
shifts[0]( 2 3 )
shifts[]( 2 3 )
shifts[]( 2 shifts[]( 2 3 ) )
moreshifts = [ shift shift shift ]
moreshifts[0]( 2 3 )
moreshifts[]( 2 3 )
moreshifts[]( [ 2 3 4 5 ] 2 )

// Nested Arrays from functions
nest x = [ [ [ x ] x ] x ]
nest( 1 )
nest( seven )
cube x = x ^ 3
// Doesnt work because arrays of functions don't work
nest( cube )[0]
nest( cube( 3 ) )

// Works
paren x = ( x )
paren( 2 )
paren( [ 2 ] )

// Nested Arrays
[ [ 1 ] ] + 1
2 + [ [ 0 1 ] 2 3 ]
[ [ 1 ] 1 ] + 1
[ [ 0 1 ] 2 3 ] + 2
[ [ 1 ] ] + [ [ [ 2 ] ] ]
[ [ 0 1 2 ] + [ 0 1 2 3 ] ] + 1
[ [ 0 1 2 ] + [ 0 1 2 3 ] ] + [ 0 1 2 3 [ 4 5 6 * 7] ] / [ 9 [ 8 7 6 ] [ 5 4 3 ] [ 2 ] 1 ]
[ [ 0 1 2 ] + [ 0 1 2 3 ] ] + [ 0 1 [ 2 ] 3 [ 4 5 6 * 7 9 9 9 9 9] ] / [ 9 [ 8 7 6 ] [ 5 4 3 ] [ 2 ] 1 ]
[ "hey" [ 0 1 2 3 4 5 ] [ [ [ "yo yo yo" ] ] ] ] + [ 1 [ " soy soy" ] [ 2 * 3 ] [ [ [ 2 ] ] ] ]

[ 0 1 + 1 3 ]

// unary operators
-1
>> 16

// Works
1 + ( 1 + 2 )

// Works
( 1 + 2 ) + 2.5

// Works
mul x y = x * y
mul( 2 3 ) + 1

// Doesn't work
mul(
	2
	3
)

// Works
ten = 10
ten
ten()
ten + 1
1 + ten
ten * ten
mul( ten ten )
twenty = ten * 2
twenty

mul x y = x * y
double x = x * 2
// double is eager evaluated, the call has been made
mul( double( 10 ) 2 ) 
ten = 10
// ten is lazy evaluated
mul( ten ten ) 

// WORKS
thirty = three() * 10
three = 3
thirty()

// Lazy evaluation
lazy op = op( anon )
double x = x * 2
lazier anon = lazy( double )
hundred = 100
fiveHundred = hundred * 5
fiveThousand = fiveHundred * 10
lazier( hundred )
lazier( fiveHundred )
lazier( fiveThousand )

// Works
1 + [ ten ten ]


// Works
1 + [ 0 1 2 3 ] + ten
ten + [ 0 1 2 3 ] + 1

// Passing functions

//Function calls in Function declarations
binOp op x y = op( x y )
mul x y = x * y
binOp( mul 2 3 )
div x y = x / y
binOp( div 2 3 )
div( [ 1 2 3 ] 3 )
arrayDiv x y z = [ x y ] / z
arrayDiv( 2 3 3)
arrayDiv( 3 4 5 )
arrayDiv( [ 0 1 2 3 4 5 ] 1 2 )

//Arrays in Function Calls
plusOne x = x + 1
//Works
plusOne([0 1 2 3])
//Works
plusOne(plusOne([0 1 2 3]))

//Arrays in Function Declarations
arrayPlusOne x = [2 3]+x
arrayPlusOne(1)
arrayPlusOne([ 3 4 5 6 7 ])
arrayPlusOne( arrayPlusOne([ 0 1 2 3 4 5]) )

// Works
combiner x y = [x y]
combiner(12 13)
combinedPlus x y = [x y]+1
combinedPlus(3 2)

// Doesn't work
printer x y = print([ x y ])
printer( 2 3 )
printer( [ 0 1 2 ] 2 )
printer( 5 6 )

//Goes infinite, crashes. Need guards for this to work
plusOne x = x + 1
funcRepeater op x t = funcRepeater(op op(x) t-1)

// maps
myMap< monkey = 4 >
myMap["monkey"] == 4

//Guard version, needs logic:
plusOne x = x + 1
funcRepeater op x t 
	| t > 0 = funcRepeater(op op(x) t-1)
	_		= x+op(x)

funcReapeter(plusOne,10,5)
