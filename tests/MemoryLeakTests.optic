// Memory Leak Tests

//===========================
// Total Report:
// No Leaks: 16
// Leaks: 6
// Negative Leaks: 0
// Crashes: 3
//===========================

//Numbers: No Leaks
1
//Booleans: No Leaks
true
//Strings: No Leaks
"test"
//Number Arrays: No Leaks
[ 0 1 2 3 ]
//Mixed Arrays: No Leaks
[ 0 true "test" [ 3 2 ] ]
//Number Math: No Leaks
1 + 1 * 3 / 2 - 1 
//Boolean Math: No Leaks
true + false
//String Math: No Leaks
"Are there" + "Leaks?"
//Array Math: No Leaks
[ 0 1 2 3 ] + [ 0 1 2 3 4 ]
//Declaring Variables: No Leaks
a = [ 0 1 2 3 ]
//Using Variables: No Leaks
a
//Declaring Vanilla Number Functions: No Leaks
f x = x * 2
//Using Vanilla Number Functions: No Leaks
f(2)

array x = [ x x x x x x x ]
array(10)
array([ array("Ten") array(9) ])

hello x = x + " World."
hello("Hello")

//Declaring Vanilla Guards: LEAKS!!!!!!!!!!!!!!
regularGuard x
	| x > 1	= 1
	| x < 1 = (-1)
	_		= 0
//Using Vanilla Guards: (I believe no more leaks than what comes from declaring the guard function)
regularGuard(10)
//Declaring String Guards: LEAKS!!!!!!!!!!!!!!
stringGuard x
       | x == "hey"     = "No"
       | x == "Turtle"	= "Cool"
       _                = "Yes"
//Using String Guards: SEGMENTATION FAULT CRASH!!!!!!!!!!!!!!!!!!!!!
stringGuard("hey")
//Declaring Array Guards: LEAKS!!!!!!!!!!!!!!
arrayGuard x
       | x[0] == 0     	= 10
       | x[0] == 1		= [ 100 100 ]
       _                = 0.1
//Using Array Guards: SEGMENTATION FAULT CRASH!!!!!!!!!!!!!!!!!!!!!
//ONLY WHEN RETURNING AN ARRAY
arrayGuard([2 1 2 3])
//Declaring Where Functions: LEAKS!!!!!!!!!!!!!!
regularWhere x = x * y
	where
    	y = 20
//Declaring Where Functions: SEGMENTATION FAULT CRASH!!!!!!!!!!!!!!!!!!!!!
regularWhere( 13.3 )
//Declaring String Function: No Leaks
string x = "String " + x
//Using String Functions: No Leaks
string(2)
//Print: No Leaks
print("Hello World")
//Declaring Dictionaries: LEAKS!!!!!!!!!!!!!!
myDict = { test = 1 test2 = true test3 = "hey" test4 = [ 0 1 2 3 ] }
//Using Dictionaries: LEAKS!!!!!!!!!!!!!!
myDict::test
