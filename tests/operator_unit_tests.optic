//Unit Tests

//An interesting idea....We could have a function library, this library would be compiled at startup, and would follow rules similar to Pure functional languages: Any functions/Values (which are functions in reality) are immutable and cannot be redefined. Furthermore they are immutable even at runtime. However, one may define functions / values at run time which are mutable. Would serve our two purposes (composed pieces and live coding) well.

//Switches? Guards? Pattern Matching?
//Array Slicing? first five elements: a[:5],last five elements, a[5:],
//every other elements, a[::2], 1 through 3 a[1::3]

(
subvariable = x * z
	where
		x = 10
		z = 11

subvariable + subvariable / [ subvariable * 3.141592654 ]

//Where
whereFunc x = x + w - t
	where 
		w = 5
		t = w * x

whereArray = [ whereFunc( 11.1 ) whereFunc( 11 ) ] 
whereArray

//Where with sub functions
subFunc x y = ( x + w ) - ( t(x y) - y ) 
	where 
		w = 5
		t z d = ( z * d ) / 10
subFunc( 13 10 )
subFunc( [ 13 ] 10 )

//Dynamic Scoping in action
subFunc2 x y = t(x y)
	where 
		t y x = x - y

subFunc2( 1 2 )
subFunc2( [ 1 2 ] 2 )

// Arrays in where statement
subFunc3 x y = t(x y)
	where 
		t y x = [ x y ]

subFunc3( 1 2 )

testFunc x y = [ x y ]
subFunc4 x y = t( x y )
	where 
		t y x = testFunc( y x )

subFunc4( 1 2 )

subvariable = x * z
	where
		x = 10
		z = 11

t w z = w - z
subFunc5 x y = t(x y) * [ 1 2 ]
subFunc5( 1 2 )

subFunc6 x y = [ 2 ]
	where 
		t w = w * 2
		z = 1

subFunc6( 1 2 )

//Arrays with sub functions crashes
subFunc3 x y= t(x y)
	where 
		t y x = [ x y ]

subFunc3( 1 2 )

//Arrays with sub functions crashes
subFunc3 x y= [ t(x y) t(x y) ]
	where 
		t w z = w - z

subFunc3( 1 2 )


chain x = x + y + z + q + w
	where
		y = 1
		z = 2
		q = 3
		w = 4

chain(3)


chain2 x y = p( x )
	where
		p x = print( x )

chain2( [ 3  1 ] 2 )
//Working on where, two different syntaxes:
//Syntax works, logic not in yet.
myGuardFunc x y
	| x+y > 5 	= 6
	| x+y == 5 	= 5
	_ 			= 0
	where	z = 5
			mySubFunc x2 z3 = ("fuck" + x2) + x3
myGuardFunc2 x y
	| x+y > 5 	= 6
	| x+y == 5 	= 5
	_ 			= 0
	where	
		z = 5
		mySubFunc x2 z3 = ("fuck" + x2) + x3

//()'s disband the offside rule
myGuardFunc(
	6 
	0
)

myGuardFunc(2 2)
myGuardFunc(3 2)


//Can Match to different types, produce different types
myGuardFunc3 x 
	| x == "hey" 	= "Hell yeah" 
	| x == 3 		= x^4
	where

myGuardFunc3("hey")
myGuardFunc3(3)
//Throws an error, because no conditions are met. Be careful about this!
myGuardFunc3(0)

//Recursive guards. This way you can make recursion STOP. haha....
factorial n
	| n <= 0 	= 1
	_ 			= n * factorial(n -1)

factorial(1)
factorial(5)
factorial(10)
factorial(20)
//Speed Test (though printing doesn't help....)
factorial(2000)

//Syntax WORKING
myWhereFunc x
	| x + y < 4 = 0
	| x + y > 4 = 2
	_			= 1
	where
		y = 1


//Not working
myCaseFunc x = 
	case x of
		0 -> 1
		1 -> 2
		_ -> 4
		case x of
			0 -> 1
			1 -> 2
			_ -> 4

letFunc x = 
	let	
		w = 2000 + x 
		z = 399/x
	in x + w * z		
)

//Guard version, needs logic:
plusOne x = x + 1
funcRepeater op x t 
	| t > 0 = x + funcRepeater(op op(x) t-1)
	_		= x+op(x)

funcReapeter(plusOne,2,5)

// STILL Doesn't Work
combiner x y = [x y]
combiner(12 13)

//Arrays with variables in Function declarations
combinedPlus x y i1 i2 = [ x[i1] y[i2] ] + 1
combinedPlus([2 3 4] [4 5 6] 0 2)

separatedPlus x = x[0]+1
anArray = [14 15 16]
separatedPlus(anArray)

getIndex x = x[0]

getIndex([2 3 4])

//parentheses with operations
pL = 10*(2+1)
pL()
pR x y = (x+y)*10
pR(1 1)

ten = 5+5
ten
10+ten
ten+10
twenty = ten + 10
twenty

//variables, crashes needs lexical scoping
num = 5
otherNum = num*33.3
num * otherNum

mybool = true
myfalsebool = !mybool
myfalsebool != mybool

//Undeclare Variables throw errors:
n*m+z

//INDEXING ARRAYS
myArray = [23 22 0 20+1]
myArray[0]
myArray[1]
myArray[2]
myArray[3]
myArray[[[3 1]]]
myArray[myArray[myArray[2]+2]+1]

//Multi-dimensional Array
nestedarray = [ 23 [ 22 21 [ "three" "four" [ "beer" "is good" [ true false ] ] ] ] 20 ]
nestedarray[1]
nestedarray[1][2]
nestedarray[1][2][2]
nestedarray[1][2][2][2]
nestedarray[1][2][2][2][0]

myArray

metaArray = [0 1 myArray 3]
metaArray[2]
metaArray[2][3]

//Indexing in function calls
//Index a previously declared array
valueAtIndex i = myArray[i]
valueAtIndex(3)
//Index a local variable...
valueAtIndex2 a i = a[i]
valueAtIndex2( [3 4 5 6] 2 )
valueAtIndex2( myArray 1 )
//Calling another Function which indexes an array
superLazyIndexing aFunc a i = aFunc(a() i)
superLazyIndexing( valueAtIndex2 myArray 3 )

//Array functions used for Function Calls
myFunc x y = x / y
multiArray = [23 22 [ 0 4 [ 6 7 ] ] 20]
myFunc(2 multiArray)
myFunc(multiArray[2][2][1] multiArray[2])

//Functions as arguments to Function calls
ten = 10
doubler x = x*2
doubler(ten)
doubler(myArray)

//Incorrect number of arguments throws an error.
myFunc(1 2)

//Non-existent Functions throw errors.
myFun(10 11)

"hey"[0]
4[0]
true[0]
myarray["hey"]
myarray[true]
myarray[4]

//PLUS
4 + 4
4 + true
4 + "hey"
4 + [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

"hey" + 4
"hey" + true
"hey" + "hey"
"hey" + [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

true + 4
true + false
true + "hey"
true +  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + false
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + "hey"
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + [0 [true 2 [3 "hey"] 5 [6 7] ] 8]
[0 [1 2 [3 4] 5 [6 7] ] 8] + [0 [1 2 [3 4] 5 [6 7] ] 8]

//MINUS
4 - 4
4 - true
4 - "hey"
4 - [0 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 - [0 [1 2 [3 6] 5 [6 7] ] 8]

"hey" - 4
"hey" - true
"hey" - "h"
"hey" - [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" - ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true - 4
true - false
true - "hey"
true -  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] - 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] - false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] - "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] - [0 [1 2 [3 4] 5 [6 7] ] 8]

//MULTIPLY
4 * 4
4 * true
4 * "hey"
4 * [0 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 * [0 [1 2 [3 6] 5 [6 7] ] 8]

"hey" * 4
"hey" * true
"hey" * "h"
"hey" * [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" * ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true * 4
true * false
true * "hey"
true *  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] * 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] * false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] * "h"
mulArrays = [0 [1 2 [3 4] 5 [6 7] ] 8] * [0 [1 2 [3 4] 5 [6 7] ] 8]
mulArrays
//DIVIDE
4 / 4.5
4 / true
4 / "hey"
4 / [1 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 / [1 [1 2 [3 6] 5 [6 7] ] 8]

"hey" / 4
"hey" / true
"hey" / "h"
"hey" / [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" / ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true / 4
true / false
true / "hey"
true /  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] / 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] / false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] / "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] / [1 [1 2 [3 4] 5 [6 7] ] 8]

//MOD
4 % 1.25
4 % true
4 % "hey"
4 % [1 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 % [1 [1 2 [3 6] 5 [6 7] ] 8]

"hey" % 4
"hey" % true
"hey" % "h"
"hey" % [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" % ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true % 4
true % false
true % "hey"
true %  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] % 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] % false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] % "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] % [1 [1 2 [3 4] 5 [6 7] ] 8]

//POW
4 ^ 1.25
4 ^ true
4 ^ "hey"
4 ^ [1 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 ^ [1 [1 2 [3 6] 5 [6 7] ] 8]

"hey" ^ 4
"hey" ^ true
"hey" ^ "h"
"hey" ^ [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" ^ ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true ^ 4
true ^ false
true ^ "hey"
true ^  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] ^ 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] ^ false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] ^ "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] ^ [1 [1 2 [3 4] 5 [6 7] ] 8]

//EQUALTO
4 == 4
4 == 1.25
4 == true
4 == "hey"
4 == [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 == [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" == 4
"hey" == true
"hey" == "h"
"hey" == "hey"
"hey" < "hey"
"hey" < "heyhey"
"hey" > "hey"
"hey" > "heyhey"
"hey" <= "hey"
"hey" <= "heyhey"
"hey" >= "hey"
"hey" >= "heyhey"
"hey" == [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" == ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]
"hey" > ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
"hey" < ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
"hey" >= ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
"hey" <= ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] < "hey"
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] > "hey"
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] <= "hey"
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] >= "hey"


true == 4
true == true
true == false
true == "hey"
true ==  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] == 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] == false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] == "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] == [1 [1 2 [3 4] 5 [6 7] ] 8]

//NOTEQUALTO
4 != 4
4 != 1.25
4 != true
4 != "hey"
4 != [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 != [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" != 4
"hey" != true
"hey" != "h"
"hey" != "hey"
"hey" != [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" != ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true != 4
true != true
true != false
true != "hey"
true !=  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] != 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] != false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] != "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] != [1 [1 2 [3 4] 5 [6 7] ] 8]

//LESSTHAN
4 < 4
4 < 1.25
4 < true
4 < "hey"
4 < [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 < [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" < 4
"hey" < true
"hey" < "h"
"hey" < "hey"
"hey" < [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" < ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true < 4
true < true
true < false
true < "hey"
true <  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] < 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] < false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] < "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] < [1 [1 2 [3 4] 5 [6 7] ] 8]

//GREATERTHAN
4 > 4
4 > 1.25
4 > true
4 > "hey"
4 > [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 > [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" > 4
"hey" > true
"hey" > "h"
"hey" > "hey"
"hey" > [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" > ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true > 4
true > true
true > false
true > "hey"
true >  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] > 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] > false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] > "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] > [1 [1 2 [3 4] 5 [6 7] ] 8]

//LESSTHAN
4 <= 4
4 <= 1.25
4 <= true
4 <= "hey"
4 <= [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 <= [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" <= 4
"hey" <= true
"hey" <= "h"
"hey" <= "hey"
"hey" <= [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" <= ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true <= 4
true <= true
true <= false
true <= "hey"
true <= [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] <= 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] <= false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] <= "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] <= [1 [1 2 [3 4] 5 [6 7] ] 8]

//GREATERTHAN
4 >= 4
4 >= 1.25
4 >= true
4 >= "hey"
4 >= [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 >= [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" >= 4
"hey" >= true
"hey" >= "h"
"hey" >= "hey"
"hey" >= [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" >= ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true >= 4
true >= true
true >= false
true >= "hey"
true >=  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] >= 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] >= false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] >= "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] >= [1 [1 2 [3 4] 5 [6 7] ] 8]

//AND
4 && 4
4 && 0
4 && true
4 && "hey"
4 && [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 && [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" && 4
"hey" && true
"hey" && "h"
"hey" && "hey"
"hey" && [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" && ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true && 4
true && true
true && false
true && "hey"
true &&  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] && 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] && false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] && "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] && [1 [1 2 [3 4] 5 [6 7] ] 8]

//OR
4 || 4
0 || 0
4 || true
4 || "hey"
4 || [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 || [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" || 4
"hey" || true
"hey" || "h"
"hey" || "hey"
"hey" || [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" || ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true || 4
true || true
true || false
true || "hey"
true ||  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] || 0
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] || false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] || "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] || [1 [1 2 [3 4] 5 [6 7] ] 8]

//NOT
!4
!"hey"
!true
![0 1 2 3]

//<<
4 << 4
2 << 1
4 << true
4 << "hey"
4 << [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 << [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" << 4
"hey" << true
"hey" << "h"
"hey" << "hey"
"hey" << [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" << ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true << 4
true << true
true << false
true << "hey"
true <<  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] << 2
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] << false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] << "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] << [1 [1 2 [3 4] 5 [6 7] ] 8]

//>>
4 >> 4
2 >> 1
4 >> true
4 >> "hey"
4 >> [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 >> [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" >> 4
"hey" >> true
"hey" >> "h"
"hey" >> "hey"
"hey" >> [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" >> ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true >> 4
true >> true
true >> false
true >> "hey"
true >>  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] << 2
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] >> false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] >> "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] >> [1 [1 2 [3 4] 5 [6 7] ] 8]

//&
4 & 4
2 & 1
4 & true
4 & "hey"
4 & [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
2 & [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" & 4
"hey" & true
"hey" & "h"
"hey" & "hey"
"hey" & [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" & ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true & 4
true & true
true & false
true & "hey"
true &  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] & 3
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] & false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] & "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] & [1 [1 2 [3 4] 5 [6 7] ] 8]

//Bit Or
4 | 4
2 | 1
4 | true
4 | "hey"
4 | [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
2 | [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" | 4
"hey" | true
"hey" | "h"
"hey" | "hey"
"hey" | [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" | ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true | 4
true | true
true | false
true | "hey"
true |  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] | 3
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] | false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] | "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] | [1 [1 2 [3 4] 5 [6 7] ] 8]

//Bit XOR
4 ^| 3
2 ^| 1
4 ^| true
4 ^| "hey"
4 ^| [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
2 ^| [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" ^| 4
"hey" ^| true
"hey" ^| "h"
"hey" ^| "hey"
"hey" ^| [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" ^| ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true ^| 4
true ^| true
true ^| false
true ^| "hey"
true ^|  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] ^| 3
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] ^| false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] ^| "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] ^| [2 [1 2 [3 4] 5 [6 7] ] 8]

//NOT
~1
~2
~3
~4
~5
~6
~17
~"hey"
~true
~[0 1 2 3]