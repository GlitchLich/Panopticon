 //Unit Tests
//TODO: Pattern Matching, Case Statements, List comprehensions

//No argument functions now work in "point-free" form, i.e., partial application with implied arguments.
f = (+4)
f(2)

//Works with partial function application as well
div :: (Num Num) -> Num
div x y = x / y
div9by = div(9)
div9by(18)

//Even works with infix partial application
divBy9 = (`div` 9)
divBy9(18)

//Multiple arguments as well:
manyArgs x y z w = x + y * z / w
notEnoughArgs = manyArgs(1)
notEnoughArgs(2 3 4)

add1 = (+1) * 2
partialStream = add1 << notEnoughArgs(1)
partialStream(2 3 4)

add1 = (+1)
add2 = (+2)
comp2 f g = \x y = g( f(x) f(y) )
comp2(add1 add2)

//size, returns size of a list
myArray = [0 1 2 3 4 5]
myArray
size( [0 1 2 3 ] )
head( myArray )
tail( myArray )
last( myArray )
init( myArray )



//Reverse reverses an array
reverse <<  myArray

//Zip combines two arrays into tuplets inside an array
za1 = [5 4 3 2 1]
za2 = [3 4 5 6 7 8 9 10]
zip( za1 za2 )
zipWith( (+) za1 za2 )
za3 = [ 99 98 (-666) ]
zip3( za1 za2 za3 )
zipWith3( (+) za1 za2 za3 )

fibs = 0 : 1 : fibs + tail(fibs)
take( 5 fibs )

a = [0 1 1 2]
fibs2 = 0 : 1 : a
fibs2
a

take( 2 [ 0 1 2 3 4 ] )

//filter, apply a boolean returning function to a map, and return all elements that return true:
filter( (>=5) [3 4 5 6 [7 [3 2 10] 2 3 ] 8 0 ] )
filter( (=="hey") ["hey" "you" ["no" "yo" "hey" ] "ok" ] )

//Fold left, function, starting value, array
foldl( (+) 0 [ 1 2 3 4 ] )
foldl( (-) 0 [ 1 2 3 4 ] )
//Can mix types
foldl( (-) "Fuck yeah" ["F" "c" "y"] )
foldl( (+) "cool" [1 2 3 4 "yeah" true] )

//Fold right
foldr( (+) "cool" [1 2 3 4 "yeah" true] )
foldr( (-) 0 [1 2 3 4] )
foldr( \x y = (x+y)/2 54 [12 4 10 6] )

//Faster than recursion based algorithms:
factorial x = foldl( (*) 1 [1..x] )
factorial(50)

//Nested folds
foldr( (\x y = foldr( (^) 1 x) * y) 1 [ [1 1] [2 3] [4 5] ] )

//scanl/scanr is like foldl/foldr, but collects the state of the accumulator into an array
foldl( (-) 100 [1 2 3 4 5] )
scanl( (-) 100 [1 2 3 4 5] )

foldr( (-) 100 [5 4 3 2 1] )

foldr( (-) 100 [5 4 3 2 1] )
scanr( (-) 100 [5 4 3 2 1] )

scanl( (*) 2 [ 2 2 2 2 2 2 2 2 2 2 2 2] )
//Of course, multichannel expansion works:
foldr( (/) [10 1] [5 4 3 2 1] )	
scanr( (/) [10 1] [5 4 3 2 1] )

//fold1, same as fold but without starting value:
foldl1( (-) [1 2 3 4 5] )
foldl1( (+) [1 2 3 4] )
foldl1( (/) [64 4 2 8] )
foldl1( (&&) [1>2 3>2 5==5] )

scanl1( (-) [1 2 3 4 5] )
scanl1( (+) [1 2 3 4] )
scanl1( (/) [64 4 2 8] )
scanl1( (&&) [1>2 3>2 5==5] )

foldr1( (/) [8 12 24 4] )
scanr1( (/) [8 12 24 4] )
scanr1( (+) [1 2 3 4] )

//Primitive Functions
a = [0 1 2 3 ]
b = [0 [1 2 [ 33 ] ] 3 ["ok" [ "lets" "go" ] 2 ] ]
map( (+10) b )
map( (3/) a )
map( \x = x^2 - 3 [6 6 6])

//Speed test! calculate with 300,000 element array
map( \x = (x*2) % 31.3 [1..300000])

//works with functions
doubleDown x = [x x+2]
map( (doubleDown) [0 1 2 3 4] )

//Map is Recursive:
map( (+4) b )

//Use map for applying functions with conditionals to arrays
guardTest x
	| x == 0 	= 0
	| x == 1 	= [ 1 2 3 ]
	| _			= 1000

guardTest(0)
guardTest(1)
guardTest(2)
//Will throw an error since there's an array in the guard statement.
guardTest([5 5])
//Use map instead!
c = [0 [1 2 [0 [5 0] 0] ] 5]
map(guardTest c)
map(guardTest map(guardTest c ) )

//Partial Application of arbitrary functions:
concat x y = x ++ y
plus x y = x + y
div x y = x / y
mod x y = x % y

plus(2 2)
concat(2 2)
div(2 4)
mod(100 53)

concat(1)
plus(1)

partialFunc f x = f(x)

partialFunc( concat(10) 20 )
partialFunc( plus(10) 20 )
partialFunc( div(10) 20 )
partialFunc( mod(10) 20 )

mathTime x y z w = x * y + z - w
wayPartial f y z w = f(y z w) 
wayPartial( mathTime( 10 ) 11 12 13 )

//Lambda Expressions
\x = x^2
\x y = x + y
\x y z = x - y + z
\names dont matter = names * dont + matter

lazyF f = f(2 3) * f(4 5)
lazyF(\x y = x + y)

lambdaList f x = x >> f >> f >> f
lambdaList( (\x = x + 1) 23)

twoLazy a = a[0]([2 3 4 5]) + a[1]([0 1 2 3])
twoLazy( [ \x = x^2 \y = y^4 ] )

lambdazForever :: 
lambdazForever f x t
	| t > 1 = f( lambdazForever( f x t-1 ) )
	| _		= f(x)

lambdazForever( (\x = x * 2) [ 2 3 ] 10)
lambdazForever( (++0) [2 3] 10)[:100:3:%]
lambdazForever( (0++) [2 3] 10)

lambdazForever2 f x t
	| t > 1 = f( lambdazForever2( f x t-1 ) )
	| _		= f(x)

lambdazForever2( (\x = x * 2) [ 2 3 ] 10)
lambdazForever2( (++0) [2 3] 10)[:100:3:%]
lambdazForever2( (0++) [2 3] 10)

lambdazForever3 f x t
	| t > 1 = f( lambdazForever3( f x t-1 ) )
	| _		= f(x)

lambdazForever3( (\x = x * 2) [ 2 3 ] 10)
lambdazForever3( (++0) [2 3] 10)[:100:3:%]
lambdazForever3( (0++) [2 3] 10)



//Operator Sectioning
(+ 1)
(1 +)

sectionTest f x = f(x)
sectionTest( (+2) 4 )
sectionTest( (2+) 4 )
sectionTest( (2-) 4 )
sectionTest( (*2) 4 )
sectionTest( (2*) 4 )
sectionTest( (/2) 4 )
sectionTest( (2/) 4 )
sectionTest( (%2) 4 )
sectionTest( (2%) 4 )
sectionTest( (^2) 4 )
sectionTest( (2^) 4 )
sectionTest( (==2) 4 )
sectionTest( (2==) 4 )
sectionTest( (!=2) 4 )
sectionTest( (2!=) 4 )
sectionTest( (>2) 4 )
sectionTest( (2>) 4 )
sectionTest( (<2) 4 )
sectionTest( (2<) 4 )
sectionTest( (>=2) 4 )
sectionTest( (2>=) 4 )
sectionTest( (<=2) 4 )
sectionTest( (2<=) 4 )
sectionTest( (&&true) true )
sectionTest( (false&&) true )
sectionTest( (||true) true )
sectionTest( (true||) false )
sectionTest( (<<<2) 4 )
sectionTest( (2<<<) 4 )
sectionTest( (>>>2) 4 )
sectionTest( (2>>>) 4 )
sectionTest( (|2) 4 )
sectionTest( (2|) 4 )
sectionTest( (&2) 4 )
sectionTest( (2&) 4 )
sectionTest( (^|2) 4 )
sectionTest( (2^|) 4 )
sectionTest( (:2) 4 )
sectionTest( (2:) 4 )
sectionTest( (<:2) 4 )
sectionTest( (2<:) 4 )
sectionTest( (++2) 4 )
sectionTest( (2++) 4 )
//also multi-channel expands!
sectionTest( (+[10 12 13]) 4 )
sectionTest( (+10) [4 3] )

//Operator functions
(+)
(-)

opFunc f x y = f(x y)
opFunc( (+) 2 4 )
opFunc( (-) 2 4 )
opFunc( (*) 2 4 )
opFunc( (/) 2 4 )
opFunc( (%) 2 4 )
opFunc( (^) 2 4 )
opFunc( (==) 2 4 )
opFunc( (!=) 2 4 )
opFunc( (<) 2 4 )
opFunc( (>) 2 4 )
opFunc( (<=) 2 4 )
opFunc( (>=) 2 4 )
opFunc( (&&) true false )
opFunc( (||) true false )
opFunc( (<<<) 2 4 )
opFunc( (>>>) 2 4 )
opFunc( (|) 2 4 )
opFunc( (&) 2 4 )
opFunc( (^|) 2 4 )
opFunc( (&) 2 4 )
opFunc( (:) 2 4 )
opFunc( (<:) 2 4 )
opFunc( (++) 2 4 )

//Infix binary argument functions:
plus x y = x + y
2 / 4 `plus` 2 * 3
lazyPlus f x y = x `f` y
lazyPlus((/) 3 4)

//Partial Application of infix functions
div x y = x / y
partialFunc f x = f(x)
partialFunc( (`div` 2) 3)
partialFunc( (2 `div`) 3)

moreComplex x y = x - y / z
	where
		z = 3
partialFunc( (`moreComplex` 10) 20 )

//where variables in condition_tree, works:
wGuard x
	| x == a		= "a"
	| x == b		= "b"
	| x == c::test	= [ "c" "d" ]
	| _				= "d"
	where
		a = 3
		b = 2
		c = { test = 1 }
		d = 0

wGuard(1)

//Where variables in operation_tree, doesn't ???:
wGuard2 x
	| x > 2	= print(3)
	| x > 1	= b
	| x > 0 = c
	| _		= d
	where
		a = "a"
		b = "b"
		c = "c"
		d = "d"

wGuard2(2)

factorial n
	| n > 0 = n * factorial(n - 1)
	| _		= 1

factorial(10)

//Array ranges
[2..10]
//Array ranges with steps
[2,4..16]
//With negative ranges
a = [12,9..0]
//Ranges with slicing
range = [120,117..0]
range
range[19::(-3):%]
//nesting possible
range[19::(-3):%][5]
//Both ways
nestedRange = [ [120,117..0] [130,127..10] ]
nestedRange[0][19::(-3):%]
nestedRange[1][19::(-3):%]
//further
nestedRange[0][19::(-3):%][5:]
nestedRange[1][19::(-3):%][6:]
//Make patterns with nesting!
range[38:40][:120:%]
range[38:40][:120:%]

arrayBuilder x y = [x..y]
arrayBuilder(20 200)[::16:%]

mySynth freq = [s1 s2] >> out()
	where
		s1 = sinSynth(freq) >> distort(0.3) 
		s2 = sinSynth(freq) >> delay(0.1)  >> filter(freq * 2)

//Also works with Doubles!
[0.1,0.3..1]

//Array Slice tests:
a = [20..40]

//array [ first element : exclusion point : step size ( = 1) ] : Wrapping = %
a[:3]
a[3:]
a[6:10]
//With step sizes
a[::3]
a[4::(-2)]
a[:10:3]
a[10:3:(-3)]
//With wrapping
a[:50:%]
//Rotations
a[(-6):%]
//Rotations with extended size
a[(-7):100:%]
//Not so useful
a[::3:%]
//Rotations with different step sizes
a[2::(-2):%]
a[:60:9:%]
a[2:(-40):(-4):%]

//Array filling syntax
a = Array.new(1000, { |i| i.sin })
a = sinBuilder n =
	| n == 0	= sin(0)
	| _			= sin(n):sinBuilder(n-1)
a = fillArray(num func)
//List Comprehension?:
a = [ sin(i) | i <- [1..1000] ]
//Using map...the easiest?
a = map( sin [1..1000] )
//.... or even easier:
a = sin( [1..1000] )

b = [6,5..(-6)]
frankenArray x sx1 sx2 y sy1 sy2 = x[sx1:sx2] ++ y[sy1:sy2]
frankenArray(a 0 3 b 6 9)
frankenArray(a 4 6 b 2 6)

//Throws correct Errors:
c[:3]
a[5:4]

1
(-1)
[ 0 1 2 3 ]
"test"

"test"+"test"

whereTest x = x + y * z	
	where 
		y = x * 10 
		z = y * 0.125

whereTest( [ 12 16 ] )

a = [0 1 2 3]
a + [ 0 1 2 3 4 ]
axe x = x
axe(a)
recursion x t = recursion(x t-1)

ten = 10
ten
recursion(12)

hellYeah x = x + y("!!!")
	where
		y z = "Hell yeah"+z

hellYeah("ok")

//Just like a dict, so you can even do this:
hellYeah x = x + y("!!!")
	where 
		y z = "Hell yeah"+z

illegalExprTest x = x + y 3 * 3
illegalExprTest2 = x + y 3 * 3

recursion x t = recursion(x t-1)

recursion(12)

headTailFunc z (x:xs) = x : xs

arrayGuard x
	| x[0] == 1 							= "Zero!"
	| x[1] == 1								= "First!"
	| x[2] == 1								= "Second!"
	| x[0] == 0 && x[1] == 0 && x[2] == 0 	= a
	| _										= d
	where
		a = ["DEAD" "DEAD" "DEAD"]
		d = {
			test = 0
			test1 = 1
			test2 = 2
			test3 = 3
			test4 = 4
			test5 = {
				subTest = "Works!"
			}
		}

arrayGuard x
	| x[0] == 1 							= "Zero!"
	| x[1] == 1								= "First!"
	| x[2] == 1								= "Second!"
	| x[0] == 0 && x[1] == 0 && x[2] == 0 	= ["DEAD" "DEAD" "DEAD"]
	| _										= {
			test = 0
			test1 = 1
			test2 = 2
			test3 = 3
			test4 = 4
			test5 = {
				subTest = "Works!"
			}
		}

arrayGuard([1 1 1])
arrayGuard([0 1 1])
arrayGuard([0 0 1])
arrayGuard([0 0 0])
arrayGuard([6 6 6])
arrayGuard([6 6 6])::test5::subTest
//Throws correct errors:
arrayGuard(2)
arrayGuard([ [1 0 0] [0 1 0] [0 0 1] ])


//Stream operator WORKS
//Takes up same amount of space, but looks waaaaaay clearer IMO
//Pass expression on the left as the first argument to the func on the right:
f x = x * 2
f(2)
2 >> f
//And the opposite: Pass expression on the right as the first argument to the func on the left:
f << 2

//Chains to other functions:
g x = x * 4
g( f( 1 ) )
1 >> f >> g
g << f << 1
g( f( g( f( g( f( [ 2 3 4 5 ] ) ) ) ) ) )
[ 2 3 4 5 ] >> f >> g >> f >> g >> f >> g
g << f << g << f << g << f << [ 2 3 4 5 ]

//Partial application also works :) Inserts into the first argument:
f2 x y = x * y
g2 x y = (x * 2) / y
g2( f2( 2 3 ) * 4 10 )
2 >> f2( 3 ) * 4 >> g2( 10 )
g2( 10 ) << 4 * f2( 3 ) << 2

//embedable into other functions as well:
embededStream x y = x >> y
embededStream(3 g)

//embedable into other functions as well:
embededStream2 x y = x >> y(2)
embededStream2(10 g2)
g2(10 2)

//Composition operator plus guards plus recursion, interesting patterns
crossTheStreams x
	| x < 100 && x > 0	= crossTheStreams(x + 2) - 1 >> crossTheStreams
	| _					= x * 2
crossTheStreams(1)
crossTheStreams(50)
crossTheStreams(95)
crossTheStreams(96)
crossTheStreams(97)
crossTheStreams(98)
crossTheStreams(99)
crossTheStreams(100)
crossTheStreams([100 100])

//Function Arrays
// Works
doubler x = x * 2
zeroOut x = x * 0
doubleNeg x = x * (-2)
spreader = [doubler zeroOut doubleNeg]
spreader[0](1)
spreader[](0)
spreader[](2)
spreader[]([0 1 2 3 4 5 6 7 8 9 10])
spreader[]([0 1 2 3 4 5 6 7 8 9 10])[0]
spreader[]([0 1 2 3 4 5 6 7 8 9 10])[1]
spreader[]([0 1 2 3 4 5 6 7 8 9 10])[2][6]
spreader[](spreader[](spreader[](24)))

notRight = 10
notASpreader = [notRight doubleNeg]
notASpreader[](2)

doubleDoubleNeg x y = [x * (-2) y * (-2)]
notEnoughArgs = [doubleNeg doubleDoubleNeg]
notEnoughArgs[](2)


//================
//Unary operators
//================

//Unary Minus
(-3)
//this is math in an array:
[1 -3]
//this is an array with two numbers:
[1 (-3)]

//Not
!true == false

//Bit NOT
~1

//with arrays
![true false true]
(-[0 1 2 3])
~[0 1 2 3]

//Prepending

//Raw Prepend, Right associative, inserts INTO array
1:>2:>3:>4
//or
1:2:3:4

[666] :> [2 3 4]
//or
[666] : [2 3 4]

myArray = [ 2 3 4 5 ]
47 : myArray[0]

1 : 1
1 : true
1 : "hey"
1 : [2 3 4]

true : 1
true : false
true : "hey"
true : [2 3 4]

"hey" : 1
"hey" : true
"hey" : "hey"
"hey" : [2 3 4]

[2 3 4] : 1
[2 3 4] : true
[2 3 4] : "hey"
[2 3 4] : [2 3 4]


//Raw Append, Left associative, inserts INTO array
1 <: 2 <: 3 <: 4
[2 3 4] <: [666]

1 <: 1
1 <: true
1 <: "hey"
1 <: [2 3 4]

true <: 1
true <: false
true <: "hey"
true <: [2 3 4]

"hey" <: 1
"hey" <: true
"hey" <: "hey"
"hey" <: [2 3 4]

[2 3 4] <: 1
[2 3 4] <: true
[2 3 4] <: "hey"
[2 3 4] <: [2 3 4]

printArray = print([0 1 2 3])
printArray
//Concat, Left associative, puts things at same level
//When concacting with strings, creates a new string (but Array takes precedence).
1++2++3++4
[666] ++ [ 2 3 4 ]
//or
[666] ++ [2 3 4]

1++1
1++true
1++"hey"
1++[2 3 4]

true++1
true++false
true++"hey"
true++[2 3 4]

"hey"++1
"hey"++true
"hey"++"hey"
"hey"++[2 3 4]

[2 3 4]++1
[2 3 4]++true
[2 3 4]++"hey"
[2 3 4]++[2 3 4]

prependFunc x array = x : array
prependFunc(20 [0 1 2 3])
prependFunc([true false] [0 1 2 3])

prependFunc2 p x y = [ p x ] : y
prependFunc2(20 [0 1 2 3] [0 1 2 3] )

prependFunc3 x array = x*2 :> array+20
prependFunc3(20 [0 1 2 3])

prependFunc4 array = array[0] :> array
prependFunc4([0 1 2 3])

appendFunc array = array <: array[0]
appendFunc([0 1 2 3])

simplePrependLoop x a t
	| t > 0 	= x : simplePrependLoop(x a t-1)
	| _			= a
simplePrependLoop(0 [0 1 2 3] 3)

simpleAppendLoop x a t
	| t > 0 	= simpleAppendLoop(x a t-1) <: x
	| _			= a
simpleAppendLoop(0 [0 1 2 3] 10)

//Non Destructive
pArray = [ 0 1 2 3 ]
prependFunc("test" pArray)
pArray

//Still non destructive
"test2" : pArray
pArray

//Simply rebuilds the list * 2
//(x:xs) Head and Tail pattern matching 
//(can use any names you want, x:xs is standard however
headTailFunc (x:xs) = change : headTilFunc(xs)
	where
		change = x * 2
//Head only pattern matching
headTailFunc2 (x:xs) = x : xs

//Tail only pattern matching
headTailFunc3 (_:xs) = x : xs

//Where
subvariable = x * z
	where
		z = x+1
		x = 10+1 
		
subvariable + [1 2]

arrayWhere = x * z  + [1 2]
	where
		x = 10
		z = 11

subvariable + subvariable / [ subvariable * 3.141592654 ]

arrayWhere

//Where
whereFunc x = x + w - t
	where 
		w = 5
		t = w * x

whereFunc( 3 )
whereArray = [ whereFunc( 11 ) whereFunc( 11 ) ] 
whereArray

//Where with sub functions
subFunc x y = ( x + w ) - ( t(x y) - y ) 
	where 
		w = 5
		t z d = ( z * d ) / 10

subFunc( 13 10 )
subFunc( [ 13 ] 10 )
subFunc( 8 120 )

//Dynamic Scoping in action
subFunc2 x y = t(x y)
	where 
		t y x = x - y

subFunc2( 1 2 )
subFunc2( [ 1 2 ] 2 )
subFunc2( [ 3 2 2 ] 2 )

// Arrays in where statement
subFunc3 x y = t(x y)
	where 
		t y x = [ x y ]

subFunc3( 1 2 )

testFunc x y = [ x y ]
subFunc4 x y = t( x y )
	where 
		t y x = testFunc( y x )

subFunc4( 1 2 )

subvariable = x * z
	where
		x = 10
		z = 11

t w z = w - z
subFunc5 x y = t(x y) * [ 1 2 ]
subFunc5( 1 2 )

subFunc6 x y = [ 2 ]
	where 
		t w = w * 2
		z = 1

subFunc6( 1 2 )

//Arrays with sub functions crashes
subFunc3 x y= t(x y)
	where 
		t y x = [ x y ]

subFunc3( 1 2 )

//Arrays with sub functions crashes
subFunc3 x y= t(x y) + [ 1 2 ]
	where 
		t w z = w - z

subFunc3( 1 2 )
	

chain x = x + y + z + q + w
	where
		y = 1
		z = 2
		q = 3
		w = 4

chain(3)


chain2 x y = p( x )
	where
		p x = print( x )

chain2( [ 3  1 ] 2 )


whereGuardz x
	| x + y > 4 	= [0 1 2 3] * 3
	| x + y == 4 	= 2
	| _				= 1
	where
		y = 1

whereGuardz(3)


//Where statements with guard statements
whereGuard x
	| x + y > 10	= 10000
	| x + y == 10	= 10
	| _				= 0
	where
		y = 5

whereGuard( 5 )

arrayGuard x
	| x[0] == 1	= "First"
	| x[1] == 1 = "Second"
	| _			= "nope"

arrayGuard([0 1 2])

//Fibonacci sequence! probably shouldn't go above 16 right now....
fib i
    | i > 1  	= fib( i-1 ) + fib( i-2 )
    | i == 1 	= 1
	| i == 0 	= 0
	| _ 		= "fib: negative index"

fList s t
	| s >= t	= fib(s) : []
	| s > 0		= fib(s) : fList(s + 1 t)
	| _			= []

fib i
    | i > 1  	= fib( i-1 ) + fib( i-2 )
    | _			= 1

fList( 1 20 )
fib(40)
2^24

//()'s disband the offside rule
myGuardFunc(
	6 
	0
)

myGuardFunc(2 2)
myGuardFunc(3 2)


//Can Match to different types, produce different types
myGuardFunc3 x 
	| x == "hey" 	= "Hell yeah" 
	| x == 3 		= x^4

myGuardFunc3("hey")
myGuardFunc3(3)
//Throws an error, because no conditions are met. Be careful about this!
myGuardFunc3(0)

//Recursive guards. This way you can make recursion STOP. haha....
factorial n
	| n <= 0 	= 1
	| _ 		= n * factorial(n -1)

factorial(1)
factorial(5)
factorial(10)
factorial(20)
factorial(200)
//Speed Test (though printing doesn't help....)
factorial(2000)

//Not working
myCaseFunc x = 
	case x of
		0 -> 1
		1 -> 2
		_ -> 4
		case x of
			0 -> 1
			1 -> 2
			_ -> 4

letFunc x = 
	let	
		w = 2000 + x 
		z = 399/x
	in x + w * z		
)

//Guard version, needs logic:
plusOne x = x + 1
funcRepeater op x t 
	| t > 0 = x + funcRepeater(op op(x) t-1)
	| _		= x+op(x)

funcRepeater(plusOne 2 5)

//Works
combiner x y = [x y]
combiner(12 13)

//Arrays with variables in Function declarations
combinedPlus x y i1 i2 = [ x[i1] y[i2] ] + 1
combinedPlus([2 3 4] [4 5 6] 0 2)

separatedPlus x = x[0]+1
anArray = [14 15 16]
separatedPlus(anArray)

getIndex x = x[0]

getIndex([2 3 4])

//parentheses with operations
pL = 10*(2+1)
pL()
pR x y = (x+y)*10
pR(1 1)

ten = 5+5
ten
10+ten
ten+10
twenty = ten + 10
twenty

//variables, crashes needs lexical scoping
num = 5
otherNum = num*33.3
num * otherNum

mybool = true
myfalsebool = !mybool
myfalsebool != mybool

//INDEXING ARRAYS
myArray = [23 22 0 20+1]
myArray[0]
myArray[1]
myArray[2]
myArray[3]
myArray[[[3 1]]]
myArray[myArray[myArray[2]+2]+1]

//Multi-dimensional Array
nestedarray = [ 23 [ 22 21 [ "three" "four" [ "beer" "is good" [ true false ] ] ] ] 20 ]
nestedarray[1]
nestedarray[1][2]
nestedarray[1][2][2]
nestedarray[1][2][2][2]
nestedarray[1][2][2][2][0]

myArray

metaArray = [0 1 myArray 3]
metaArray[2]
metaArray[2][3]

//Indexing in function calls
//Index a previously declared array
valueAtIndex i = myArray[i]
valueAtIndex(3)
//Index a local variable...
valueAtIndex2 a i = a[i]
valueAtIndex2( [3 4 5 6] 2 )
valueAtIndex2( myArray 1 )
//Calling another Function which indexes an array
superLazyIndexing aFunc a i = aFunc(a() i)
superLazyIndexing( valueAtIndex2 myArray 3 )

//Array functions used for Function Calls
myFunc x y = x / y
myFunc(a[(-3):100:%] 3)
multiArray = [23 22 [ 0 4 [ 6 7 ] ] 20]
myFunc(2 multiArray)
myFunc(multiArray[2][2][1] multiArray[2])

//Functions as arguments to Function calls
ten = 10
doubler x = x*2
doubler(ten)
doubler(myArray)

//Incorrect number of arguments throws an error.
myFunc(1 2)

//Non-existent Functions throw errors.
myFun(10 11)

"hey"[0]
4[0]
true[0]
myArray["hey"]
myArray[true]
myArray[4]

//PLUS
4 + 4
4 + true
4 + "hey"
4 + [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

"hey" + 4
"hey" + true
"hey" + "hey"
"hey" + [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

true + 4
true + false
true + "hey"
true +  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + false
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + "hey"
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] + [0 [true 2 [3 "hey"] 5 [6 7] ] 8]
[0 [1 2 [3 4] 5 [6 7] ] 8] + [0 [1 2 [3 4] 5 [6 7] ] 8]

//MINUS
4 - 4
4 - true
4 - "hey"
4 - [0 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 - [0 [1 2 [3 6] 5 [6 7] ] 8]

"hey" - 4
"hey" - true
"hey" - "h"
"hey" - [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" - ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true - 4
true - false
true - "hey"
true -  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] - 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] - false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] - "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] - [0 [1 2 [3 4] 5 [6 7] ] 8]

//MULTIPLY
4 * 4
4 * true
4 * "hey"
4 * [0 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 * [0 [1 2 [3 6] 5 [6 7] ] 8]

"hey" * 4
"hey" * true
"hey" * "h"
"hey" * [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" * ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true * 4
true * false
true * "hey"
true *  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] * 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] * false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] * "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] * [0 [1 2 [3 4] 5 [6 7] ] 8]

//DIVIDE
4 / 4.5
4 / true
4 / "hey"
4 / [1 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 / [1 [1 2 [3 6] 5 [6 7] ] 8]

"hey" / 4
"hey" / true
"hey" / "h"
"hey" / [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" / ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true / 4
true / false
true / "hey"
true /  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] / 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] / false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] / "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] / [1 [1 2 [3 4] 5 [6 7] ] 8]

//MOD
4 % 1.25
4 % true
4 % "hey"
4 % [1 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 % [1 [1 2 [3 6] 5 [6 7] ] 8]

"hey" % 4
"hey" % true
"hey" % "h"
"hey" % [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" % ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true % 4
true % false
true % "hey"
true %  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] % 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] % false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] % "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] % [1 [1 2 [3 4] 5 [6 7] ] 8]

//POW
4 ^ 1.25
4 ^ true
4 ^ "hey"
4 ^ [1 [true 2 [3 "hey"] 5 [6 7] ] 8]
4 ^ [1 [1 2 [3 6] 5 [6 7] ] 8]

"hey" ^ 4
"hey" ^ true
"hey" ^ "h"
"hey" ^ [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" ^ ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true ^ 4
true ^ false
true ^ "hey"
true ^  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] ^ 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] ^ false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] ^ "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] ^ [1 [1 2 [3 4] 5 [6 7] ] 8]

//EQUALTO
4 == 4
4 == 1.25
4 == true
4 == "hey"
4 == [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 == [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" == 4
"hey" == true
"hey" == "h"
"hey" == "hey"
"hey" < "hey"
"hey" < "heyhey"
"hey" > "hey"
"hey" > "heyhey"
"hey" <= "hey"
"hey" <= "heyhey"
"hey" >= "hey"
"hey" >= "heyhey"
"hey" == [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" == ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]
"hey" > ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
"hey" < ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
"hey" >= ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
"hey" <= ["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"]
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] < "hey"
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] > "hey"
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] <= "hey"
["1" ["123" "12" ["12345" "1234"] "123" ["12" "1"] ] "1234"] >= "hey"


true == 4
true == true
true == false
true == "hey"
true ==  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] == 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] == false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] == "h"
[0 [1 2 [3 4] 5 [6 7] ] 8] == [1 [1 2 [3 4] 5 [6 7] ] 8]

//NOTEQUALTO
4 != 4
4 != 1.25
4 != true
4 != "hey"
4 != [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 != [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" != 4
"hey" != true
"hey" != "h"
"hey" != "hey"
"hey" != [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" != ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true != 4
true != true
true != false
true != "hey"
true !=  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] != 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] != false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] != "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] != [1 [1 2 [3 4] 5 [6 7] ] 8]

//LESSTHAN
4 < 4
4 < 1.25
4 < true
4 < "hey"
4 < [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 < [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" < 4
"hey" < true
"hey" < "h"
"hey" < "hey"
"hey" < [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" < ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true < 4
true < true
true < false
true < "hey"
true <  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] < 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] < false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] < "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] < [1 [1 2 [3 4] 5 [6 7] ] 8]

//GREATERTHAN
4 > 4
4 > 1.25
4 > true
4 > "hey"
4 > [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 > [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" > 4
"hey" > true
"hey" > "h"
"hey" > "hey"
"hey" > [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" > ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true > 4
true > true
true > false
true > "hey"
true >  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] > 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] > false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] > "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] > [1 [1 2 [3 4] 5 [6 7] ] 8]

//LESSTHAN
4 <= 4
4 <= 1.25
4 <= true
4 <= "hey"
4 <= [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 <= [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" <= 4
"hey" <= true
"hey" <= "h"
"hey" <= "hey"
"hey" <= [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" <= ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true <= 4
true <= true
true <= false
true <= "hey"
true <= [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] <= 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] <= false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] <= "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] <= [1 [1 2 [3 4] 5 [6 7] ] 8]

//GREATERTHAN
4 >= 4
4 >= 1.25
4 >= true
4 >= "hey"
4 >= [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 >= [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" >= 4
"hey" >= true
"hey" >= "h"
"hey" >= "hey"
"hey" >= [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" >= ["e" ["h" "y" ["ey" "he"] "h" ["heyyyyyy" " "] ] "3"]

true >= 4
true >= true
true >= false
true >= "hey"
true >=  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] >= 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] >= false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] >= "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] >= [1 [1 2 [3 4] 5 [6 7] ] 8]

//AND
4 && 4
4 && 0
4 && true
4 && "hey"
4 && [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 && [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" && 4
"hey" && true
"hey" && "h"
"hey" && "hey"
"hey" && [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" && ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

-3
true && 4
true && true
true && false
true && "hey"
true &&  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] && 4
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] && false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] && "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] && [1 [1 2 [3 4] 5 [6 7] ] 8]

//OR
4 || 4
0 || 0
4 || true
4 || "hey"
4 || [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 || [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" || 4
"hey" || true
"hey" || "h"
"hey" || "hey"
"hey" || [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" || ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true || 4
true || true
true || false
true || "hey"
true ||  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] || 0
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] || false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] || "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] || [1 [1 2 [3 4] 5 [6 7] ] 8]

//NOT
!4
!"hey"
!true
![0 1 2 3]

//<<
4 << 4
2 << 1
4 << true
4 << "hey"
4 << [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 << [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" << 4
"hey" << true
"hey" << "h"
"hey" << "hey"
"hey" << [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" << ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true << 4
true << true
true << false
true << "hey"
true <<  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] << 2
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] << false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] << "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] << [1 [1 2 [3 4] 5 [6 7] ] 8]

//>>>
4 >>> 4
2 >>> 1
4 >>> true
4 >>> "hey"
4 >>> [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
4 >>> [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" >>> 4
"hey" >>> true
"hey" >>> "h"
"hey" >>> "hey"
"hey" >>> [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" >>> ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true >>> 4
true >>> true
true >>> false
true >>> "hey"
true >>>  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] << 2
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] >> false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] >> "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] >>> [1 [1 2 [3 4] 5 [6 7] ] 8]

//&
4 & 4
2 & 1
4 & true
4 & "hey"
4 & [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
2 & [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" & 4
"hey" & true
"hey" & "h"
"hey" & "hey"
"hey" & [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" & ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true & 4
true & true
true & false
true & "hey"
true &  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] & 3
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] & false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] & "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] & [1 [1 2 [3 4] 5 [6 7] ] 8]

//Bit Or
4 | 4
2 | 1
4 | true
4 | "hey"
4 | [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
2 | [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" | 4
"hey" | true
"hey" | "h"
"hey" | "hey"
"hey" | [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" | ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true | 4
true | true
true | false
true | "hey"
true |  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] | 3
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] | false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] | "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] | [1 [1 2 [3 4] 5 [6 7] ] 8]

//Bit XOR
4 ^| 3
2 ^| 1
4 ^| true
4 ^| "hey"
4 ^| [1 [true 2 [4 "hey"] 5 [6 7] ] 8]
2 ^| [1 [1 2 [3 6] 5 [6 7] ] 4]

"hey" ^| 4
"hey" ^| true
"hey" ^| "h"
"hey" ^| "hey"
"hey" ^| [0 [1 2 [3 6] 5 [6 7] ] 8]
"hey" ^| ["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "3"]

true ^| 4
true ^| true
true ^| false
true ^| "hey"
true ^|  [0 [true 2 [3 "hey"] 5 [6 7] ] 8]

[0 [1 2 [3 4] 5 [6 7] ] 8] ^| 3
[0 [true 2 [3 "hey"] 5 [6 7] ] 8] ^| false
["e" ["h" "y" ["ey" "he"] "h" ["hey" " "] ] "e"] ^| "h"
[1 [1 2 [3 4] 5 [6 7] ] 8] ^| [2 [1 2 [3 4] 5 [6 7] ] 8]

//Bit NOT
~1
~2
~3
~4
~5
~6
~17
~"hey"
~true
~[0 1 2 3]